docno="lists-000-13347812"
received="Tue Jul 11 18:33:31 2000"
isoreceived="20000711223331"
sent="Wed, 12 Jul 2000 10:33:28 +1200 (NZST)"
isosent="20000711223328"
name="Richard A. O'Keefe"
email="ok@atlas.otago.ac.nz"
subject="Re:  suppressing/transforming deprecated tags [Re: Tidy putting   spurious &quot;/&quot; into tags]"
id="200007112233.KAA21085@atlas.otago.ac.nz"
inreplyto=" suppressing/transforming deprecated tags [Re: Tidy putting   spurious &quot;/&quot; into tags]"
expires="-1"


To:html-tidy@w3.org,lange@cyperfection.de

Sebastian Lange <lange@cyperfection.de> suggested
fix-bad-attributes: leave, drop, convert
         If set to _drop_, deprecated attributes will be discarded. If set to
         _convert_, causes Tidy to replace deprecated attributes by appropriate
         style rules. The default is _leave_.

Any comments or objections?

This might need to be overridden for specific attributes.
There should perhaps be
new-cdata-attributes: att1, ..., attn
new-boolean-attributes: bul1, ..., buln
The former would be equivalent to adding
atti CDATA #IMPLIED
to every element's ATTLIST, and the latter to adding
buli (buli) #IMPLIED
to every element's ATTLIST.
For example, if I wanted Microsoft's tags to softly and suddenly
vanish away, but wanted to keep NATURALSIZEFLAG, I should be able to write
fix-bad-attributes: drop
new-boolean-attributes: naturalsizeflag

Then of course there is XHTML.  A fundamental feature of XML is that
new attributes can be added to any element, whatever the DTD says.
In general, when processing XML, you can't really afford to drop new
attributes.  But at one particular site, the people might know that
certain attributes are not wanted.  So for XHTML, we might need
bad-attributes: bad1, ..., badn
lists known bad attributes whose treatment is to be governed by
fix-bad-attributes, other "new" attributes being retained.  That would
apply to XHTML only, not to HTML, which has no such blanket permission
for new attributes everywhere.



