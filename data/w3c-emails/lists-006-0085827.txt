docno="lists-006-0085827"
received="Tue May 22 10:25:01 2001"
isoreceived="20010522142501"
sent="Tue, 22 May 2001 10:23:59 -0400"
isosent="20010522142359"
name="Clemm, Geoff"
email="gclemm@rational.com"
subject="RE: PROPFIND allprop with more properties (was AW: Resource class )"
id="3906C56A7BD1F54593344C05BD1374B10319642C@SUS-MA1IT01"
inreplyto="PROPFIND allprop with more properties (was AW: Resource class )"
expires="-1"


To:ietf-dav-versioning@w3.org

   From: Stefan Eissing [mailto:stefan.eissing@greenbytes.de]

   ... I found that the versioning properties did
   vanish from PROPFIND/allprop in revision 14.1 of the draft.

   With the current state of things, I'd have to do 2 PROPFINDS (one
   allprop to catch all dead properties, one specific DAV:supported*
   to know about versioning and resource status).

Versioning properties are included in PROPFIND/DAV:propname, so you do
need two requests, but they would be a PROPFIND/DAV:propname request,
and then a PROPFIND on the list of properties returned by the
PROPFIND/DAV:propname.

But I would think hard about ever having an application blindly ask
for all the properties on a set of resources.  These properties could
be very expensive to compute, and since you have no way of determining
how long these property values are valid, caching them is of
questionable value.

   Has it been discussed already (could not find it in the archive) to
   enhance allprop by allowing the client to specify additional properties?
   This would make the body of a PROPFIND look like

   <propfind xmlns="DAV:">
     <allprop>
     <prop>
       <supported-method-set/>
       <supported-live-property-set/>
     </prop>
   </propfind>

   and the result would be the joined set of a PROPFIND/allprop
   and PROPFIND/prop.

   (The only related thing I could find was the "WebDAV PROPFIND
   Extension To List Specified Namespaces" Draft from August 1999.
   Which is a nice draft, but I assume it is too late to move the
   versioning props into a separate namespace...)

Because of the issues mentioned above (i.e. expense of computing live
property values, and the absence of support for reliable property
value caching), the versioning protocol does not worry about the extra
round required to obtain "all versioning properties".  A live property
is effectively a "query" on the state of a resource.  Would one
expect to be able to "perform all known queries on this resource"
in a single round trip?

Cheers,
Geoff



