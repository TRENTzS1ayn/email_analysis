docno="lists-006-10266758"
received="Tue Jul 10 19:33:30 2001"
isoreceived="20010710233330"
sent="Wed, 11 Jul 2001 09:32:51 +1000"
isosent="20010710233251"
name="Alan Kent"
email="ajk@mds.rmit.edu.au"
subject="Re: Finding the version of a resource in a Version-Controlled-Collect ion..."
id="20010711093251.A2227@io.mds.rmit.edu.au"
charset="us-ascii"
inreplyto="20CF1CE11441D411919C0008C7C5A13B0227E55F&#64;stalmail.eu.merant.com"
expires="-1"

To:ietf-dav-versioning@w3.org


On Tue, Jul 10, 2001 at 10:28:50AM +0100, Peter Raymond wrote:
> Despite some excellent e-mail threads recently regarding
> Version-Controlled-Collections
> I am still not clear how to find the specific version of a resource which is
> referenced by a version of a collection resource.

I think the answer is you don't. A collection does not identify exact
versions of resources that are referenced. If it did, then every time
a member of the collection was versioned, the collection itself would
have to be versioned. Versioning the collection would in turn cause
its parent collection to be versioned, and so on up the tree. This is
not really acceptable, so collection histories do not identify specific
versions, only a version history.

This felt weird to me at first, but it made sense eventually. I like
relating things back to CVS (because I use it a lot). In CVS, each
file has its own version history with version numbering. Not all files
in a directory have the same version numbers. So when you do a cvs update
or cvs checkout, you are actually asking each file individually for
'the latest version' or 'a version with this label'. You do not use
CVS to say 'get me version 1.2 of every file in a directory' because
the files have individual version numbering.

The same is true for collections. To do a VERSION-CONTROL in DeltaV,
for every single resource you get a version-controlled resource for,
its up to you to select the particular version you want.

Collections are a bit weird in that asking for the collection actually
gives you a tree of all the member resources (including nested
collections etc.). The standard says however that in this case you
always get the root version in the history (unless its already in the
workspace in which case it binds to the existing VCR in that workspace).
Its up to the client to then say "no, I don't want the root version
for this resource, I want version X" where its up to the client to
work out what version X is.

At least that is my current understanding. Please not however that
I have not read up properly on activies and baselines yet, so the
above may be different when using those concepts. But I beleive the
above is correct with respect to the fundamentals of the DeltaV
versioning.

Hope this helps (and is correct! :-)

Alan



