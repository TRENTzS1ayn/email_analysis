docno="lists-006-10339850"
received="Wed Jul 11 06:53:43 2001"
isoreceived="20010711105343"
sent="Wed, 11 Jul 2001 11:53:45 +0100"
isosent="20010711105345"
name="Tim Ellison"
email="Tim_Ellison@uk.ibm.com"
subject="Re: Postconditions with no XML elements defined?"
id="OFFD951A1D.09FC43A8-ON80256A86.003B4D10@portsmouth.uk.ibm.com"
charset="us-ascii"
inreplyto="Postconditions with no XML elements defined?"
expires="-1"

To:ietf-dav-versioning@w3.org



Peter Raymond <Peter.Raymond@merant.com> wrote:

> In section 1.6 of the specification it states:
>
> In order to allow better client handling of 403 and 409 responses,
> a distinct XML element type is associated with each method
> precondition and postcondition of a request.
>
> But several Postconditions in the specification do not have any
> XML elements defined.
>
> Section 8.5, 8.6, 8.7, 8.8, and 9.6 for example.  Do we need to
> change 1.6 to say that some preconditions and postconditions have
> distinct XML elements?

I'd be inclined to name all the pre-postconditions, even if it is unlikely
that a client will ever see them coming back from a server I think it is
useful to name them so we can talk about them and refer to them easily.

> Also regarding the 403/409 responses it was not clear from the spec
> when to send 403 and when to send 409.  The text in section 1.6 reads:
>
> If a method precondition for a request is not satisfied, or if a
> method postcondition for a request cannot be achieved, the response
> status of the request MUST be 403 (Forbidden) or 409 (Conflict).
>
> Does this mean a 403 should be sent for a failed precondition and
> a 409 should be sent for a postcondition failure.  Or does it mean
> the server implementer can return either code in either situation.
> This is not clear from reading the spec.

It simply means that DeltaV is using the definitions found in RFC2616 and
is not redefining their meanings.  In preactise this means that server
implementers can choose within those guidelines, but I think we should
agree between ourselves which are which.

Regards,
Tim



