docno="lists-006-10598171"
received="Thu Jul 12 10:37:14 2001"
isoreceived="20010712143714"
sent="Thu, 12 Jul 2001 10:36:32 -0400"
isosent="20010712143632"
name="Clemm, Geoff"
email="gclemm@rational.com"
subject="RE: Finding the version of a resource in a Version-Controlled-Col lect ion..."
id="3906C56A7BD1F54593344C05BD1374B1038E2267@SUS-MA1IT01"
inreplyto="Finding the version of a resource in a Version-Controlled-Col lect ion..."
expires="-1"


To:ietf-dav-versioning@w3.org

   From: Alan Kent [mailto:ajk@mds.rmit.edu.au]

   On Tue, Jul 10, 2001 at 10:28:50AM +0100, Peter Raymond wrote:

   > Despite some excellent e-mail threads recently regarding
   > Version-Controlled-Collections I am still not clear how to find
   > the specific version of a resource which is referenced by a
   > version of a collection resource.

   I think the answer is you don't. A collection does not identify exact
   versions of resources that are referenced. If it did, then every time
   a member of the collection was versioned, the collection itself would
   have to be versioned. Versioning the collection would in turn cause
   its parent collection to be versioned, and so on up the tree. This is
   not really acceptable, so collection histories do not identify specific
   versions, only a version history.

Yes.

   This felt weird to me at first, but it made sense eventually. I like
   relating things back to CVS (because I use it a lot). In CVS, each
   file has its own version history with version numbering. Not all files
   in a directory have the same version numbers. So when you do a cvs update
   or cvs checkout, you are actually asking each file individually for
   'the latest version' or 'a version with this label'. You do not use
   CVS to say 'get me version 1.2 of every file in a directory' because
   the files have individual version numbering.

As Tim pointed out, you can ask for every version with a given label,
but I agree with your key point that CVS (like DeltaV) has each
version-controlled resource select its version, as opposed to having
the version be selected for it by some parent collection (i.e. you
can always select a specific version for any version-controlled resource,
just as you can in DeltaV).

   The same is true for collections. To do a VERSION-CONTROL in DeltaV,
   for every single resource you get a version-controlled resource for,
   its up to you to select the particular version you want.

Although with baselines and activities, you can select the version
for a whole batch of resources (e.g. a collection and all of its
members) in a single MERGE request.

   At least that is my current understanding. Please not however that
   I have not read up properly on activies and baselines yet, so the
   above may be different when using those concepts. But I beleive the
   above is correct with respect to the fundamentals of the DeltaV
   versioning.

Yes, this all looks right to me.  The main impact baselines and
activities would have on this discussion is the fact that they
can be used to select the version for multiple resources in a single
MERGE request.

Cheers,
Geoff



