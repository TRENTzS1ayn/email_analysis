docno="lists-006-11230902"
received="Fri Aug  3 13:50:29 2001"
isoreceived="20010803175029"
sent="Fri, 3 Aug 2001 10:50:18 -0700"
isosent="20010803175018"
name="John Hall"
email="johnhall@evergo.net"
subject="RE: How Clients find out if they can perform a checkout"
id="001901c11c44$c6c70490$0400a8c0@xythosjohnhall"
charset="us-ascii"
inreplyto="3906C56A7BD1F54593344C05BD1374B103CA91ED&#64;SUS-MA1IT01"
expires="-1"

To:"'Clemm, Geoff'"<gclemm@rational.com>,<ietf-dav-versioning@w3.org>


> From: ietf-dav-versioning-request@w3.org 
> [mailto:ietf-dav-versioning-request@w3.org] On Behalf Of Clemm, Geoff
> > I'm not sure that a client that does not want to deal with
> > merges can stop there, when it hits a server that allows 
> > forking and multiple checkouts.
> 
> The fact that some other version has a checkout has no effect 
> on whether or not your checkout will create a fork that might 
> require a merge.  That is determined solely from whether or 
> not the version you are checking out already has a descendent 
> or checkout.


I don't think that is true.
Say that the latest checked out version is #5.

User A checks out version #2 using working resource, intending to create
a new version and then UPDATE the VCR with the newly created version.

User B looks at version #5.  Version #5 has no current descendents, so
just looking at Version #5 User B is unaware that User A also has a
checkout that could cause a merge / update problem.  To prevent this in
an independent way, the client would have to check all previous versions
to make sure they were not checked out.

I can easily think of clients that would not want to check out version
#5 if ANY other version were checked out.



