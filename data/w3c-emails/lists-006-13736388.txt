docno="lists-006-13736388"
received="Fri Sep 28 14:10:42 2001"
isoreceived="20010928181042"
sent="Fri, 28 Sep 2001 14:10:07 -0400"
isosent="20010928181007"
name="Clemm, Geoff"
email="gclemm@rational.com"
subject="RE: Why does MERGE automatically checkin resources related to act ivities?"
id="3906C56A7BD1F54593344C05BD1374B103F8AC1D@SUS-MA1IT01"
charset="iso-8859-1"
inreplyto="Why does MERGE automatically checkin resources related to act ivities?"
expires="-1"


To:ietf-dav-versioning@w3.org

   From: Peter Raymond [mailto:Peter.Raymond@merant.com]

   I was reading section 13 with a group of other staff in MERANT and
   we came across section 13.12 which talks about automatically
   checking-in any checked-out resources referenced by an activity
   which is specified as part of the DAV:source set for the MERGE.

   Why does MERGE behave like this for activities and not for other
   resources (see the precondition
   DAV:cannot-merge-checked-out-resource in section 11.2.

   This auto-checkin behaviour seems to add more complexity to the
   implementation of MERGE and seems to be inconsistent.  What was the
   use case for including this auto-checkin behaviour only for
   activities?

This was added to allow for an "atomic" activity checkin/merge request
(something needed by the Subversion system), which only supports
DAV:no-checkout merge requests.  With the new DAV:auto-update
functionality, an alternative way of supporting this functionality
would be to allow CHECKIN to be applied to an activity (and having it
mean "checkin everything in that activity").  The DAV:auto-update
functionality would do the MERGE.

Greg: This just means you would replace your activity MERGE request
with an activity CHECKIN request.  This would also significantly improve
interoperability, since more systems are likely to support
activity CHECKIN than are likely to support the MERGE feature.

I believe this would be a significant improvement in consistency, and
only requires moving a postcondition from the MERGE method to the
CHECKIN method.  In addition, these two methods happen to be on the
same page of the text draft, so I could make this change without the
dreaded repagination.

If there are no objections, I can make this change.  If there
are *any* objections, I will not make the change, since we are
so late in the draft process.

Cheers,
Geoff



