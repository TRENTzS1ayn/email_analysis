docno="lists-006-1919454"
received="Wed Jun 13 17:35:32 2001"
isoreceived="20010613213532"
sent="Wed, 13 Jun 2001 14:33:55 -0700"
isosent="20010613213355"
name="Lisa Dusseault"
email="lisa@xythos.com"
subject="RE: Confusion: Removing a resource from version control"
id="HPELJFCBPHIPBEJDHKGKEELFCGAA.lisa@xythos.com"
charset="iso-8859-1"
inreplyto="3906C56A7BD1F54593344C05BD1374B1018E2472&#64;SUS-MA1IT01"
expires="-1"

To:"Clemm, Geoff"<gclemm@rational.com>,<ietf-dav-versioning@w3.org>


> A versioning aware client needs to do what the
> versioning aware user wants (not just some random behavior selected by
> a versioning server implementer).  So that means if the versioning
> aware user wants the versions to be deleted, the versioning aware
> client needs to somehow delete those versions.  Similarly, if the
> versioning aware user wants the versions to be kept, the versioning
> aware client needs to somehow save those versions.

It seems to me that this is an inconsistent position with respect to other
implementor-dependent behaviour already allowed by DeltaV.

You might also say "A versioning aware client needs to do what the
versioning aware user wants (not just some random behaviour selected by a
versioning server implementer).  So that means if the versioning aware user
wants the resource to be created as a regular resource, the versioning aware
client needs to somehow be able to create the resource as a regular
resource.  Similarly, if the versioning aware user wants the resource to be
created as a version-controlled resource, the versioning aware client needs
to somehow be able to achieve that."

Yet, the deltaV specification allows implementations to create resources
that are versioned in response to a PUT to a non-existent, or to create
resources that are not versioned.  That's "some random behavior selected by
a versioning server implementer."

I could probably come up with some more examples!

lisa



