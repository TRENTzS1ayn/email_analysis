docno="lists-006-3452707"
received="Thu Jun 21 16:57:48 2001"
isoreceived="20010621205748"
sent="Thu, 21 Jun 2001 13:57:47 -0700"
isosent="20010621205747"
name="John Hall"
email="johnhall@evergo.net"
subject="RE: Working Resource Issues ..."
id="002901c0fa94$d3cf83f0$0400a8c0@xythosjohnhall"
charset="us-ascii"
inreplyto="200106211947.PAA16378&#64;tux.w3.org"
expires="-1"

To:<Edgar@EdgarSchwarz.de>,<ietf-dav-versioning@w3.org>


> From: ietf-dav-versioning-request@w3.org 
> [mailto:ietf-dav-versioning-request@w3.org] On Behalf Of 
> Edgar@EdgarSchwarz.de
> johnhall@evergo.net wrote:
> > I've also mentioned that I'm concerned with 3rd party 
> emulation.  The 
> > 3rd party has a 'working version', and that is exactly how they 
> > implemented the concept.

> Yes, I know tools which have a 'working version'. But this 
> means that a version has a state 'working' (modifiable) and 
> finally 'frozen'. More complexity that I would like to avoid. 
> You can get the same result by having a working resource and 
> a following UPDATE. I prefer the simpler concept in this case.

I'm *asking* for the simpler case.

The current state of things is far more complex than what I have asked
for.  It is far more complex than some existing clients have asked for.
All I've really asked for is a CHECKOUT that means checkout, a working
resource that isn't visible to the world, and a CHECKIN that means
checkin.

There is no need to introduce the additional complexity and operations
of WORKSPACE, UPDATE, and MERGE, or to change the commonly understood
implications of the words 'checkin' and 'checkout'.  

The path of execution a client goes through under my proposal is almost
completely identical to the check-out-in-place and let the world see
your stuff thread.  The workspace system isn't.

In common terminology we have an excellent word for 'frozen'.  CHECKIN.


> 
> > 4.1.3  DAV:checkout-invisible
> > Normally, edits made on a resource while checked out are visible to 
> > other users.  If checkout-invisible is specified, however, 
> other users 
> > will only see the last checked-in version.  A client is 
> encouraged to 
> > see this feature as "lite" version of WORKING-RESOURCE which leaves 
> > the VCR in the checked-out state.

> You say you don't need UPDATE so here I say 
> that I don't need this invisible thing.

Since I don't begrudge you your WORKSPACE, you shouldn't begrudge me
this 'invisible thing'. 

The problem is that you want to compel me to either not deliver my
functionality to my users, or to implment workspaces and bring in a load
of other things / issues / complexity / problems.

If you HAVE implemented a workspace feature, then you have already
implemented 99% of this 'invisible thing'.  The reverse is far from
true.


> But this makes things difficult for the DAUs 

Don't worry about them, they'll be using my clients and not bothering
with WORKSPACE at all.

> So if you delete 
> your working resource the versions history also can go down 
> the closet. 

My working resources do not have their own independent version history,
and I'm not sure you can really take that from the spec on WORKSPACE
either.

> We have thousands of source files which we have to 
> freeze in baselines. 

Then don't use my server, I don't support baselines.  And I've been
involved in some very large systems projects with thousands of source
files and millions of lines of code.  We got by without baselines and
code forking.  But my server isn't targeted to source code control, the
idea of versioning has wider application than that.

> Hey, the changes I 
> made today are wrong. Let's go back to and earlier version 
> (Perhaps not the last one). That's what UPDATE is for.

1) that is what "DELETE version" is for.
2) or CHECKOUT, GET old.version, FILE SAVEAS, CHECKIN if you'd prefer. 

> So at last my question: Couldn't agreee to implement UPDATE ? 

NO.

> Not 
> that complex and uncommon I guess (co -r <filename>) Perhaps 
> we then could stop some threads which threaten to make the 
> spec more complex.

It has already been made complex.  I'm trying to add something to make
the complexity optional and ignorable.



