docno="lists-006-3910801"
received="Fri Jun 22 18:15:13 2001"
isoreceived="20010622221513"
sent="Fri, 22 Jun 2001 18:12:53 -0400"
isosent="20010622221253"
name="Clemm, Geoff"
email="gclemm@rational.com"
subject="Resolving outstanding issues in DeltaV"
id="3906C56A7BD1F54593344C05BD1374B1018E24D3@SUS-MA1IT01"
charset="iso-8859-1"
expires="-1"


To:ietf-dav-versioning@w3.org

My current approach, unless guided otherwise by our working
group chair, is to only make changes to the protocol if there
is consensus that the change should be made.  Currently,
I do not see consensus on either the resourcetype issue, or
the working resource checkin issue (note: this means that
the current DAV:resourcetype values in the protocol stay in).

Since I believe that neither of these issues represent a critical flaw in
the protocol (but rather represent possibly useful extensions
that we could add in later), I propose that we table the issues
for now.

Would anyone like to take these topics to our Friday noon
conference call?  It is possible that we could make more
progress with that higher bandwidth medium.  In any case,
we will discuss them at the DeltaV working group meeting
in London.

Cheers,
Geoff

-----Original Message-----
From: Eric Sedlar [mailto:Eric.Sedlar@oracle.com]
Sent: Friday, June 22, 2001 11:07 AM
To: ietf-dav-versioning@w3.org
Subject: RE: Dav:resourcetype


I don't think we are getting close to a consensus on this issue.  I'm
personally in favor of using dav:resourcetype for type information 
(after Yaron used his Jedi mind tricks on me), but I don't care enough
to argue about it anymore.

Is there a defined IETF procedure for flipping a coin to decide on what
to do with a spec, or some other source of randomness?  How about if 
everybody agrees that if the Dow is an even number on Monday (at the
close, truncating fractional part) we will put type information in 
dav:resourcetype, and if it is an odd number,
we will use supported-*-resource-set (and go back to <dav:is-principal>
in the ACL spec)?

Deal?  Geoff?

(P.S.  I have a suggested topic as an alternative for those who want to 
argue about this more:  Is operator overloading in C++ a good idea or
not?  Discuss.)

--Eric



