docno="lists-006-4100997"
received="Tue Jun 26 13:22:03 2001"
isoreceived="20010626172203"
sent="Tue, 26 Jun 2001 13:28:25 -0400"
isosent="20010626172825"
name="Clemm, Geoff"
email="gclemm@rational.com"
subject="RE: Versioning collections question"
id="3906C56A7BD1F54593344C05BD1374B1018E24E8@SUS-MA1IT01"
inreplyto="Versioning collections question"
expires="-1"


To: DeltaV<ietf-dav-versioning@w3.org>

A couple of small clarification/corrections:

   From: Tim Ellison [mailto:Tim_Ellison@uk.ibm.com]

   By checking out a collection you make the collection resource (including
   its internal members == "bindings") mutable.  This means to rename /a/b
to
   /a/c then the collection /a/ must be mutable, but /a/b and /a/c can be
   immutable versions.

Tim was using "version" in an informal way here.  /a/b and /a/c are
checked-in (and therefore immutable) version-controlled resources, but
they aren't versions in the formal DeltaV sense of the word.

   So if you PROPFIND depth 1 on a version of a collection you will discover
   the internal members are bound to version history resources.

Actually, a collection version is not itself a collection
(it's state is defined by its DAV:version-controlled-binding-set).
We did at one time have the internal members of a collection version
bindings to version-history resources, but that information was
moved to the DAV:version-controlled-binding set property.
So you'd just ask for a PROPFIND;Depth=0 for the
DAV:version-controlled-binding-set.

   Indeed, if
   you check out a version of a collection you will get a working collection
   whose internal members are bindings to version history resources.

That is correct.

Cheers,
Geoff



