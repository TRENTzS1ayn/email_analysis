docno="lists-006-4529683"
received="Tue Jan 16 11:50:03 2001"
isoreceived="20010116165003"
sent="Tue, 16 Jan 2001 16:49:43 +0000"
isosent="20010116164943"
name="Tim_Ellison@uk.ibm.com"
email="Tim_Ellison@uk.ibm.com"
subject="Re: Re (4): collection version resources"
id="802569D6.005C65F7.00@d06mta07.portsmouth.uk.ibm.com"
charset="us-ascii"
inreplyto="Re (4): collection version resources"
expires="-1"

To:ietf-dav-versioning@w3.org




<snip>
>
> So we've got two extremes:
>
> - Everything is optional (i.e. a server can pick any combination of
> properties and methods that it wants to support).  On this extreme, we
> make life maximally easy for servers ... just implement exactly what
> you want for a particular client you have in mind.  But the result is
> either very complex interoperable clients (trying to fake up
> non-provided server functionality) or decreased interoperability (just
> fail against any server that doesn't provide everything you need).
>
> - Everything is required.  On this extreme, we make life maximally easy
> for clients (whatever you want, every server has it).  Unfortunately,
> you have very few (if any :-) servers, since few servers want to support
> everything.
>
> Clearly we don't want either extreme, so instead, we look for
> combinations that logically go together ... i.e. if you implement
> one, it would be easy/natural to implement the the others.
>
> I think our current set of options are a good compromise between
> these extremes, but I just wanted to see if there were any minor
> adjustments that would be worth making before we go to last call.

...and if I had to choose between the two evils, I'd rather be closer to
'everything is optional' because failing against servers that don't provide
what you need is natural selection; whereas clients typically cannot cope
with missing-bits of claimed support ("as described on page three of the
readme file")  [and I may have a closer affinity with server developers
<g>]

<snipped out other embarrassing-to-me stuff>

Tim



