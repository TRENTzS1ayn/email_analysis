docno="lists-006-8507668"
received="Mon Feb 12 17:10:57 2001"
isoreceived="20010212221057"
sent="Mon, 12 Feb 2001 17:09:26 -0500 (EST)"
isosent="20010212220926"
name="Geoffrey M. Clemm"
email="geoffrey.clemm@rational.com"
subject="Re: Option abuse"
id="200102122209.RAA04013@tantalum.atria.com"
inreplyto="20010210020209.G26044&#64;lyra.org"
expires="-1"


To:ietf-dav-versioning@w3.org


The argument for using PROPFIND to get the information that varies
from resource to resource (as opposed to information that varies
from server to server) is that it allows you to get a consistent
set of information in one Depth PROPFIND request, whereas if you had to
do both PROPFIND and OPTIONS requests, you'd have to first lock
that collection to make sure that things didn't get moved around
between your PROPFIND and your OPTIONS requests, and it is always
unfortunate to have to lock something just for consistent read access.

So other than it being ridiculous and bogus (:-), what harm is there
in making DAV:supported-method-set, DAV:supported-live-property-set,
and DAV:supported-report-set live properties?

Cheers,
Geoff


   From: Greg Stein <gstein@lyra.org>

   IMO, it is still quite ridiculous to do some discovery through OPTIONS, and
   other discovery through PROPFIND. OPTIONS is defined to be per-resource (if
   you want general server options, the use "*" for the Request-URI).
   Arbitrarily classifying a subset of information as "more useful in a Depth:
   context, so we'll put it into PROPFIND" is just that: arbitrary. In layman's
   terms, that is a synonym for "bogus". :-)

   Cheers,
   -g



