docno="lists-007-0623435"
received="Mon Apr 22 12:30:03 2002"
isoreceived="20020422163003"
sent="Mon, 22 Apr 2002 12:29:29 -0400"
isosent="20020422162929"
name="Clemm, Geoff"
email="gclemm@rational.com"
subject="RE: Label header vs PROPFIND depth 1"
id="3906C56A7BD1F54593344C05BD1374B10697974E@SUS-MA1IT01"
inreplyto="Label header vs PROPFIND depth 1"
expires="-1"


To: Deltav WG<ietf-dav-versioning@w3.org>

   From: Tim Ellison [mailto:Tim_Ellison@uk.ibm.com]

   "Julian Reschke" <julian.reschke@greenbytes.de> wrote:

   > So this is different from for instance handling of the
"accept-language"
   > header. Can you give a reason why this would be desirable?

   So, I think the reason it is the way it is, is so that the results of the
   depth operation conform to the definition of multistatus, i.e. that the
   results are related by collection membership.

   "the multistatus XML element for a collection resource with member URIs
   MUST include a response XML element for each member URI of the
collection,
   to whatever depth was requested"

   If the label: applied to each member of the version-controlled
collection,
   then the results would be a set of versions that were not related by
   membership.

The difference between my interpretation and Tim's interpretation is
that I am assuming that only the method is affected by the Label,
while Tim is assuming that the Label affects both the method
and the recursion itself.

In other words, by my interpretation, the recursion is:

 method ( resource, label, depth )
 {
    method (resource, label, 0);
    if (depth != 0) {
       foreach_internalmember(member, resource) {
  method ( resource, label, depth-1 ) } } }

while by Tim's interpretation, the recursion would be:

 method ( resource, label, depth )
 {
    method (resource, label, 0);
    if (depth != 0) {
       foreach_internalmember(member, resource, label) {
  method ( resource, label, depth-1 ) } } }

I believe my interpretation is more straightforward,
and produces more predictable results.

Cheers,
Geoff



