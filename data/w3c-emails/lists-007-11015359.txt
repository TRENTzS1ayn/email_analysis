docno="lists-007-11015359"
received="Wed Mar 10 16:10:39 1999"
isoreceived="19990310211039"
sent="Wed, 10 Mar 1999 15:58:56 -0500"
isosent="19990310205856"
name="Keith Moore"
email="moore@cs.utk.edu"
subject="Re: need a reviewer (or three) for draft-cai-ssdp-v1-00.txt"
id="199903102058.MAA06845@astro.cs.utk.edu"
inreplyto="3FF8121C9B6DD111812100805F31FC0D08792FF6&#64;RED-MSG-59"
expires="-1"


To: Yaron Goland<yarong@microsoft.com>
cc:"'Keith Moore'"<moore@cs.utk.edu>,web@apps.ietf.org,discuss@apps.ietf.org

> Actually, I was very unhappy with SIP for reasons I doubt you would agree
> with. =) I thought SIP should have just run on top of HTTP/1.1. In fact, I
> wrote up an entire series of posts explaining exactly how to do this.
> 
> The point I was making, however, is that adding (unicast | multicast) UDP
> support to HTTP is a very natural progression as demonstrated by SIP.

I would say that SIP provides a good example of why this should not be done.
 
I do agree with you, however, that HTTP provides most of the features
needed by most client-server applications.  If the application only
needs to do RPC like things (even with moderately large payloads), 
doesn't need efficiency (most don't), and isn't likely to be heavily 
used or used over wireless links, or multicast, then HTTP is probably 
fine.  However wireless is likely to become a lot more important very 
soon and that to me is enough by itself to make HTTP a very dubious
contender as a base for future applications.  (similarly for SMTP and IMAP)

> P.S. As for HTTP's complexity. HTTP itself is an unbelievably simple
> protocol. The problem is that it has inherited a lot of cruft over the
> years, 99.99% of which is optional and not widely supported. I believe that
> what the world really needs is a re-written version of the HTTP spec. One
> organized into a more rational structure which shows the true beauty of
> HTTP's layered architecture. I would be willing to bet that one could write
> a spec providing the absolute bare minimum information needed to create a
> compliant client/proxy/server in 20 pages.

That seems like a stretch - in particular the interaction of cacheing
proxies is just too complex.  But I'd love to see somebody try.

Keith



