docno="lists-007-1219947"
received="Wed Jun  5 05:12:01 2002"
isoreceived="20020605091201"
sent="Wed, 5 Jun 2002 10:11:40 +0100"
isosent="20020605091140"
name="Tim Ellison"
email="Tim_Ellison@uk.ibm.com"
subject="Re: question about Version-Control"
id="OF30DF3E71.1C8A1447-ON80256BCF.003207E7@portsmouth.uk.ibm.com"
charset="us-ascii"
inreplyto="question about Version-Control"
expires="-1"

To:"IETF DAV"<ietf-dav-versioning@w3.org>




"Elodie Tasia" <e.tasia@ever-team.com> wrote:

> There's someyhing about I've have questions : when a user calls
> the VERSION-CONTROL method on a versionable resource, it performs
> 3 operations :
>     - creation of a new version history,
>     - conversion of the versionable resource in version controlled
> resource,
>     - creation of a new version by copy of the versionable resource
> (content and properties).
>
> My question is : why doing a copy of the version controlled resource
>  ? why duplicating it ?
> It is not enough, just keeping it, and creating the first version
> after checking it out, modifying it, and checking it in ?
>
> Thanx in advance for answering at this (simple) question !

A version is created as a copy because the version-controlled resource can
be checked out and modified.  The version remains as an immutable copy of
the inital state of the VERSION-CONTROL'led resource.

Clearly, _implementations_ don't have to do a copy and can fake out the two
resources (version and checked-in version-controlled resource) using the
same underlying storage.

Regards,
Tim



