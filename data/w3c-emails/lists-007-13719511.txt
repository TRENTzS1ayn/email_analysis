docno="lists-007-13719511"
received="Tue Apr 24 14:58:46 2001"
isoreceived="20010424185846"
sent="Tue, 24 Apr 2001 20:29:50 +0200"
isosent="20010424182950"
name="Jacob Palme"
email="jpalme@dsv.su.se"
subject="Re: Two new drafts: Multipart/Interleaved and  Application /BatchBeep"
id="p05010407b70b755d01a3@[130.237.150.141]"
charset="us-ascii"
inreplyto="200104241357.JAA03519&#64;astro.cs.utk.edu"
expires="-1"


To: Keith Moore<moore@cs.utk.edu>
Cc: Keith Moore<moore@cs.utk.edu>,discuss@apps.ietf.org

At 09.57 -0400 01-04-24, Keith Moore wrote:
>there's more than one kind of typing.  in your ASN.1 examples, you don't
>appear to include the "name" of each datum, whereas in your ABNF and XML
>examples, you do.

The main principle of efficient coding of protocols is to only send 
the information which varies over time. Information which is static, 
like
the names of the fields, is either suppressed or compacted very strongly.
It is this compacting of this information which is a main reason why
the ASN.1 encoding got so compact. The disadvantage with this, of
course, is that the encoded date is much more difficult to read
for a human not using a special program.

Did you also look at my comparison between RFC822 and XML

RFC822 example:
     From: Father Christmas <fchristmas@northpole.arctic>

XML encoding of the same information:

     <from>
       <user-friendly-name>Father Christmas</user-friendly-name>
       <e-mail-address>
         <localpart>fchristmas</localpart>
         <domainpart>
           <domainelement>northpole</domainelement>
           <domainelement>arctic</domainelement>
       </domainpart>
     </from>

The XML encoding uses five times as many characters. It does
have, however, the advantage that you need not have special
rules for each new punctuation character which occurs as in the
RFC822 variant.
-- 
Jacob Palme <jpalme@dsv.su.se> (Stockholm University and KTH)
for more info see URL: http://www.dsv.su.se/jpalme/



