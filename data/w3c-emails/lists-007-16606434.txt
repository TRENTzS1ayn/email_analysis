docno="lists-007-16606434"
received="Fri Nov  9 15:06:25 2001"
isoreceived="20011109200625"
sent="Fri, 09 Nov 2001 12:02:04 -0800 (PST)"
isosent="20011109200204"
name="ned.freed@mrochek.com"
email="ned.freed@mrochek.com"
subject="Re: canonical MIME headers"
id="01KAHZSNF7S60013KR@mauve.mrochek.com"
charset="us-ascii"
inreplyto="Fri, 09 Nov 2001 14:20:26 -0500&quot; &lt;200111091920"
expires="-1"

To: Keith Moore<moore@cs.utk.edu>
Cc: Steve Hole<steve.hole@messagingdirect.com>,"Donald E. Eastlake 3rd"<dee3@torque.pothole.com>,ned.freed@mrochek.com, Keith Moore<moore@cs.utk.edu>, James M Galvin<galvin@elistx.com>,discuss@apps.ietf.org


> > > Seems like it would also be fairly easy to abstract out multipart
> > > separators so as to be immune from them being re-written.
> >
> > I'm missing something ... why do we want to do this?

> some translators change multipart boundary markers.

> while Ned is correct that there's no need to do this when downgrading
> from 8bit/binary/q-p to base64 because multipart boundaries inherently
> cannot be confused with base64,

or with q-p.

> there are re-encoders that can "upgrade"
> as well as "downgrade", and which use the same code path to convert from
> one encoding to another regardless of whether the destination is base64.
> for those re-encoders it's easier to always rewrite boundary markers.

Such reencoders aren't going to exercise the care needed to get the right
of this right, so the installed base of reencoders aren't relevant to
the task at hand. As for the prospect of a new reencoder that does handle
this correctly, I guess that could be useful, but IMO its usefulness doesn't
measure up to the implementation complexity needed.

Ned



