docno="lists-007-1877045"
received="Thu Jan 10 10:40:04 2002"
isoreceived="20020110154004"
sent="Thu, 10 Jan 2002 16:01:25 +0100"
isosent="20020110150125"
name="Stefan Eissing"
email="stefan.eissing@greenbytes.de"
subject="RE: LOCK/UNLOCK or CHECKIN/CHECKOUT"
id="NDBBKJABLJNMLJELONBKCEOLDCAA.stefan.eissing@greenbytes.de"
charset="us-ascii"
inreplyto="OF8D5C40A7.2B487EA8-ON80256B3D.004F377B&#64;portsmouth.uk.ibm.com"
expires="-1"

To:<ietf-dav-versioning@w3.org>


To avoid ambiguities: if you modify a locked, version-controlled
resource, you will create a new version (if the server supports
auto versioning that is).

> -----Original Message-----
> From: ietf-dav-versioning-request@w3.org
> [mailto:ietf-dav-versioning-request@w3.org]On Behalf Of Tim Ellison
> Sent: Thursday, January 10, 2002 3:34 PM
> To: ietf-dav-versioning@w3.org
> Subject: Re: LOCK/UNLOCK or CHECKIN/CHECKOUT
>
>
> Elodie,
>
> > I'd like to know whether I well understood : the  mechanism of
> checkout-put-checkin
> > cretes a new version of a resource,
>
> correct -- indeed the version is a resource, so checking-in creates a new
> version resource.
>
> > while the  lock-unlock mechanism allows to modify a resource without
> creating a new
> > version, is that right ?
>
> this is also correct.  Locking a resource just causes a state change in
> the locked resource; it does not create any other resources.
>
> > Can someone explain me the exact difference between  this two
> mechanisms
> ?
>
> Locking is typically used in a multi-user environment.  Obtaining a lock
> permits you to modify a resource and prevents others from modifying the
> resource.  This allows you to ensure others' contents are not
> overwritten,
> and you can set consistent content and dead properties for example.
> Checking out and in are used to capture a meaningful state of a resource
> as a version.  It is meaningful to do this in single or multi-user
> environments.  The captured states can be 'viewed' or restored at some
> later time.
>
> Locking and versioning are separate concepts.
>
> Regards,
> Tim
>
>
>



