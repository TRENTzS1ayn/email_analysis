docno="lists-007-9211380"
received="Tue Feb  9 15:50:15 1999"
isoreceived="19990209205015"
sent="Tue, 9 Feb 1999 12:47:44 PST"
isosent="19990209204744"
name="spreitze@parc.xerox.com"
email="spreitze@parc.xerox.com"
subject="Re: APPLCORE: An architectural question"
id="99Feb9.124757pst."105927"@augustus.parc.xerox.com"
inreplyto="36C09563.CCD1F04C&#64;thinlink.com"
expires="-1"

To: Tom Harding<tomh@thinlink.com>
Cc:spreitze@parc.xerox.com,discuss@apps.ietf.org



> > That's not an alternative.  The mere availability of a message muxing protocol doesn't relieve the higher layer of the responsibility of deciding how to use it.  This is a matter of the software in the peers, not the wire protocol (although the design of each naturally influences the design of the other).

> I heartily agree that if webmux or another message multiplexing protocol is available, an application layer protocol like XP doesn't need any request/response tagging mechanism.  You just use multiple connections for everything instead of only when you explicitly want concurrency below the level of whole responses.

Actually, that's just one way of deciding how to use the mux's services; I can imagine others.  For example, you might still want to: distinguish requests from responses, so that each side can be a client of the other; put request/response IDs in the messages (at the request/response layer), so you can admit the possibility of more or less than 1 response per request; and/or have additional message types, such as "interrupt" and "clean shutdown".  And there's a whole other raft of issues involved in chosing what goes above and below the mux layer.  If you starting thinking about interactions with security and other services, you quickly start thinking about multiple substacks and how to create them, choose among them, etc.



