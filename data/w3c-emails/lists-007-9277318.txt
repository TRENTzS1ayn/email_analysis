docno="lists-007-9277318"
received="Wed Feb 10 06:13:51 1999"
isoreceived="19990210111351"
sent="Wed, 10 Feb 1999 11:10:59 +0000"
isosent="19990210111059"
name="Brian E Carpenter"
email="brian@hursley.ibm.com"
subject="Re: APPLCORE: An architectural question"
id="36C16943.B2C8D524@hursley.ibm.com"
charset="us-ascii"
inreplyto="3.0.32.19990209104614.0069efc0&#64;pop.dial.pipex.com"
expires="-1"


To: Graham Klyne<GK@dial.pipex.com>
CC:discuss@apps.ietf.org,ietf-applcore@imc.org

Graham Klyne wrote:
...
> (A) The approach taken by IMAP/AP is to build the concurrency into the
> basic request/response protocol, including identifying tags as part of the
> data stream.

Those who actually listened to the IETF plenary talk on transaction
processing at the Chicago IETF will realise that this is a very
non-trivial mechanism to get right. (BTW, XP doesn't even come
close to dealing with the requirements of a transactional
application.) However, it is a valid approach to build a generic
transactional layer, but then we are talking XA, Java RMI, or CORBA
IIOP, which takes us into another league and it is not obvious
that the IETF has anything to bring to the table.

> 
> (B) The aproach taken by HTTP-NG is to have a separate multiplexing layer
> that allows a number of virtual duplex stream communications to be
> conducted on a single underlying connection.  Thus, each concurrent
> request/response is conducted in a separate data stream.

That's where RUTS comes in: don't do an HTTP-specific solution,
and build on the T/TCP experience. As others have said, this
approach separates the problems and provides a better chance
of satisfying transactional requirements in a simple manner.

  Brian Carpenter



