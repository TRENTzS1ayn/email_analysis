docno="lists-007-9667967"
received="Wed Feb 17 13:53:03 1999"
isoreceived="19990217185303"
sent="Wed, 17 Feb 1999 10:50:48 -0800"
isosent="19990217185048"
name="Josh Cohen"
email="joshco@microsoft.com"
subject="RE: Use of TELNET for testing protocols"
id="8B57882C41A0D1118F7100805F9F68B50631A9F1@RED-MSG-45"
inreplyto="Use of TELNET for testing protocols"
expires="-1"


To:"'michaelm@netsol.com'"<michaelm@netsol.com>,jg@pa.dec.com
Cc:jpalme@dsv.su.se,discuss@apps.ietf.org

agree.
 I think we are not typical of the folks who debug.  I suspect that, by far,
the
most common debugging case (in volume) is sysadmin and network people
using sniffers or telnet.
Text based protocols are helpful to telnet and to someone reading a simple
network trace.
While sniffers have protocol modules to decipher non-text protocols for easy
reading, not everyone has access to a sniffer or sniffer program with the
latest
protocol modules.

One thing that I think text based does for a protocol is to greatly increase
its chances of quick adoption.  Maybe people hacked together working
implementations
of web servers (for better or worse) by simply examining another working web
server
with telnet having never looked at the spec.

As an admin in the past, it was easy for me to hack up a perl script to 
do http for quick fixes and administrative announcements, which helped
me learn alot.   When it came to SNMP (which I was also responsible for)
I had such a hard time figuring out what was going on because the books
were too theoretical for my practical mind, the tools were limited,
and I couldnt easily hack my own in perl.


> -----Original Message-----
> From: Michael Mealling [mailto:michael@bailey.dscga.com]
> Sent: Wednesday, February 17, 1999 7:44 AM
> To: jg@pa.dec.com
> Cc: Josh Cohen; jpalme@dsv.su.se; discuss@apps.ietf.org
> Subject: Re: Use of TELNET for testing protocols
> 
> 
> Jim Gettys said this:
> > I've dealt with both binary (straight-forward marshalling 
> onto the wire,
> > nothing baroque like PER) and text protocols, and have not
> > found a particular advantage to either in terms of debugging. To me,
> > use of telnet is hardly a compelling argument one way or the other.
> > 
> > Putting a breakpoint on the stubs on either end in a debugger,
> > and dumping the data structures, has often been easier than having
> > to scratch my head about syntax being correct (and the generation
> > and parsing thereof) in a text based protocol.  Not having the same
> > class of parsing bugs in binary implementations helps 
> muchly on their
> > side of the equasion.
> 
> Just a minor nit, your observation is probably correct when you are
> actually writing an implementation of the protocol from 
> scratch. I think
> when most of us speak about 'debugging' a server by simply telnetting
> to the port is after its been built and we are debugging particular
> applications that are using that protocol. Or also in the case where
> we do not have debugging access to the server or client (proprietary 
> binaries).
> 
> Also, from a past sysadmin's point of view, you're never gauranteed to
> have the libraries needed to parse a binary protocol on any 
> given client.
> Telnet is everywhere....
> 
> -MM
> 
> Sorry, hard to resist when your particular religion gets 
> tweaked... ;-)
> 
> -- 
> --------------------------------------------------------------
> ------------------
> Michael Mealling|      Vote Libertarian!       | 
www.rwhois.net/michael
Sr. Research Engineer   |   www.ga.lp.org/gwinnett     | ICQ#:
14198821
Network Solutions|          www.lp.org          |
michaelm@netsol.com



