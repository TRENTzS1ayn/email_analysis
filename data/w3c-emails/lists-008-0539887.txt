docno="lists-008-0539887"
received="Wed Nov 28 10:50:47 2001"
isoreceived="20011128155047"
sent="Wed, 28 Nov 2001 07:50:00 0800 (PST)"
isosent="20011128155000"
name="Jim Gettys"
email="jg@pa.dec.com"
subject="Re: Requirements for reliable message delivery"
id="200111281550.fASFo0P428857@pachyderm.pa.dec.com"
inreplyto="3C04B537.8652287E&#64;hursley.ibm.com"
expires="1"


To: Brian E Carpenter<brian@hursley.ibm.com>
Cc: Jim Gettys<jg@pa.dec.com>, Claudio Allocchio<Claudio.Allocchio@garr.it>, Keith Moore<moore@cs.utk.edu>, Mark Baker<distobj@acm.org>, John Ibbotson<john_ibbotson@uk.ibm.com>, Discuss Apps<discuss@apps.ietf.org>, Richard P King<rpk@us.ibm.com>


> From: Brian E Carpenter <brian@hursley.ibm.com>

> -----
> Jim,
> 
> Exactly. We can all agree on this. So given that fact, and the fact that
> people do want to reliably transfer hypertext across unreliable,
> non-transparent and intermittently connected networks, what should we do?
> 

That's why we worked so hard on the caching model in HTTP/1.1.  Much/most/all
of what is needed is already present, if people would use it.  It was
hard to get right, but we think we did :-).  I suspect many/most people
don't know that those parts of the protocol exist.  Proxy servers and
good client caching are your friends.  This was by far the hardest
part of the HTTP/1.1 design, trying to retrofit this into this poorly
designed protocol framework.  We were able to get enough people to implement
this to meet IETF requirements and test it well enough we think it is correct,
but the "big vendors" have not bothered to implementit.

Beyond that, if the network is really flaky beyond what TCP will tolerate,
the likely answer is encapsulation via a proxy pair, using a more
tolerant to lossage transport.  This also handles the non-transparent
network case; if I can sneak the bytes through the net somehow,
we can make it work.

I'd like to get some folks working on a good proxy server pair for this
sort of use, as it is right up the work I'm involved in with handhelds right
now (see www.handhelds.org).  The network core side proxy needs to be able
to do content conversion (rescale images for smaller screens), and the client
side needs to work well in the face of disconnection/flakyness.  The
handhelds.org work is fully open source, so we have no problems working
on this openly with others.

Putting this into a client is possible, but that involves modifying each
client, which gets boring/difficult.

The environment is full Linux, if someone is interested in stepping
up to the plate, and wants a load of fun on a handheld (e.g. the Compaq
iPAQ).  At this point, we have the core environment pretty well under
control, so one could really dive in now.  We have running web browsers,
and the like, all going.

                          - Jim

--
Jim Gettys
Cambridge Research Laboratory
Compaq Computer Corporation
jg@pa.dec.com



