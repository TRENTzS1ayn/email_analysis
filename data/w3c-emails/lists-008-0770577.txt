docno="lists-008-0770577"
received="Thu Nov 29 15:37:57 2001"
isoreceived="20011129203757"
sent="Thu, 29 Nov 2001 12:36:54 0800"
isosent="20011129203654"
name="Mark Nottingham"
email="mnot@akamai.com"
subject="Re: Requirements for reliable message delivery"
id="20011129123651.B5761@akamai.com"
charset="usascii"
inreplyto="200111281550.fASFo0P428857&#64;pachyderm.pa.dec.com"
expires="1"

To: Jim Gettys<jg@pa.dec.com>
Cc: Discuss Apps<discuss@apps.ietf.org>



[ distribution trimmed ]

On Wed, Nov 28, 2001 at 07:50:00AM -0800, Jim Gettys wrote:
> 
> That's why we worked so hard on the caching model in HTTP/1.1. 
> Much/most/all of what is needed is already present, if people would
> use it.  It was hard to get right, but we think we did :-).  I
> suspect many/most people don't know that those parts of the
> protocol exist.  Proxy servers and good client caching are your
> friends.  This was by far the hardest part of the HTTP/1.1 design,
> trying to retrofit this into this poorly designed protocol
> framework.  We were able to get enough people to implement this to
> meet IETF requirements and test it well enough we think it is
> correct, but the "big vendors" have not bothered to implementit.

The problem with HTTP's caching model is that the "big vendors" want
to sell boxes to network operators who want to maximize their
savings. They don't have a strong motivation to honor response
caching directives, which represent the interests of content
providers. Browsers have poor support for request caching directives
or other forms of communication with intermediaries (like Warning).

Content providers don't have a strong motivation to properly specify
the caching directives because they don't know that they'll be
honored or supported.

Also, allowing an unspecified heuristic to be used to determine
freshness leaves the door wide open for this creativity, further
alienating content providers.

CDNs are a "solution" for this, if the content provider is willing to
pay for the priviledge. 


> Beyond that, if the network is really flaky beyond what TCP will
> tolerate, the likely answer is encapsulation via a proxy pair,
> using a more tolerant to lossage transport.  This also handles the
> non-transparent network case; if I can sneak the bytes through the
> net somehow, we can make it work.

There's a lot of interesting things that can be done between a proxy
pair, especially over long-haul links (like AU->US). Unfortunately,
there aren't too many people doing them, AFAIK. This might change as
delta gets more exposure, perhaps. CDNs are probably (once again) the
people taking most advantage of this, because of their distributed
footprint and built-in request routing capabilities. It would be nice
to see this happen in more hetrogenous environments, but the
trust/motivation barriers are pretty large...



-- 
Mark Nottingham, Research Scientist
Akamai Technologies (San Mateo, CA USA)



