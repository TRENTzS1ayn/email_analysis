docno="lists-008-0806979"
received="Fri Nov 30 01:27:30 2001"
isoreceived="20011130062730"
sent="Fri, 30 Nov 2001 01:27:08 0500"
isosent="20011130062708"
name="Keith Moore"
email="moore@cs.utk.edu"
subject="Re: Requirements for reliable message delivery"
id="200111300627.fAU6R8T29705@astro.cs.utk.edu"
inreplyto="200111300610.BAA03682&#64;markbaker.ca"
expires="1"


To: Mark Baker<distobj@acm.org>
cc:moore@cs.utk.edu(Keith Moore),discuss@apps.ietf.org

> But let me write it here quickly ... the application semantics are
> equivalent to containment based software component models, which are
> extremely generic and expressive.

I disagree that they are 'generic'.  They are indeed suitable for 
many kinds of applications, less suitable for others - for instance,
where performance is an issue, where minimizing delay is more important 
than ensuring reliable delivery or detecting failure, where broadcast 
or multicast can usefully be employed, where synchronization between 
large numbers of processes are needed, etc.

indeed, the primary virtue of software component systems seems to be
that they narrowly *restrict* the kinds of interactions that may be 
employed.  this is helpful if the interfaces are sufficient for your 
purposes, but they're not always sufficient.

Keith



