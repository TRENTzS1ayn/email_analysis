docno="lists-008-9626981"
received="Tue Nov 26 01:07:21 2002"
isoreceived="20021126060721"
sent="Mon, 25 Nov 2002 17:24:34 0800"
isosent="20021126012434"
name="Joshua Allen"
email="joshuaa@microsoft.com"
subject="RE: Hashed URIs"
id="4F4182C71C1FDD4BA0937A7EB7B8B4C1061BAADF@red-msg08.redmond.corp.microsoft.com"
charset="usascii"
inreplyto="Hashed URIs"
expires="1"


To:"Paul Hoffman / IMC"<phoffman@imc.org>,"Clive D.W. Feather"<clive@demon.net>,<discuss@apps.ietf.org>,<uri@w3.org>


> >I assume canonicalizing would *help* interop.  The point after all is
to
> >have two URIs that are the same evaluate to the same.
> 
> Re-read Appendix A and explain how this will help. Section 4.3 says
> "A possible canonicalization algorithm for hierarchical URIs is given

I will admit that I never read the proposal.  You seem to be arguing
that interop suffers when there is more than one canonical
representation.  I agree, and in fact would argue that canonical in this
case is not the right word.  Maybe the author meant to say "normalize".

> I'm still confused. Who needs to provide metadata without revealing
> their web browsing habits?

Are you saying that you, personally, do not see the utility of this?  Or
are you saying that such utility does not exist?

> >* publish a "1 to 5 rating" of a web page, so that anyone visiting
the
> >page can see all of the previous visitors' ratings
> 
> This is not useful unless you know what web page is being discussed.

I would hope that anyone visiting the page would know what page they are
visiting!  Upon arriving at a page, the user would calculate the page's
hashed URI, then use the hashed URI to retrieve metadata.  This makes it
easy to find the comments that people have made about a *particular*
page, while making it more difficult to enumerate pages that a
particular *user* has rated.


> >* publish metadata associated with yourself in such a way that
automated
> >spam tools cannot use the metadata to target you
> 
> You can publish metadata about yourself without using your email
address.

Yes.  And a hash is a good way to do this.



