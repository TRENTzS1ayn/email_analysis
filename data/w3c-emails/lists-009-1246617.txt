docno="lists-009-1246617"
received="Fri Dec 16 13:46:32 1994"
isoreceived="19941216184632"
sent="Fri, 16 Dec 94 16:44:25 0500"
isosent="19941216214425"
name="Simon E Spero"
email="ses@tipper.oit.unc.edu"
subject="Re: HTTP: T-T-TTalking about MIME Generation"
id="9412162144.AA16665@tipper.oit.unc.edu"
inreplyto="9412161508.AA12306&#64;hopf.math.nwu.edu"
expires="1"


To: John Franks<john@math.nwu.edu>
Cc: Dave Kristol<dmk@allegra.att.com>,http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com

>>>>> "John" == John Franks <john@math.nwu.edu> writes:


    John> Correct me if I am wrong, but I concluded from Spero's
    John> postings that nothing currently proposed including MGET,
    John> hold-open, or even HTTP-NG would improve (or even match?)
    John> the user's perceived performance currently given by
    John> Netscape.  By this I mean the ellapsed time until the user
    John> can start reading *all the text* and the ellapsed time until
    John> the user can jump to a new link.

The perceived performance of Netscape is merely a function of their
rendering order. Netscape renders GIFS as they come in. THis is completely
independent of the protocol. The new parser for Arena is based on a 
restartable model- it will render everything that it possibly can as it 
comes in - I haven't seen Dave's latest design, but I think it can even start
rendering GIFS before it's finished retrieving the text. 

The netscape approach of stealing other peoples bandwidth is
ultimately a negative sum game. If more and more people start using
this approach, not only will the netscape user not see any benefit,
but *EVERYBODY* will lose as more and more bandwidth becomes lost to
retransmission.

If I wanted to get better performance by stealing bandwidth, I'd just
write my own transport protocol.  Just run blast datagrams out as UDP
as fast as your interface can handle it, and ack every single
message. Hell, use a regenerative protocol and send everything
multiple times. You'll clear every TCP user off the routers in your
path and get the backbone for yourself. 

Simon



