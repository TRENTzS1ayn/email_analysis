docno="lists-009-13604224"
received="Sun Dec 10 16:22:29 1995"
isoreceived="19951210212229"
sent="Sun, 10 Dec 1995 16:11:28 0800"
isosent="19951211001128"
name="Roy T. Fielding"
email="fielding@avron.ICS.UCI.EDU"
subject="Re: logic bag syntax"
id="9512101611.aa19103@paris.ics.uci.edu"
inreplyto="9512102340.AA08931&#64;sulphur.osf.org"
expires="1"

To: Rich Salz<rsalz@osf.org>
Cc:http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com


>>BTW, the logic bag syntax was designed to be tokenized within a
>>binary HTTP.
> 
> Turning an expression into a tree or quads or some form of binary is
> pretty common knowledge, or readily available for the cost of the new
> Dragon book.  Nontheless, if "If:" survives I'd like to see the syntax
> look more like something already known, such as C, Lisp, etc.  The semi-
> TCL-syntax and the FortranIV operators make for a funky mix.

:)

Dan and I had a lengthy discussion on that topic when we hashed out the
syntax.  Use of parentheses "()" would seem better, but they are already
used as the notation for comments in RFC 822 and HTTP.  The operators
are token names because it reduces parsing problems and provides a
consistent hook name for object-oriented systems.  Overall, the syntax
is intended to be embeddable in many different contexts.

The reason an existing language was not used is that:

  1) security concerns forbid using an existing language interpreter anyway;
  2) I didn't want to start a language war;
  3) I wanted to restrict it to tree-based S-expressions.

TCL had no influence on this design -- Perl is a more likely candidate,
though the only real concern is that the syntax be self-contained and
self-describing (i.e., you don't need to know the operator in order to
correctly build the expression tree).


 ...Roy T. Fielding
    Department of Information & Computer Science    (fielding@ics.uci.edu)
    University of California, Irvine, CA 92717-3425    fax:+1(714)824-4056
    http://www.ics.uci.edu/~fielding/



