docno="lists-009-1723158"
received="Mon Dec 19 16:03:41 1994"
isoreceived="19941219210341"
sent="Mon, 19 Dec 94 19:00:56 0500"
isosent="19941220000056"
name="Simon E Spero"
email="ses@tipper.oit.unc.edu"
subject="Re: Connection Header"
id="9412200000.AA18257@tipper.oit.unc.edu"
charset="usascii"
inreplyto="9412191152.aa03549&#64;paris.ics.uci.edu"
expires="1"


To:"Roy T. Fielding"<fielding@blanche.ICS.UCI.EDU>
Cc:http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com

I've been looking at how much work it would take do add a simple session
based connection-reuse method to existing implementations of HTTP 1.0, 
and it seems pretty simple.

libwww can be upgraded by putting a connection cache in HTTP.c, replacing
the HTConnect with a look at the cache, and a possible session probe, and 
by by using function variables for the NETREAD and NETWRITE calls. MGET could
be emulated by adding a varargs version of the LoadDocument call. 

NCSA httpd could be upgraded by a making a few hacks to process request, and 
by running it a couple of times under purify or test-center to get rid of 
any memory leaks. 

SCP is a good a way as any to do the packetisation; SCP does allow the responses
to be interleaved; however taking advantage of this requires enough rewriting to
make this sort of functionality worth leaving to HTTP-ng 

I think there's definitely a place for a quick hack HTTP 1.1 designed to 
be as small a change as possible to HTTP 1.0- re-using connections is the
biggest network performance  win- interleaved rendering gets most of the rest-
after that most of the gains are in functionality like challenge based payment,
security, better meta-information, and better proxy support.

Simon 



