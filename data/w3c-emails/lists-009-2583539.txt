docno="lists-009-2583539"
received="Sun Jan  1 13:31:10 1995"
isoreceived="19950101183110"
sent="Sun, 1 Jan 95 14:28:04 0700"
isosent="19950101212804"
name="Paul Burchard"
email="burchard@horizon.math.utah.edu"
subject="Re: Formalizing Expires, LastModified, &quot;data object&quot;"
id="9501012128.AA06677@horizon.math.utah.edu"
inreplyto="Formalizing Expires, LastModified, &quot;data object&quot;"
expires="1"


To:"Daniel W. Connolly"<connolly@hal.com>
Cc:http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com

Daniel W. Connolly <connolly@hal.com> writes:
> I suggest that the protocol be defined by the observable
> behaviour of correct servers (and clients). For
> example, the critical property of the Last-Modified and
> Expires information for a URI is that the server
> stipulates that it will serve the same entity for that URI
> (given the same Accept: headers) at all times between the
> Last-Modified time and the Expires time.

This is also how I first interpreted Expires -- as a server guarantee  
that the URI produces constant data up to the stated time.  However,  
I've been convinced now that the spec's interpretation -- as a client  
directive to discard the information after the given time -- is more  
useful.

The practical considerations are shown most clearly for servers that  
want to serve ephemeral documents, custom-produced for each client's  
request (note that even if the document itself is POST output, its  
inline images will still be obtained by ordinary GET requests, and so  
Expires still applies).

The server does not want to have to keep the custom document around  
after the requesting client has fetched it; on the other hand, the  
server does want the client to enjoy the document for the full  
intended life of the information it contains.  If Expires is  
interpreted as a server guarantee there is no way to communicate the  
(more important) intended life of the document to the client.

--------------------------------------------------------------------
Paul Burchard<burchard@math.utah.edu>
``I'm still learning how to count backwards from infinity...''
--------------------------------------------------------------------



