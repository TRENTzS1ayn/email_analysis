docno="lists-010-11085026"
received="Mon Oct 21 08:15:33 1996"
isoreceived="19961021121533"
sent="Mon, 21 Oct 1996 11:06:59 0400"
isosent="19961021150659"
name="John C. Mallery"
email="jcma@ai.mit.edu"
subject="Re: Server response version number"
id="v03007801ae9139a7f547@[128.52.39.15]"
charset="usascii"
inreplyto="3.0b28.32.19961020181757.0091e1d0&#64;pop.w3.org"
expires="1"


To: Henrik Frystyk Nielsen<frystyk@w3.org>
Cc: Larry Masinter<masinter@parc.xerox.com>,http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com,w3c-http@w3.org

At 6:18 PM -0400 1996-10-20, Henrik Frystyk Nielsen wrote:
>>
>>The WG would like a definitive statement from the implementors about
>>which option makes the most sense.
>
>As "one of the implementors" here is what I recommend as a practical solution:
>
>1) A client always sends a request using the latest version it supports.
>Only if the client already knows the version of the server and this version
>is inferrior to the version of the client, then it should downgrade to a
>version understood by the server.
>
>2) A server always responds with the same version as the request. Only if
>this version is not directly supported by the server, it should take the
>version that comes closest. If the semantics of the response requires a
>specific version and this is not the version of the client then it should
>return "505 HTTP Version not supported".

Henrik,

This is a statement of one way to handle the situation.

You are missing the design rationale for why one should use this approach
at all.

It would be most helpful to see a comprehensive analysis of all 1.1 and 1.0 methods
and proxy situations to see if downgrade is the best approach.

What are the reasons for the approach?  How do these reasons evolve
when new protocol versions come out? How much sense do they make when few
1.0 clients and servers remain?

If the downgrade approach is best, the spec should read MUST to ensure consistent
implementations.



