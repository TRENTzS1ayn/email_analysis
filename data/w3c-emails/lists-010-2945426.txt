docno="lists-010-2945426"
received="Wed Apr 24 13:39:26 1996"
isoreceived="19960424173926"
sent="Wed, 24 Apr 1996 22:30:33 +0200 (MET DST)"
isosent="19960424203033"
name="Koen Holtman"
email="koen@win.tue.nl"
subject="Re: NULLRequest (Sect. 4.1)"
id="199604242030.WAA28400@wsooti04.win.tue.nl"
charset="USASCII"
inreplyto="9604241928.AA06393&#64;zorch.w3.org"
expires="1"


To:jg@w3.org
Cc:dmk@allegra.att.com,http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com

jg@w3.org:
>
>I guess I'm less concerned about "violating the request/response model
>of HTTP".  Then again, I've designed two previous streaming protocol based
>systems :-).
>
>The above looks like another possibility that is not a band-aid solution.
>I'm happy either with a general null-request solution, or with recrafting
>7.2.2.  I am unhappy with any solution that would either hack individual
>methods, or be version dependent or depend too much on the details of
>the transport connection state.

How about this:

             Full-Request   = Request-Line              ; Section 5.1
                              *( General-Header         ; Section 4.3
                               | Request-Header         ; Section 5.2
                               | Entity-Header )        ; Section 7.1
                              CRLF
                              [ Entity-Body ]           ; Section 7.2
                              [ CRLF ]
                              ^^^^^^^^

Together with a text

 Clients SHOULD NOT include the optional CRLF at the end of a request,
 but servers MUST be tolerant of clients which do include this CRLF.

   Note: Many existing HTTP/1.0 clients add a CRLF at the end of a POST
   request.

Koen.



