docno="lists-010-7058374"
received="Mon Aug 12 12:12:47 1996"
isoreceived="19960812161247"
sent="Mon, 12 Aug 1996 12:07:43 0700 (PDT)"
isosent="19960812190743"
name="David W. Morris"
email="dwm@shell.portal.com"
subject="Re: Conventions for Sharing User Agent Profiles"
id="Pine.SUN.3.93.960812114356.12841A100000@jobe.shell.portal.com"
charset="USASCII"
inreplyto="320CAF8F.6A1&#64;w3.org"
expires="1"

To: Dave Raggett<dsr@w3.org>
Cc:http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com,http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com



The difficulty I believe is in the codification of features in a way that
will satisfy everybody (or mostbodies). I have two shipping products
which are fairly complex interactive applications built using WWW
technology. In each case I have discovered a need to know at a very
detailed level how a browser implements certain specific characteristics
in order for my applications to interact correctly with the user.

A specific concern is how the browser handles a selection list when 
the HTML doesn't pre-select an option. One major browser follows the
user's markup the other follows the HTML spec and defaults the first.
Another 2nd tier browser ignores the selected attribute.

Getting this level of detail coded is necessary but perhaps impossible
to achieve. Certainly it becomes difficult to accept such detail from
unknown sources since getting it wrong can have a very negative impact.

I think any realistic database approach will need to incorporate chains
of 'authority' and 'trust' much like security CAs do.

Secondly, the coding format will need to be very flexible and easy to
extend with minimal (or no) global registration required. Part of 
each database will need to be a description of which parameters the
owner of the database certifies/tests/etc. Which were inherited from
another source, etc.

Merging feature coding from multiple sources is a mandatory feature.
For example, I could envision an HTTP extention like the basic
authentication which would challenge a new unknown browser to identify
its public feature set ... those features the published acknowledged/
claimed and later the local DB support person might need to modify the
feature set with additional parameters, etc.  Or a server might check
the unknown browser's features with a friendly cooperating server and
learn the base set but still need additional details of the nature
I described above.

Finally there are a whole bunch of characteristics which describe an
individual installation of a browser product which I believe Koen has
already noted should fit well under content negotiation.

To take this to the second order then, when we learn that a browser has
a particular plug-in installed (via content negotiation) we may then need
user agent like version identification for the plug-in so that our
database of extended characteristics can be checked.

I think this is an important but difficult problem set.

Dave Morris



