docno="lists-010-7292796"
received="Tue Aug 13 16:28:33 1996"
isoreceived="19960813202833"
sent="Tue, 13 Aug 1996 16:06:36 0700 (PDT)"
isosent="19960813230636"
name="David W. Morris"
email="dwm@shell.portal.com"
subject="Re: Conventions for Sharing User Agent Profiles"
id="Pine.SUN.3.93.960813153038.24732C100000@jobe.shell.portal.com"
charset="USASCII"
inreplyto="9608131724.AA05047&#64;acetes.pa.dec.com"
expires="1"

To: http working group<http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com>




On Tue, 13 Aug 1996, Jeffrey Mogul wrote:

> Shel writes:
>...
>     itself.  I'm assuming here that this database may contain fine
>     detail about UA behavior that may even include bugs noticed long
>     after the release.
> 
> I know Shel has had to fight the real-world battle against the attack
> of the evil browsers, but I'm not sure I would be quite as gloomy
> about a UA-provided UA-profile.


Evil has nothing to do with it.  The fact is that my products have had
to adjust themselves to browser behaviors which would never make it
into the feature list because the browser vendor does 
control the characterization of their product. Those behavior
differences may be bugs in my eyes and design intent in the developers.
They have been quite significant to the correct behavior of the 
applications but rather small in the overall scheme of things.

Hence, as was pointed out by someone, we need to define an extensible
mechanism for recording and reporting browser characteristics. Some
characteristics associate with the software version and some of those
would be based on vendor descriptions of their product. Others reflect
user configuration choices or platform charactistics.

Many of the characteristics I'm concerned about involve HTML generated
on the fly and not cachable by a proxy anyway so I don't see these
'feetures' as changing cachability.

DaveR started this thread with a proposal that a mechanism be developed
for coding and sharing user agent characteristics. If we have a coding
mechanism, it should be general enough to deal with the spectrum of
differences and sources of the information. The coding scheme, should
be appropriate for negotiation based on characteristics the browser
is willing to report as well as vendor supplied updates.

And going back to where Dave started, it should support server operators
who want to collaborate and exchange characteristics. If the collaboration
is to be more than mutually negotiated, then source verification will also
need to be dealt with. But I think it would be sufficient deal with 
the coding issues and leave  sharing to be based on mutual agreement and
trust.  Very simple URL based requests could be used to exchange the 
data. shttp/ssl and caching mechanisms are already defined to allow
secure cooperative management of data.

Dave Morris



