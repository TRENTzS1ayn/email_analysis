docno="lists-011-12269800"
received="Thu Dec  4 16:23:33 1997"
isoreceived="19971204212333"
sent="Thu, 4 Dec 1997 16:13:59 0800 (PST)"
isosent="19971205001359"
name="David W. Morris"
email="dwm@xpasc.com"
subject="Re: Another way to pipeline cache validation...."
id="Pine.GSO.3.96.971204160914.9375B100000@shell1.aimnet.com"
charset="USASCII"
inreplyto="9712041927.AA12545&#64;pachyderm.pa.dec.com"
expires="1"

To: Jim Gettys<jg@pa.dec.com>
Cc:http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com,http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com




On Thu, 4 Dec 1997, Jim Gettys wrote:

> Andrew's idea is to augment the cache database that a browser keeps on disk 
> of things it caches, with a list of the order in which things are accessed 
> (at that site, maybe with how soon they were accessed).  So when you go 
> see that you need to validate the first class library, it then becomes easy 
> to figure out that there are a bunch of things that the Java application 
> is going to want/need from that web site.  This makes it trivial to do a 
> pipelined cache validation of the set of objects likely to be needed and 
> reduce this to one round trip.  The technique could be used for other forms 
> of cache validation than Java classes as well, but it is obviously a good 
> idea for them. 

Seems to me that there is an obvious container relationship which could
be exploited by the user agents. As long as the UA is going to change
to improve revalidation performance, the cache management database 
should keep track of the external references from an object.  Simply
following the direct external reference chain should provide a 
directed graph of all objects likely to be required the next time
an object was referenced. A lot better than using relative time
association to guess what else to try.

Dave Morris



