docno="lists-011-3010315"
received="Wed Apr 30 12:57:24 1997"
isoreceived="19970430165724"
sent="Wed, 30 Apr 1997 15:54:22 0400"
isosent="19970430195422"
name="Scott Lawrence"
email="lawrence@agranat.com"
subject="Re: IPP&gt; MIME multipart/* vs HTTP"
id="199704301954.PAA29809@devnix.agranat.com"
inreplyto="199704301944.MAA19410&#64;woden.eng.sun.com"
expires="1"


To: Robert Herriot<Robert.Herriot@eng.sun.com>
Cc:ipp@pwg.org,http-wg@cuckoo.hpl.hp.com


SDL> From lawrence@agranat.com Wed Apr 30 12:05:41 1997:

SDL> Correct; the 'Transfer-Encoding: chunked' applies to all of the HTTP
SDL> message body.  For completeness, my companys' server implementation
SDL> does support chunked encoding of the entire multipart/* body part,
SDL> but we think it doesn't make much sense (because it is redundant) so
SDL> that support may be compiled out to save code.

>>>>> "BH" == Robert Herriot <Robert.Herriot@Eng.Sun.COM> writes:

BH> Why is chunking redundant? It seems important for the case where the
BH> client doesn't know the length of the data at the beginning of the
BH> transmission.  Without the Transfer-Encoding of chunked, HTTP/1.1 seems
BH> to require a Content-Length for a client transmission (as a client, it
BH> cannot close the connection and multipart/byterange doesn't seem
BH> appropriate for clients to send).

  Not in general!

  Generating a multipart/* body (which has mechanisms already in it
  for describing the length of each part), and then wrapping all that
  in an HTTP 'Transfer-Encoding: chunked'.  It's not that we think it
  won't work or even that it would never be the right thing, just that
  in the application environments we are targetting it is too
  expensive in code complexity to be supported by default (code size
  is _very_ important to our customers; our 1.1 server can be under
  20K).

--
Scott Lawrence           EmWeb Embedded Server       <lawrence@agranat.com>
Agranat Systems, Inc.        Engineering            http://www.agranat.com/



