docno="lists-012-16467244"
received="Wed Apr 11 19:47:56 2001"
isoreceived="20010411234756"
sent="Wed, 11 Apr 2001 11:46:02 0700"
isosent="20010411184602"
name="Jeffrey Mogul"
email="mogul@pa.dec.com"
subject="Proposal (I-D) for extending HTTP to support out-oforder responses"
id="200104111846.LAA05896@wera.pa.dec.com"
expires="1"


To:http-wg@hplb.hpl.hp.com

A few weeks ago, I gave a short "Work In Progress" talk at
USITS (the "USENIX Symposium on Internet Technologies and
Systems") about some very early research results I had obtained
about the potential value of supporting out-of-order responses
in HTTP.

Several people came up to me after the talk and seemed very eager
to try out this kind of mechanism.  One person had even
implemented the idea in his own server code while the session was
in progress.  So it seemed like it might be a good idea to
propose a standard extension *before* lots of people started to
deploy this kind of thing.  Hence, I wrote up a simple proposal
as an Internet-Draft:

Title: Support for out-of-order responses in HTTP
Author(s): J. Mogul
Filename: draft-mogul-http-ooo-00.txt
Pages: 14
Date: 09-Apr-01

http://www.ietf.org/internet-drafts/draft-mogul-http-ooo-00.txt

    The introduction of persistent connections and pipelining
    into HTTP has resulted in potential performance benefits,
    but has also exposed the problem of head-of-line blocking.
    A simple, compatible, and optional extension to HTTP to
    allow a server to issue responses out of order could
    significantly reduce HOL blocking.  In this extension,
    clients add short ID fields to their requests, and servers
    echo these IDs back in their responses.  This extension is
    defined as a hop-by-hop rather than end-to-end mechanism,
    so it avoids much of the complexity of the end-to-end
    approach.
    
If members of the HTTP-WG mailing list have comments on this,
I'd be happy to receive them.

I want to stress that the research evaluation that might prove
(or disprove) the value of this approach has NOT been finished.
So it does not make sense to start an argument about whether
this is useful (unless someone else has already done a careful
evaluation of this kind of approach).

I'm just looking for comments on whether the protocol makes sense
(and, in particular, whether it might lead to screwups by caching
proxies that don't comply with the HTTP specifications).

Thanks
-Jeff



