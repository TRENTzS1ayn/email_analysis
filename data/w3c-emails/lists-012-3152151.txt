docno="lists-012-3152151"
received="Mon May 18 10:07:01 1998"
isoreceived="19980518140701"
sent="Mon, 18 May 1998 10:04:56 0700"
isosent="19980518170456"
name="Josh Cohen"
email="joshco@microsoft.com"
subject="RE: Nonorder processing in persistent connections"
id="8B57882C41A0D1118F7100805F9F68B50340A3D5@red-msg45.dns.microsoft.com"
inreplyto="Nonorder processing in persistent connections"
expires="1"


To: Zhou Kang<ZhouKang@cheerful.com>, HTTP-WG<http-wg@cuckoo.hpl.hp.com>

Thanks for your comments.   Out of order responses in HTTP is a topic
which has come up more than a few times.  I beleive that most people
agree that out of order responses or transacation identification would
be a good thing.  However, specifying exactly how this would behave
isn't a simple task.  I think that because of this, the consensus is
that it is beyond the scope of the 1.1 version of HTTP.  
That doesn't mean the future versions of http wouldn't have this,
but http/1.1 is "feature complete" at this point.
 

-----Original Message-----
From: Zhou Kang [mailto:ZhouKang@cheerful.com]
Sent: Saturday, May 16, 1998 10:09 AM
To: HTTP-WG
Subject: Non-order processing in persistent connections


Hi, Every body:
 
HTTP/1.1 says when web server deals with the pipelined requests in
persistent connections, it must return responses in same order that they
recieved. I think that is an idea not good enough, at least in some special
situations.
 
I am working on a web server and write my master degree thesis about HTTP.
My implementation supports both multi-thread and persistent connections. But
with my test,  in some situation , ordered processing in pipeline requests
costs long waiting time .
 
For example: when a request in the pipeline needs a long time processing
(like retrieve data from a database) , so the later responses must wait even
if they has been ready for being sent away.
 
In this situation , web server has to deal with the ordered messages at the
cost of a long response time and more resource for holding the ready
response in memory.
 
In fact, we can make some minor alteration to http server's performance. For
example, we can add a header to the messages to indicate the
request/response pair, something like 'Request-ID'. A client may create a
unique digital ID for every request to the same server ,  then the server 
 
Any question and comment about this 'non-order processing', and my web
server or my thesis as well, please contact with me: zhoukang@cheerful.com
<mailto:zhoukang@cheerful.com>   . I can share source code of my web server
with others.
 
Zhou Kang
Computer Department,
Sichuan University of P.R.China
 



