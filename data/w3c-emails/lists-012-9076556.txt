docno="lists-012-9076556"
received="Thu Jan  7 14:38:56 1999"
isoreceived="19990107193856"
sent="Thu, 07 Jan 99 09:19:12 EST"
isosent="19990107141912"
name="Ross Patterson"
email="ROSSP@SS1.Reston.VMD.Sterling.COM"
subject="Re: IPP&gt; Chunked POST: SUMMARY"
id="199901071438.OAA29513@hplb.hpl.hp.com"
inreplyto="IPP&gt; Chunked POST: SUMMARY"
expires="1"


To:CGI-WG@Golux.Com,ipp@pwg.org,http-wg@cuckoo.hpl.hp.com,SERVLET-INTEREST@JAVA.SUN.COM


kugler@us.ibm.com writes:

>Ross Patterson wrote:
>>
>>>...
>>>5.  Origin servers MUST remove the Transfer-Encoding before passing a
>>>request body to a plug-in, servlet, (Fast)CGI, or across any other
>gateway
>>>boundary.
>>
>>That's not clearly stated in either the HTTP 1.1 or CGI 1.1
>specifications.
>
>An unfortunate omission, IMO.

Not really.  The HTTP Working Group generally avoids discussion of any
purely-internal interfaces, including CGI, servlets, NSAPI, etc.  And of
course CGI 1.1, which predates any discussion of transfer-codings in
HTTP, couldn't be expected to address the issue.

The CGI Working Group <CGI-WG at Golux.Com> is working on getting CGI 1.1
finally up to snuff for publication as an RFC, and then plans to
undertake CGI 1.2, which is targeted at addressing HTTP 1.1 issues
(among other things).  As often happens with protocol revisions, there
is likely to be some debate about the scope of changes from CGI 1.1 to
1.2, and now that you've raised this point about removing
transfer-codings I expect that will be discussed.

>Section 4.4 says:
>
>> All HTTP/1.1 applications that receive entities MUST accept the
>> "chunked" transfer-coding (section 3.6), thus allowing this mechanism
>> to be used for messages when the message length cannot be determined
>> in advance.
>
>Apparently that should be interpreted as "MUST accept the 'chunked'
>TRANSFER-CODING, but NEED NOT accept REQUESTs with that transfer-coding."

Correct - all HTTP 1.1 servers must be able to process requests encoded
as chunked data, but they are still allowed to refuse the request for
other reasons.  For example, the targeted resource might not accept the
method you've specified (many servers refuse POST for static files with
403 Forbidden or (in HTTP 1.1) 405 Method Not Allowed), or the request
might require authorization (401 Not Authorized), or as you've noted
already it might exceed the server's willingness to buffer data.

Ross Patterson
VM Software Division
Sterling Software, Inc.



