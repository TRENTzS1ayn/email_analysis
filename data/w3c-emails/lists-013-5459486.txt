docno="lists-013-5459486"
received="Mon Oct 20 12:25:14 2003"
isoreceived="20031020162514"
sent="Mon, 20 Oct 2003 09:09:54 0700 (PDT)"
isosent="20031020160954"
name="David Morris"
email="dwm@xpasc.com"
subject="Re: Canceling a HTTP request"
id="Pine.LNX.4.33.0310200900080.6031100000@egate.xpasc.com"
charset="USASCII"
inreplyto="JGEBLBGPLNKDABGOEONPEEMICBAA.charumathy_v&#64;lgsoftindia.com"
expires="1"

To: Charumathy Venkatraman<charumathy_v@lgsoftindia.com>
Cc:<ietf-http-wg@w3.org>




Your understanding is correct. There is no way to cancel an HTTP request
once the complete request has been sent. Closing the connection abandons
results which may have been completed. For various reasons including
network latencies and design of the HTTP server, it is likely that the
application running within the HTTP server will never be aware that the
connection was closed.

Any application which depends on the user's ability to cancel a request
once sent probably needs to be redesigned. For example, the user could be
engaged in a 'two phase commit'-like interaction where the action must be
confirmed by a second web transaction. Application design issues are
probably beyond the scope of this list. I'm willing to clarify my comments
off line but actual design assistance is what I do for a living so I won't
be able to volunteer a lot of help.

Dave Morris

On Mon, 20 Oct 2003, Charumathy Venkatraman wrote:

> Hi,
> I'm new to HTTP and I have a basic question.
> My HTTP client will issue GET and POST requests to a HTTP 1.1 server. There
> is a requirement from the caller to be able to cancel both GET and POST. My
> understanding is that the only way to cancel the transaction is to close the
> socket before the transaction completes. Is that correct? Will the server
> automatically discard the data (in case of POST) when this is done?
>
> Thanks,
> Charu.
>



