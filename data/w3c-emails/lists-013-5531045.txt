docno="lists-013-5531045"
received="Thu Oct 23 12:57:46 2003"
isoreceived="20031023165746"
sent="Thu, 23 Oct 2003 12:57:46 0400 (EDT)"
isosent="20031023165746"
name="Scott Lawrence"
email="scotthttp@skrb.org"
subject="Re: Chained proxies, persistent connections, authentication"
id="26737.65.220.123.2.1066928266.squirrel@webmail.pair.com"
charset="iso-88591"
inreplyto="2F9121839AC40648B42FBC550E932A71673A2D&#64;farnsworth.EUROPE.CLEARSWIFT.COM"
expires="1"


To:<rob.maidment@clearswift.com>
Cc:<ietf-http-wg@w3.org>


>
> I am currently investigating a problem that occurs in this type of
> scenario:
>
> browser -> proxy1 -> proxy2 -> server
>
> Proxy1 is actually a Squid proxy, it is passing though the end-user
> authentication to proxy2.  The problem occurs because proxy1 is reusing
> connections to proxy2 for requests from different users, but proxy2 is
> only authenticating the first request on each new connection.  This
> means that subsequent requests are not being authenticated, and these
> requests are being treated as if they originated from the first user to
> use the connection.

You're not clear on what's happening here - what authentication header
is proxy2 interpreting?  As a proxy, it should not be using the Authorization
header at all - that is for 'server', not any proxy.

As Dave pointed out, proxy1 should not be passing through any
Proxy-Authorization header because that is a hop-by-hop header; if
proxy2 is challenging by sending a 407, then only proxy1 can respond to
that challenge (not intuitive, and perhaps not optimal, but that is
what the standard says).

In any event, proxy2 is incorrect to associate the connection with
the authentication of the first request on that connection; all requests
are stateless, including authentication attributes.  Each request must
be authenticated on its own - this is _not_ one of the _actual_ benefits
of persistent connections.



