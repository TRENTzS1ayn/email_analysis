docno="lists-013-6959466"
received="Fri Apr 30 05:33:46 2004"
isoreceived="20040430093346"
sent="Fri, 30 Apr 2004 10:30:24 +0100"
isosent="20040430093024"
name="Jamie Lokier"
email="jamie@shareable.org"
subject="Re: PATCH, gdiff, and randomaccess I/O"
id="20040430093024.GB13899@mail.shareable.org"
charset="usascii"
inreplyto="40921717.7050300&#64;gmx.de"
expires="1"

To: Julian Reschke<julian.reschke@gmx.de>
Cc: Justin Chapweske<justin@chapweske.com>, Alex Rousskov<rousskov@measurement-factory.com>, HTTP working group<ietf-http-wg@w3.org>



Julian Reschke wrote:
> ...for instance, GDIFF requires random access to the old file, while a 
> simpler format may work on plain streams...

That was my immediate concern when I read the GDIFF spec too.
On the other hand, the random access allows fragments of the old file
to be reordered.

Note that traditional "diff" and "patch" also require random access,
because their hunks needn't be in order.

I looked at VCDIFF (which is quite a nice principle).  It does the
same thing: random access is required.  Some attempt to reduce that is
done by allowing the patch to specify "windows" from the old file
which are operated on independently, in sequence.

I must admit I don't like that either: Gzip's sliding window with
bounded length seems, on the face of it, like it would be more
effective at compression (due to increased matching opportunities),
while keeping the access pattern requirements of the
patcher/decompressor bounded to a small region of the stream.

(Gzip also breaks the input stream into blocks, in sequence, but they
are much larger than the sliding window, so much larger than the memory
requirements of the decompressor (which would also be the patcher)).

-- Jamie



