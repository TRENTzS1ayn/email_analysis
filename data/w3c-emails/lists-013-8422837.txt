docno="lists-013-8422837"
received="Wed Dec  2 18:08:04 1998"
isoreceived="19981202230804"
sent="Wed, 02 Dec 1998 14:49:36 0800"
isosent="19981202224936"
name="Gregory Alan Bolcer"
email="gbolcer@gambetta.ics.uci.edu"
subject="Re: SWAP Example"
id="9812021449.aa10445@paris.ics.uci.edu"
inreplyto="002c01be1e40$0eae5980$aa66010d&#64;copper.parc.xerox.com"
expires="1"

To:ietf-swap@w3.org


Thanks everyone!  I'll put it down as a possible
example and describe the format as an item of debate. 
I tend to agree that HTTP methods should be added very
sparingly, although it made the example easier and
from a programming standpoint, would be easier to 
implement in some ways.

Greg

 > 
 > 
 > > The method is specified as part of the HTTP protocol.  It is actually
 > > the first characters of the first line of the header of the request.
 > > Most requests to a web server use the GET method, so the browser will
 > > send as the first line to the server something like:
 > > 
 > > GET /pub/doc/index.html HTTP/1.1 
 > > 
 > > For this reason the method does not need to be part of the XML body of
 > > the message.  We were fairly well persuaded by ietf members who worked
 > > on WebDAV that this was the right way to extend the HTTP protocol for
 > > use in things like SWAP.  By the way, the WebDAV spec goes into detail
 > > about the PROPFIND method you used as an example.
 > 
 > I don't think it is appropriate to extend HTTP for SWAP
 > in the same way that HTTP was extended for WebDAV. WebDAV is
 > a set of extensions to HTTP for Web distributed authoring and versioning,
 > and the extensions being supported are appropriate for things
 > which might otherwise be accessed via web protocols.
 > 
 > I think SWAP's situation is much more like IPP's, where the
 > services are being accessed over the Internet are not otherwise
 > Web resources that one would access using a web browser, and
 > that using a single generic POST method (going POSTal), and putting
 > the actual operation in the body, makes more sense.
 > 
 > This design choice is somewhat of a religious debate, unfortunately:
 > it's clear that the first-order functionality of a protocol can be
 > expressed either way, and that the design considerations are second-order,
 > yet the design choice has a major effect in the description of (although
 > not the implementation of) the protocol.
 > 
 > Larry
 > -- 
 > http://www.parc.xerox.com/masinter



