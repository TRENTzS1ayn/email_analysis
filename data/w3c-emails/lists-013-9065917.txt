docno="lists-013-9065917"
received="Thu Oct 15 01:44:39 1998"
isoreceived="19981015054439"
sent="Wed, 14 Oct 1998 22:44:30 0700 (PDT)"
isosent="19981015054430"
name="Surendra Reddy"
email="skreddy@us.oracle.com"
subject="Re: Issue: Synchronous vs. Asynch."
id="Pine.SOL.3.96.981014221756.11672C100000@volcano.us.oracle.com"
charset="USASCII"
inreplyto="9810140929.aa05250&#64;paris.ics.uci.edu"
expires="1"

To:gbolcer@ics.uci.edu
cc:ietf-swap@w3.org



Greg,

Async. mechanism is ideal for long lived process interactions. 
What about, if we want to retrieve data values generated by
the process instance or query on the status of the
process instance, do we need to subscribe
to this request and wait for the data to come? 
SWAP also need to support synchronous mechanism
as well to address these short lived interactions.
  
Any comments?

Surendra


On Wed, 14 Oct 1998, Gregory Alan Bolcer wrote:

> This might be an issue to consider.
> Assume that you invoke a remote workflow
> process across the Internet.  You monitor
> the changes wither by subscribing to change
> events or polling using the SWAP monitoring
> methods.  You (the workflow at your end) decide
> that things have changed and you want to 
> stop or suspend the remote process (or even
> just change the values in some significant way).  Do
> you invoke the appropriate suspend commands
> and wait to receive the termination values or
> do you send the termination commands and subscribe for
> the terminations values?   The question is,
> should this take place synchronously or asynchronously?
> I would argue for the latter as it implies less intrusive control
> on a foreign system.   As a long running process
> will definitely have to do some cleanup that may well go beyond
> reasonable http and rpc timeouts.  
> 
> The analogy is a regular computer operating system.
> When you are the user kill a process, from your standpoint
> it looks like you are actually doing the termination,
> but what is happening is you are 'requesting' that the
> operating system terminte the process, which it
> evaluates, schedules, completes, and cleans up.
> 
> Any comments?
> 
> Greg
> 
> 



