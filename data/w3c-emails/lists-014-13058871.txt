docno="lists-014-13058871"
received="Thu Nov  6 09:13:24 2003"
isoreceived="20031106141324"
sent="Thu, 06 Nov 2003 14:12:57 +0000"
isosent="20031106141257"
name="Dave Reynolds"
email="der@hplb.hpl.hp.com"
subject="Re: Design Issue (3)  How to label concepts?"
id="3FAA56E9.9040507@hplb.hpl.hp.com"
charset="usascii"
inreplyto="350DC7048372D31197F200902773DF4C047479CF&#64;exchange11.rl.ac.uk"
expires="1"


To:"Miles, AJ (Alistair)"<A.J.Miles@rl.ac.uk>
Cc:"'public-esw-thes@w3.org'"<public-esw-thes@w3.org>


Miles, AJ (Alistair) wrote:

> I was thinking of three properties:
> 
> 
> rdf:label(domain = Resource, range = Literal)
>   ^
>   |
> soks:prefLabel  (domain = Resource, range = Literal)
> 
> [A label which is the preferred label for a resource]

> rdf:label(domain = Resource, range = Literal)
>   ^
>   |
> soks:altLabel  (domain = Resource, range = Literal)
> 
> [A label which is an alternative but not preferred label for a resource]

Fine.

My suggestion implicitly had "altLabel" as a label which is not a 
perfLabel. This might have some advantages when it comes to merging. If you 
have two thesauri with differing perferred terms for the same concept the 
merge would just have two prefLabels and all else (not preferred in either) 
would be treated as alt. Don't know enough about how thesauri are used in 
practice to know if that is beter or worse.

> soks:prefLabel  (domain = Resource, range = Literal)
>   ^
>   |
> soks:descriptor(domain = Concept, range = Literal)
> 
> [A label that uniquely and unambiguously identifies a Concept within a
> particular conceptual scheme such as a thesaurus.  For example, 'Java
> programming language', 'Island of Java', 'Python programming language',
> 'Pythons (snakes)' are all good descriptors.]
> 
> Why have both a soks:prefLabel and a soks:descriptor?  
> 
> The notion of a 'descriptor' is fundamentally defined and understood to be a
> lexical identifier for a concept, unique within a conceptual scheme.  This
> is what a 'descriptor' is understood to be by thesaurus and KOS people (I'm
> hoping!).  

In that case one option would be to change the range of descriptor to 
capture the context.

     property soks:descriptor (domain = Concept, range = Descriptor)
     class soks:Descriptor
     property soks:descriptorTerm (domain = Descriptor, range = Literal)
     property soks:descriptorSchema (domain = Desciptor, range = Resource)

Then in instance data the descritor is a b-node pointing to the literal and 
to a URI identifying the conceptual schema. This would facilitate merging.

The downside is that this version of soks:descriptor couldn't be a 
subProperty of rdfs:label.

Dave



