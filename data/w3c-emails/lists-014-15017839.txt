docno="lists-014-15017839"
received="Wed Feb 25 09:36:11 2004"
isoreceived="20040225143611"
sent="Wed, 25 Feb 2004 14:43:59 0000"
isosent="20040225144359"
name="NJ Rogers, Learning and Research Technology"
email="Nikki.Rogers@bristol.ac.uk"
subject="Re: Cracking the nut: separating semantics and structure"
id="2996358.1077720239@82-32-26113.cable.ubr04.azte.blueyonder.co.uk"
charset="usascii"
inreplyto="350DC7048372D31197F200902773DF4C0494411F&#64;exchange11.rl.ac.uk"
expires="1"

To:"Miles, AJ (Alistair)"<A.J.Miles@rl.ac.uk>,"'public-esw-thes@w3.org'"<public-esw-thes@w3.org>



Nope sorry, you've lost me here Al!

What does 'skos:partOf' achieve for us, except for some sense of symmetry 
or completeness in terms of the structural model you're referring to?
And what does "skos:relatedPartOf" actually mean - can you give me a 
"real-world" example of where this would be used to link two concepts?
The rest of it I'm fine with.

Apologies if I'm missing the obvious with my questions,

Nikki

--On 25 February 2004 14:17 +0000 "Miles, AJ (Alistair) " 
<A.J.Miles@rl.ac.uk> wrote:

>
> Here's a possible solution to the longstanding problem of overloaded
> semantics in thesaurus-style relationships.
>
> We have a set of properties for building a CONCEPTUAL STRUCTURE.  These
> structural properties carry very weak semantics, if any.  The
> skos:narrower and skos:broader props allow organising concepts into a
> hierarchy.  The skos:related property allows associative links between
> branches of the hierarchy.  To reiterate, these props imply no semantics,
> they just allow building of a structure, or to put it another way,
> structural organisation of concepts.
>
> We have a second set of properties which carry well defined semantics.
> There is one for the instantive (instance-of) relationship - rdf:type.
> There is one for the generic (class subsumption) relationship -
> rdfs:subClassOf.  And there should be one for the partitive (part-of)
> relationship - ??? (call it skos:partOf for now, although there must be
> some reference property we could use).
>
> So then these two sets of props are the building blocks for all other
> props. For example:
>
> skos:broaderInstantive
> rdfs:subPropertyOfskos:broader;
> rdfs:subPropertyOfrdf:type.
>
> skos:broaderGeneric
> rdfs:subPropertyOfskos:broader;
> rdfs:subPropertyOfrdfs:subClassOf.
>
> skos:broaderPartitive
> rdfs:subPropertyOfskos:broader;
> rdfs:subPropertyOfskos:partOf.
>
> (or the alternative structural rendering of the partitive relationship
> ...)
>
> skos:relatedPartOf
> rdfs:subPropertyOfskos:related;
> rdfs:subPropertyOfskos:partOf.
>
> ... So each one of these properties has a structural component and a
> semantic component, and these two components have been factored out.
> That's the idea.
>
> What does everyone think?
>
> Al.
>
>
>
>



----------------------
NJ Rogers, Technical Researcher
(Semantic Web Applications Developer)
Institute for Learning and Research Technology (ILRT)
Email:nikki.rogers@bristol.ac.uk
Tel: +44(0)117 9287096 (Direct)
Tel: +44(0)117 9287193 (Office)



