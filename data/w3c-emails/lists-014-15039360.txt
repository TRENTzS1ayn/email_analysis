docno="lists-014-15039360"
received="Wed Feb 25 10:26:55 2004"
isoreceived="20040225152655"
sent="Wed, 25 Feb 2004 15:26:53 0000"
isosent="20040225152653"
name="Miles, AJ (Alistair) "
email="A.J.Miles@rl.ac.uk"
subject="RE: Cracking the nut: separating semantics and structure"
id="350DC7048372D31197F200902773DF4C04944122@exchange11.rl.ac.uk"
inreplyto="Cracking the nut: separating semantics and structure"
expires="1"


To:"'NJ Rogers, Learning and Research Technology'"<Nikki.Rogers@bristol.ac.uk>
Cc:"'public-esw-thes@w3.org'"<public-esw-thes@w3.org>


OK, I'm NOT actually suggesting we actually add a property 'skos:partOf'.
There must be a property somewhere in some standard vocab that expresses at
a high level the 'part of' relationship between two things (i.e. 'wheel' is
a part of 'vehicle', 'bones' part of 'skeleton', apologies for naff examples
but I'm making this up as I go :) - which in turn could be extended into
'geographical part of' 'physical part of' 'logical part of' etc..

The dcterms:isPartOf property might be a candidate for this, which is
defined as follows: 'The described resource is a physical or logical part of
the referenced resource.' ?? [1]

The point is, in some thesauri the 'part of' relationships are part of the
hierarchy, and in others they are modelled as associative links between
concepts in different branches of the hierarchy.

So there are two types of information to convey.  The semantic relationship
between two concepts (i.e. instance-of, sub-class-of, part-of) and how you
want that relationship to be displayed as part of a structure (i.e.
hierarchical or associative).  So we split these apart using two sets of
high-level properties.  Extensions can then recombine these properties in
different ways to create properties that organise the same semantic
relationships differently (e.g. 'part of' as hierarchical or associative).
That was the idea.

It was also a way of linking the SKOS vocab to RDF and RDFS (first step
towards understanding interop and migration between thesauri and
ontologies).

Al.    

[1] http://dublincore.org/documents/dcmi-terms/

> -----Original Message-----
> From: NJ Rogers, Learning and Research Technology 
> [mailto:Nikki.Rogers@bristol.ac.uk] 
> Sent: 25 February 2004 14:36
> To: Miles, AJ (Alistair); 'public-esw-thes@w3.org'
> Subject: Re: Cracking the nut: separating semantics and structure
> 
> 
> 
> Nope sorry, you've lost me here Al!
> 
> What does 'skos:partOf' achieve for us, except for some sense 
> of symmetry 
> or completeness in terms of the structural model you're 
> referring to? And what does "skos:relatedPartOf" actually 
> mean - can you give me a 
> "real-world" example of where this would be used to link two 
> concepts? The rest of it I'm fine with.
> 
> Apologies if I'm missing the obvious with my questions,
> 
> Nikki
> 
> --On 25 February 2004 14:17 +0000 "Miles, AJ (Alistair) " 
> <A.J.Miles@rl.ac.uk> wrote:
> 
> >
> > Here's a possible solution to the longstanding problem of 
> overloaded 
> > semantics in thesaurus-style relationships.
> >
> > We have a set of properties for building a CONCEPTUAL STRUCTURE.  
> > These structural properties carry very weak semantics, if any.  The 
> > skos:narrower and skos:broader props allow organising 
> concepts into a 
> > hierarchy.  The skos:related property allows associative 
> links between 
> > branches of the hierarchy.  To reiterate, these props imply no 
> > semantics, they just allow building of a structure, or to put it 
> > another way, structural organisation of concepts.
> >
> > We have a second set of properties which carry well defined 
> semantics. 
> > There is one for the instantive (instance-of) relationship 
> - rdf:type. 
> > There is one for the generic (class subsumption) relationship - 
> > rdfs:subClassOf.  And there should be one for the partitive 
> (part-of) 
> > relationship - ??? (call it skos:partOf for now, although 
> there must 
> > be some reference property we could use).
> >
> > So then these two sets of props are the building blocks for 
> all other 
> > props. For example:
> >
> > skos:broaderInstantive
> > rdfs:subPropertyOfskos:broader;
> > rdfs:subPropertyOfrdf:type.
> >
> > skos:broaderGeneric
> > rdfs:subPropertyOfskos:broader;
> > rdfs:subPropertyOfrdfs:subClassOf.
> >
> > skos:broaderPartitive
> > rdfs:subPropertyOfskos:broader;
> > rdfs:subPropertyOfskos:partOf.
> >
> > (or the alternative structural rendering of the partitive 
> relationship
> > ...)
> >
> > skos:relatedPartOf
> > rdfs:subPropertyOfskos:related;
> > rdfs:subPropertyOfskos:partOf.
> >
> > ... So each one of these properties has a structural 
> component and a 
> > semantic component, and these two components have been 
> factored out. 
> > That's the idea.
> >
> > What does everyone think?
> >
> > Al.
> >
> >
> >
> >
> 
> 
> 
> ----------------------
> NJ Rogers, Technical Researcher
> (Semantic Web Applications Developer)
> Institute for Learning and Research Technology (ILRT) 
> Email:nikki.rogers@bristol.ac.uk
> Tel: +44(0)117 9287096 (Direct)
> Tel: +44(0)117 9287193 (Office)
> 



