docno="lists-014-15053848"
received="Wed Feb 25 10:36:52 2004"
isoreceived="20040225153652"
sent="Wed, 25 Feb 2004 15:45:01 0000"
isosent="20040225154501"
name="Aida Slavic"
email="aida@acorweb.net"
subject="RE: Cracking the nut: separating semantics and structure"
id="AAEKLFPLCPPCFCOACDKIKEHICJAA.aida@acorweb.net"
charset="iso-88591"
inreplyto="350DC7048372D31197F200902773DF4C0494411F&#64;exchange11.rl.ac.uk"
expires="1"

To:<public-esw-thes@w3.org>



Al,

What matters is the functionality
in management of vocabulary (for IR and mapping)
that arises from the coding of semantic(hierarchy)
and coding of structure (encoding facets).
Coding facets is about coordination and combination
of concepts that comes from different 'parallel' hierarchies.

Coding of structure is rarely relevant for thesauri as they are
post-coordinated
system which means that one assigns independent descriptors to the resource
and you combine terms together using Booleans in the process of searching.

However:

education <for> computing
is not the same as
computing <in> education

bibliography <of> encyclopaedia
is not the same as
encyclopaedia <of> bibliography

painting <in> Italy
is not the same as
Italy<ian> painting

To dumb this down:  thesauri and classifications are indexing
languages and to speak the language you need semantic to know which 'terms'
to use
and you need structure/syntax to know how to put a sentence together


Semantic relationships (isKindof;isPartof) are easy to handle
and it is clear why do we need this in SKOS (broading and narrowing the
meaning)

What may not be so obvious is why traditioanl KOS also need structure/syntax
coding for
facets/subfacets. And I don't know whether this is relevant
for SKOS i.e is the subPropertyOf the way to address this...


Facet encoding using 'facet indicators'has two functions
in KOS:
a) management/interface design/browsing
one needs to know know that some concept coming from facet of PLACE or TIME
or
MATERIAL (this is shortcut as this may be 10/11 steps up in hierarchy from
the concept
in question)

b) buidling composite expressions (compound concept)depends on the fact
that there is a declaration from which facet the concept comes (i.e.material
or
time or process or operation or agent)

the order one combines concepts from different coordinated facets is
usually established and has to result in specific to
general/concrete/abstract
sequence
This enables display and ordering of subject from general to
specific, and enables the control over so called phase relationships
(the influence/application of one subject on the other, comparison
of one subject with another as given in the example above)
So when combined concepts follow the specific order thing-kind-part-property
etc.
also
When two concepts comes from equal type e.g. facet of entity a 'treated'
subject
is always cited first and subject of treatement
is always second.... e.g. statistics>history ...means the history of
statistics
history>statistics, means the application of statistics in the field of
historical studies

 Aida

> -----Original Message-----
> From: public-esw-thes-request@w3.org
> [mailto:public-esw-thes-request@w3.org]On Behalf Of Miles, AJ (Alistair)
>
> Sent: 25 February 2004 14:18
> To: 'public-esw-thes@w3.org'
> Subject: Cracking the nut: separating semantics and structure
>
>
>
> Here's a possible solution to the longstanding problem of overloaded
> semantics in thesaurus-style relationships.
>
> We have a set of properties for building a CONCEPTUAL STRUCTURE.  These
> structural properties carry very weak semantics, if any.  The
> skos:narrower
> and skos:broader props allow organising concepts into a hierarchy.  The
> skos:related property allows associative links between branches of the
> hierarchy.  To reiterate, these props imply no semantics, they just allow
> building of a structure, or to put it another way, structural organisation
> of concepts.
>
> We have a second set of properties which carry well defined semantics.
> There is one for the instantive (instance-of) relationship - rdf:type.
> There is one for the generic (class subsumption) relationship -
> rdfs:subClassOf.  And there should be one for the partitive (part-of)
> relationship - ??? (call it skos:partOf for now, although there
> must be some
> reference property we could use).
>
> So then these two sets of props are the building blocks for all
> other props.
> For example:
>
> skos:broaderInstantive
> rdfs:subPropertyOfskos:broader;
> rdfs:subPropertyOfrdf:type.
>
> skos:broaderGeneric
> rdfs:subPropertyOfskos:broader;
> rdfs:subPropertyOfrdfs:subClassOf.
>
> skos:broaderPartitive
> rdfs:subPropertyOfskos:broader;
> rdfs:subPropertyOfskos:partOf.
>
> (or the alternative structural rendering of the partitive
> relationship ...)
>
> skos:relatedPartOf
> rdfs:subPropertyOfskos:related;
> rdfs:subPropertyOfskos:partOf.
>
> ... So each one of these properties has a structural component and a
> semantic component, and these two components have been factored
> out.  That's
> the idea.
>
> What does everyone think?
>
> Al.
>
>
>
>
>



