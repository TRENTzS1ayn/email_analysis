docno="lists-014-16557085"
received="Sun May  9 09:03:03 2004"
isoreceived="20040509130303"
sent="Sun, 09 May 2004 15:02:05 +0200"
isosent="20040509130205"
name="Ron Davies"
email="ron@rondavies.be"
subject="Re: Supporting arrays of concepts"
id="6.0.0.22.2.20040509145330.01bdd1d0@pop.skynet.be"
charset="usascii"
inreplyto="r02000200-103354EFF7EC9FA411D8AC0B000393758032&#64;[10.0.1.2] "
expires="1"


To: David Menendez<zednenem@psualum.com>,"Miles, AJ (Alistair)"<A.J.Miles@rl.ac.uk>
Cc:"'public-esw-thes@w3.org'"<public-esw-thes@w3.org>

Just another little wrinkle you might want to take into account. A node 
label can in fact have as a subordinate in the classified structure another 
node label.

For example the AAT [1] has:

furnishings
      <furnishings by form and function>
           <coverings and hangings>
                <coverings and hangings by general type>
                     coverings
                     hangings

where the values between angle brackets are node labels.

Ron

[1] Art and Architecture Thesaurus 
http://www.getty.edu/research/conducting_research/vocabularies/aat/

At 23:28 6/05/2004, David Menendez wrote:

>Miles, AJ (Alistair)  writes:
>
> >
> > This is a strawman proposal for addition to the SKOS-Core schema:
>[...]
> > Comments on any aspect of this suggestion?
>
>Looks good to me.
>
>Rather than use skos:arrayParent, I might have used a relation in the
>opposite direction:
>
>     c:D a skos:Concept
>       ; skos:prefLabel "People"
>       ; skos:subArray [
>           a skos:Array
>           ; rdfs:label "People by age"
>           ; skos:arrayListMembers ( c:A c:B c:C )
>         ]
>       ; skos:narrower c:A, c:B, c:C
>       .
>
>That's purely a matter of taste, though. I like it because all the
>arrows go the same way in the diagram:
>
>   c:D -skos:subArray-> [] -skos:arrayListMembers-> [] -rdf:first-> c:A
>
>(Less importantly, "narrowerArray" or just "array" might be better than
>"subArray", and "members" might suffice for "arrayListMembers")
>
>
>As far as semantics go, we can just declare that skos:subArray implies
>the appropriate skos:narrower/skos:broader relations. There's no
>widely-practiced machine-readable way to declare this in the schema, but
>it's easy enough to put something like this in the specification:
>
>   forall C1, C2.
>     (exists A, L. skos:subArray(C,A) and
>                   skos:arrayListMembers(A,L) and
>                   member(L,C2))
>     => skos:narrower(C1,C2)
>
>   forall L, I. rdf:first(L,I) => member(L,I)
>   forall L, L2, I. (rdf:rest(L,L2) and member(L2,I)) => member(L,I)
>--
>David Menendez <zednenem@psualum.com> <http://www.eyrie.org/~zednenem/>

Ron Davies
Information and documentation systems consultant
Av. Baden-Powell 1  Bte 2, 1200 Brussels, Belgium
Email:  ron@rondavies.be
Tel:    +32 (0)2 770 33 51
GSM:    +32 (0)484 502 393



