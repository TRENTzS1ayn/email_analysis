docno="lists-015-3106115"
received="Mon Feb 10 22:53:23 2003"
isoreceived="20030211035323"
sent="Mon, 10 Feb 2003 22:53:23 0500"
isosent="20030211035323"
name="Dan Brickley"
email="danbri@w3.org"
subject="Re: Call for a DotGNU/W3C RDF API  (was Re:GPL relicense for Euler (was Re: call for alpha testers EulerSharp for dotgnu/pnet))"
id="20030211035323.GA18775@tux.w3.org"
charset="usascii"
inreplyto="Call for a DotGNU/W3C RDF API  (was Re:GPL relicense for Euler (was Re: call for alpha testers EulerSharp for dotgnu/pnet))"
expires="1"

To:public-esw@w3.org


for info, b/g context re rdf api discussions...


attached mail follows:

Dear Stephen,

--- Stephen Compall <s11@member.fsf.org> wrote:
> On Sunday 09 February 2003 03:15 am, James Michael DuPont wrote:
> > But the n3 parser for example, that would be good as part of the
> > dotgnu.rdf native implementation. I dont know if we can include w3c
> > licensed code as part of the dotgnu project. Can you give me
> > permission to dual license it? Disjunct under the GPL and under the
> > w3c?
> 
> What does it mean to say a license is "compatible with the GPL".
>  
> It means that the other license and the GNU GPL are compatible; you
> can 
> combine code released under the other license with code released
> under 
> the GNU GPL in one larger program. 

I completely agree with you, and see you interpretation as correct,
my questions were not informed. After I had posted the questions,
Danbri and I had discussed this issue futher on the RDFIG chat. 

It seems that the license that I had copied from the Euler Webpage(and
put into the "COPYING" file in the Distribution) was out of date, and
has now been replaced by the up to date and revised W3C license. Before
it contained the following statements (Which can still be found in the
archive, I will remove them on then next release):

[[
1. Redistributions of source code must retain the above copyright
notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice,
   this list of conditions and the following disclaimer in the
documentation
   and/or other materials provided with the distribution.
]]

Of course these has caused me some concern, because using that code in
a GPLed project would of course be in violation of term 1.

But that is all resolved now!

I had a particular reason to ask about Dual Licensing :
As a (L)GPLed project, we can include W3C code, and it is not different
than a large industrial company deciding to use the w3c code in a
non-free manner. 

But my question of dual licensing has also another aspect, the one of
our changes going back to the W3C, and maybe being used by such
companies in a non-free manner. Unlike some who "Hit and Run" (or was
that "Embrace and Extend"?) standard technology for their own self
serving gains, I suggest that we choose to give back to the W3C some of
our changes so that others may be compatible with us.

Specifically, I propose that we (the dotgnu project who I have put back
on the cc) submit officially our Dotgnu.rdf interface (Which is
inspired from redland) back the w3c as a proposed C# api. This way, we
can even provide LGPLed implementation of such code, but also be
compatible with non-free implementations. The ECMA Standard IL and the
DotGNU system in particular will allow for many different
implementations of the RDF Libraries, all with varying pluses and
minuses. 

But behind the concept of interfaces, we can have have many different
implementations. That is where the DOTGNU project can fit in.

The DotGNU project should have IMHO a particular importance to the W3C,
it will support in the long term Perl and Python via Parrot and Java as
well, which Many W3C projects use.

When the Parrot(python/perl) and DotGNU projects finally meet in the
far future, then it should also in the far future to compile TimBL's
CWM and have it use a RDF interface written in another language. The
code written in Python/Parrot talking to for example a C#
implementation of the RDF API. 

On the other side, we should be able to have simple implementations of
the n3 parser from Euler for example that just implement the most basic
axioms of the n3 parsing. This too should be possible to derive from
this proposed API. 

My current issue with the huge number of RDF APIS right now is that the
customer and end user is forced to choose, before they even know all
the facts. IMHO, We who have taken the time to look into this
technology have the responsibility to provide a better insulation from
the underlying implementation. 

Therefore I suggest that we also look into the other APIS available,
Jena, Redfoot, Mozilla, RDFLib, putting together a working group of
DotGNU members and W3C contributors so that we can agree on a core API
for RDF in the future. That will be defined as a set of interfaces,
like the DOM so that the users have the freedom of choice.

Does anyone else support this idea? Please respond! :)

Mike

=====
James Michael DuPont
http://introspector.sourceforge.net/

__________________________________________________
Do you Yahoo!?
Yahoo! Mail Plus - Powerful. Affordable. Sign up now.
http://mailplus.yahoo.com



