docno="lists-015-3993207"
received="Thu Jun 26 18:39:55 2003"
isoreceived="20030626223955"
sent="Fri, 27 Jun 2003 00:35:57 +0200"
isosent="20030626223557"
name="Danny Ayers"
email="danny666@virgilio.it"
subject="RE: Explaining why we use RDF instead of just XML"
id="BKELLDAGKABIOCHDFDBPOELMDCAA.danny666@virgilio.it"
charset="iso-88591"
inreplyto="350DC7048372D31197F200902773DF4C0250248E&#64;exchange11.rl.ac.uk"
expires="1"

To:"Matthews, BM \(Brian\)"<B.M.Matthews@rl.ac.uk>,"'Charles McCathieNevile'"<charles@w3.org>
Cc:<public-esw@w3.org>,"RDF Interest Group"<www-rdf-interest@w3.org>,<bmm@inf.rl.ac.uk>



danbri - it did make sense, and I particularly liked the last couple of
paragraphs: future proofing and the contrast between tag soup and a happy
family of compatible data.

> my 2'penn'oth
>
> I think that this comes near the nub of the question around
> interoperability using RDF and its relationship to XML Schema.
>
> Many organisations are spending a lot of time taking
> the opposite approach to Charles by carefully crafting XML Schemas
> for their own use (e.g. see the UK e-Gif Schema repository
> http://www.govtalk.gov.uk/schemasstandards/schemasstandards.asp),
> reusing components of other schemas and then wanting to use them
> for interchange.  Combination of elements from different
> schemas is then controlled via namespace - and as they are keen on
> syntactic validation only in pretty restricted circumstances
> (avoiding "the unpredictable tag soup").  From this PoV, the
> free mixing of vocabulary advocated by Charles and Dan looks
> pretty anarchic and uncontrollable.
>
> There is a challenge to RDF here to convince them:
>  - its more than just the namespace (Trent's question)
>  - it can help enable the interoperability required of the XML Schemas
>    when they get into difficulties through conflicting XML representations
>    of the same thing.  But they will still want the structural
>    framework of XML Schema (or similar).
>
> SWAD WP5/6 is looking at this.

There was an interesting development around the world of blog/RSS not long
ago, where some of the RSS 2.0 brigade started inserting full-content XHTML
into their feeds. The people playing with this were generally very smart
professionals with considerable web/XML experience. It's interesting in one
sense because it means you can XPath on the whole lot together (cargo cult
RDF?). But interesting too in a non-tech sense, because there seemed to be a
tacit assumption that namespace qualification also brought magic
interpretation. Ok, so this newsreader world isn't far from the browser
world, and they were talking about XHTML, and I'm sure some folks would be
aware of what was happening, etc etc, but I don't recall seeing a single
remark on how the agent was expected to support the stuff that had been
inserted. It was simply expected to work, i.e. display appropriately in a
newsreader, and (ka-zaaam!) most of the time it did. It was only a week or
two later that comments started appearing along the lines of "I got a
conflict with the display of my <description> content" (I believe these
problems were quickly ironed out, but I somehow doubt whether there's a
formal spec to say how). Adoption of XHTML content in feeds by the
developers was rapid (Sam Ruby's blog was something of a hub once more, some
refs at [1]).

Ok, this was all occurring in a scruffy side of the industry, but I still
think it's quite telling - for blogging apps this is still the mainstream,
and a lot of the people involved use XML in their day jobs. My (entirely
subjective) reading now is that there were probably two assumptions made :
that separating the material using namespaces was considered enough to make
things work; that the data would never be used outside of the immediate
(browser-like newsreader) context. Both of which could represent obstacles
to explaining the joys of RDF. Good luck with WP5/6!

Cheers,
Danny.

[1] http://www.intertwingly.net/blog/1299.html



