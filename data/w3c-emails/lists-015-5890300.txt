docno="lists-015-5890300"
received="Sun May  2 16:25:51 2004"
isoreceived="20040502202551"
sent="Sun, 2 May 2004 22:25:38 +0200"
isosent="20040502202538"
name="Thomas Bandholtz"
email="thomas@bandholtz.info"
subject="Re: URI policy for thesaurus concepts"
id="101e01c43083$a1d1d970$fe78a8c0@Thomast40"
charset="iso-88591"
inreplyto="20040501145802.GC20642&#64;homer.w3.org"
expires="1"


To:<public-esw-thes@w3.org>,<public-esw@w3.org>
Cc:"Miles, AJ (Alistair)"<A.J.Miles@rl.ac.uk>


Dan: 
> Sure, both are possible and will remain so. Our focus here, though,is
> on the machine readable aspect (and on making machine interfaces that
> are adequate to support an interesting and usable range of human
> interfaces).

That's exactly what I am looking for. Especially I am interested in a Web
Service solution.

Thomas: 
> > The consequence is that a single URL is not enough.
Dan: 
> That doesn't necessarily follow. HTTP supports content negotiation
> (see http://www.w3.org/Protocols/ ftp://ftp.isi.edu/in-notes/rfc2616.txt)
> which allows multiple representations of the same thing to be made
> accessible via a common URI.

I found http://www.w3.org/Protocols/rfc2616/rfc2616-sec12.html:
"Server-driven negotiation has disadvantages:
      1. It is impossible for the server to accurately determine what
         might be "best" for any given user, since that would require
         complete knowledge of both the capabilities of the user agent
         and the intended use for the response (e.g., does the user want
         to view it on screen or print it on paper?)."

IMHO we only could think about server-driven negotiation here.
This does not sound very encouraging ...
Again, I would focus on a Web Service which at least has a WSDL, so the
client can see what she will get back.

Dan:
> We can also use XML namespace mixing to make multiple kinds of
> information available within a common piece of markup (eg. RDF inside
> XHTML, or RDF styled into XHTML using XSLT). There are a lot of options
> to explore.

Well, here we have the SKOS Core RDF (2004-03-26) and the SKOS API WSDL/XML
Schema (2004-04-29) serializations, or  namespaces.
I thought about using the RDF in the Web Service, but API brings its own
model, which is not fully consistent with the RDF semantically!

Is this really what we need?

Would be nice to have a *complete* information model independent of any
syntax (as they have it in ISO19115, where the XML Syntax is a second
standard ISO19139).


Thomas



