docno="lists-016-10029292"
received="Wed Jan 15 18:04:19 2003"
isoreceived="20030115230419"
sent="Wed, 15 Jan 2003 17:32:50 0500"
isosent="20030115223250"
name="Martin Duerst"
email="duerst@w3.org"
subject="Re: [WSTF] My view... [long]"
id="4.2.0.58.J.20030115170619.06b58850@localhost"
charset="usascii"
inreplyto="PNEHIBAMBMLHDMJDDFLHCENBGDAA.aphillips&#64;webmethods.com"
expires="1"


To:"Addison Phillips [wM]"<aphillips@webmethods.com>,<public-i18n-ws@w3.org>
Cc:<debasish@us.ibm.com>


Hello Addison,

At 16:09 03/01/13 -0800, Addison Phillips [wM] wrote:

>Folks:
>
>This email outlines my approach to the locale/language issue we discussed 
>in the last telecon. It is somewhat long.
>
>I consider "locale" to be an environment setting or settings that govern 
>how data is (to be) processed. Language preference may either be an aspect 
>of "locale" or may be a separate environment setting.

And 'locale' also has several different aspects. That lets me
generally favor a hierarchy of

   i18n context
      - language
      - date format
      - number format
      - sort order
      - ...

rather than

   language
   locale
     - date format
     - number format
     - sort order
     - ...


>In traditional software, the developer doesn't need to explicitly obtain a 
>Locale object or setting in order to write internationalized code. The 
>default behavior of locale-aware functions obtain and use the locale from 
>the system environment. Yes, the developer must call the correct functions 
>or methods, but s/he must only obtain a locale when the desire is to 
>override the user's preference (the default).

I guess one important point may be that developers should not have to
care about language/locale issues when these are marginal (e.g. language
of error messages), but that there may be an advantage to force them
to have to think about such issues explicitly if they are central
to the application (e.g. currency conversions in some cases).


>---
>Aside: These last two scenarios Deb described in an off-list email last 
>week. These are "runAsClient", "runAsSpecified" and "runAsServer" 
>scenarios, Deb.
>---

Deb or Addison, could you send these scenarios to the list or to Kentaro
for inclusion in the document?


>I'm on record as favoring tags over an XML structure, but I'm willing to 
>be persuaded (and try persuasion ;-)).

I think the question of whether to use a tag or a (simple) structure
is a syntax question, and thus could work both ways. A more important
question in my view is whether we want the solution to effectively
have a limited number of values (e.g. language x country (x variant)),
or whether we want to be open-ended, and how the tag/simple structure
gets associated with the actual data for the language/locale.


>I have use cases galore from webMethods that relate to the various aspects 
>of the above.

Please send them in so that we can integrate them in our doc.


>Some things to think about:
>
>--RFC3066 language tags (that is xx-YY) are sufficient for identifying 
>Java locales and possibly C# CultureInfos, but not for POSIX, C/C++, Mac, 
>and other native programming environments.

Can you tell us what's missing in the later cases? For Posix/C/C++,
clearly the encoding is missing, but with XML, this falls out of the
equation. Anything else?


Regards,     Martin.



