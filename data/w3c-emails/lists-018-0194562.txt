docno="lists-018-0194562"
received="Wed May 15 15:26:22 2002"
isoreceived="20020515192622"
sent="Sun, 12 May 2002 16:09:47 0400 (EDT)"
isosent="20020512200947"
name="Dan Holmsand"
email="dan@eyebee.com"
subject="Re: XSLT 2.0 light?"
id="3CDECA0F.9020305@eyebee.com"
charset="usascii"
inreplyto="DFF2AC9E3583D511A21F0008C7E6210602679D6C&#64;daemsg02.softwareag.de"
expires="1"


To:"Kay, Michael"<Michael.Kay@softwareag.com>
CC:public-qt-comments@w3.org

Thanks for the prompt reply!

Kay, Michael wrote:
> Thanks for the comments. You're not alone in finding XML Schema Part 1
> difficult to digest. Clearly in writing specs it's not our job to produce a
> tutorial, but we can certainly bear your comments in mind. In particular, I
> think we probably need to be clearer about how processing happens in the
> absence of a schema: at the moment we rather rely on people knowing that
> this is just a special case of the PSVI, and the specs concentrate on
> describing the general case which is of course much more complex.

I (of course) agree that the spec should not be a tutorial.

On the other hand, it is quite handy to be able to tell people to 
consult the spec when they've made a mistake. You can do that with 
XSLT/XPath 1 (and, when the time comes, with the XSLT part of the new 
spec). But you can't very well tell people to go have a look at e.g. 
www.w3.org/TR/query-semantics before they ask any more stupid questions. 
Can you?

> I think some features of the XPath 2.0 type system are things you are just
> going to have to live with. The introduction of sequences, I think, brings
> many benefits. The expansion from the three scalar types (boolean, double,
> and string) of XPath 1.0 to the 19 primitive types of XML Schema is a larger
> expansion than many of us would have liked, but many of the primitive types
> will hardly ever be used so you will be able to ignore them most of the
> time. Complex types arise only when using schemas, and again I hope we can
> ensure that when you don't use a schema, you don't really need to be aware
> of them.

This is where we don't agree. I have never really bought the "you don't 
have to pay for what you don't use" argument when it comes to C++ 
(another incredibly complex language): before you know it, you have to 
understand or maintain other people's code. If they use the complexities 
you've decided to do without, you have to pay anyway. I fear the same 
will apply to XPath 2.

> There will probably be a conformance level in XSLT 2.0 that doesn't require
> schema support; defining conformance levels is something we have not yet
> tackled.

That's really good to hear! I just hope that the conformance level isn't 
just provided for the benefit of lazy implementors, but for lazy users 
as well (and by lazy I mean those who can't/don't want to learn 
everything about XML Schema and its data types).

For example: A "disable-schema='true'", or "version='2.0-light'", 
instruction in XSLT would tell me that this is an XSLT stylesheet that I 
can understand, and it is a requirement that I can communicate to others.

/dan



