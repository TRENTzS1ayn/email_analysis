docno="lists-018-11279063"
received="Thu Jul 17 05:14:38 2003"
isoreceived="20030717091438"
sent="Thu, 17 Jul 2003 11:13:40 +0200 (MEST)"
isosent="20030717091340"
name="Oliver Becker"
email="obecker@informatik.huberlin.de"
subject="RE: [XSLT] 2.9 Error Handling"
id="200307170913.h6H9Decl025360@mail.informatik.huberlin.de"
charset="usascii"
inreplyto="[XSLT] 2.9 Error Handling"
expires="1"


To:public-qt-comments@w3.org,Michael.Kay@softwareag.com


Mike,

> > would you please explain the reason for having recoverable 
> > errors? (Yes, they are already in XSLT 1.0, but nevertheless ...)
> 
> This is not something we have reviewed recently, and perhaps we should,
> though it would be difficult now to change the rules.
> 
> I can't claim to give a historical answer to the question, but my
> understanding is that the primary reason was a feeling that client-side XSLT
> should try hard to avoid run-time errors and use fallback behaviour instead,
> while other environments needed a more conventional approach to error
> detection and reporting.

Yes, and the fallback behaviour for HTML implemented in all browsers
on the market led to lots and lots invalid HTML pages, and every browser
displays something different ...
(Ok, this analogy isn't really true, since the XSLT spec defines clearly
what kind of fallback has to happen.)

However, I am not really convinced that the spec needs this freedom.
The number of occurrences of recoverable errors should be reduced to
a minimum (ideally to zero), either by making them non-recoverable or
by stating that the fallback behaviour must be used (which means that
the term "error" in such a case would disappear).

A compromise could be a little bit more control over the behaviour of
the implementation. Currently AFAIK there is no requirement that an
implementation either has to report all recoverable errors or has to
recover from them. It can freely choose as the case arises.

> You can be fairly sure that when a W3C specification allows implementations
> to differ, it was because the working group had difficulty getting
> implementors to agree with each other, not because they thought that
> allowing differences was intrinsically a good idea.

I can imagine that finding an agreement can be a pain.
However, I would appreciate if the WG could review this topic and
find a stricter rule than the current one.

Oliver Becker


/-------------------------------------------------------------------\
|  ob|do        Dipl.Inf. Oliver Becker                             |
|  --+--        E-Mail: obecker@informatik.hu-berlin.de             |
|  op|qo        WWW:    http://www.informatik.hu-berlin.de/~obecker |
\-------------------------------------------------------------------/



