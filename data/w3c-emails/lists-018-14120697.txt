docno="lists-018-14120697"
received="Tue Jun 24 14:02:51 2003"
isoreceived="20030624180251"
sent="Tue, 24 Jun 2003 14:02:50 0400"
isosent="20030624180250"
name="Liam Quin"
email="liam@w3.org"
subject="Re: rescue; error recovery facilities needed"
id="20030624140250.C5071@w3.org"
charset="usascii"
inreplyto="DFF2AC9E3583D511A21F0008C7E62106073DCF3C&#64;daemsg02.softwareag.de"
expires="1"

To:public-qt-comments@w3.org



On Mon, Jun 23, 2003 at 04:56:47PM +0200, Kay, Michael wrote:
> I think the data typing is needed when handling structured data
> applications, and is not needed (much) when handling narrative text.

It can also be very useful in the case where you're picking "fields"
out of narrative text -- e.g. where in the middle of a news story
stock ticker symbols are handled separately, with a database lookup
to insert the company name and (for online presentation) maybe a
link to their web site.  Another example might be a part number
mentioned in a repair manual.  Or a date in a history text.

Demand for typing in XML came from many communities, not just
(for example) database people.

> Many people seem to be under the impression that XQuery is designed to
> handle data and XSLT is designed to handle text. This is not the case. Both
> languages have explicit requirements to handle the full spectrum of XML
> applications.

Yes.

I think a lot of experimentation is needed before there's good shared
understanding of the benefits of typing, and whether they were worth the
price... "colour all headings green", "lists should be collapsible"
are attractive but maybe weak use cases.  The biggest advantages that
I see, though, are (1) having a family of specs that fit together well,
and (2) having the XSLT and XML Query processors detect more errors
before they happen.  Scripting languages (e.g. Perl) are also moving
in this direction.

Liam

-- 
Liam Quin, W3C XML Activity Lead, liam@w3.org, http://www.w3.org/People/Quin/



