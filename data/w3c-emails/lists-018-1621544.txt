docno="lists-018-1621544"
received="Mon Nov 25 07:13:38 2002"
isoreceived="20021125121338"
sent="Mon, 25 Nov 2002 13:13:23 +0100"
isosent="20021125121323"
name="Kay, Michael"
email="Michael.Kay@softwareag.com"
subject="RE: F&amp;O Nov 15 draft"
id="DFF2AC9E3583D511A21F0008C7E621060453DDE8@daemsg02.softwareag.de"
charset="iso-88591"
inreplyto="F&amp;O Nov 15 draft"
expires="1"


To:"'Ashok Malhotra'"<ashokma@microsoft.com>, David Carlisle<davidc@nag.co.uk>,public-qt-comments@w3.org


> 4 Constructor Functions
> 
> 
>   The semantics of the constructor function xs:TYP(item) are identical
>   to the semantics of cast as xs:TYP (item).
> 
>   having introduced this functional syntax for casting (which 
> is a good
>   thing and potentially reduces the dependence on W3C-schema 
> as one could
>   imagine other namespaces providing types) one could 
> consider dropping
>   the "cast as" syntax, I see this is flagged as a possibility
>   elsewhere, but wanted to comment that this would appear to 
> be a useful
>   simplification.
> 
> [AM]  We've discussed this and there is some support for it but not
> (yet?) unanimous consent.  I think it would be an improvement.


The last time we discussed this the only remaining obstacle to removing
"cast as" was the problem of user-defined types in no namespace. For
example, a user-defined type called "document". Removing "cast as" is
therefore dependent on sorting out the issues concerning the default
namespace for functions. 

Constructor functions mean that the name categories of types and functions,
which were previously disjoint, now overlap, and retaining "cast as"
provides a way of resolving any conflicts this may cause; the problem of
unprefixed names is the most acute example of this.

Michael Kay



