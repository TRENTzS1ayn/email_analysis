docno="lists-018-16380999"
received="Mon Mar 24 16:05:38 2003"
isoreceived="20030324210538"
sent="Mon, 24 Mar 2003 22:04:51 +0100"
isosent="20030324210451"
name="Kai Gro?johann"
email="kai.grossjohann@uniduisburg.de"
subject="Re: FTS comments"
id="84r88wiih8.fsf@lucy.is.informatik.uniduisburg.de"
charset="usascii"
inreplyto="se7f1931.061&#64;crs.loc.gov"
expires="1"

To:"Pat Case"<PCASE@crs.loc.gov>
Cc:<public-qt-comments@w3.org>



"Pat Case" <PCASE@crs.loc.gov> writes:

> From where I sit, the first thing we need is full-text querying in
> XQuery encompassing functionalities which currently exist.
>
> As a librarian and expert searcher, I find even stemming algorithms
> fail me often enough that I want to retain the crude, but totally
> controllable predictable wildcards. I build better queries with
> wildcards then I can with stemming, because stemming doesn't allow me to
> decide which related words to include on a word by word basis. Just
> because it is linguistically related doesn't mean it returns the results
> I want. Stemming is black box which works against expert searchers as
> often as it work for them. We feel the same about scoring and ranking.
>
> Different users benefit from different tools. I wouldn't expect a
> novice user to use wildcards or to be so annoyed  with scoring and
> ranking.

Thank you for the education.  I'm not an expert searcher, it never
occurred to me that stemming could be a problem in this way.

> Which doesn't mean I wouldn't welcome the likes of a linguistic parser.
>  It would be a boon to all end users. Are you recommending we add a use
> case which calls an implementation-defined linguistic parser (as we did
> for stemming) or are you recommending more than that?

It is very close.  I am suggesting to add a use case which does
"linguistic phrase search" and leave it to the implementation whether
they use a linguistic parser or map it to proximity search or they ask
the Oracle of Delphi.

-- 
A preposition is not a good thing to end a sentence with.



