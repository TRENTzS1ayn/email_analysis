docno="lists-018-2719390"
received="Thu Oct 24 13:57:07 2002"
isoreceived="20021024175707"
sent="Thu, 24 Oct 2002 13:56:30 0400"
isosent="20021024175630"
name="Jonathan Robie"
email="jonathan.robie@datadirecttechnologies.com"
subject="Re: XSchema integration, responsiveness, and a good  solution     to   the prob..."
id="5.1.0.14.0.20021024105455.050a0f58@ncmail.datadirecttechnologies.com"
charset="usascii"
inreplyto="48.13d0af30.2ae910e9&#64;aol.com"
expires="1"


To:Svgdeveloper@aol.com,public-qt-comments@w3.org


At 05:01 AM 10/24/2002 -0400, Svgdeveloper@aol.com wrote:
>In a message dated 18/10/2002 20:43:18 GMT Daylight Time, 
>jonathan.robie@datadirect-technologies.com writes:
>
>>W3C XML Schema is the only typed schema language that has been widely
>>adopted in commercial products.
>
>Jonathan,
>
>It hardly seems credible that you would be unaware of W3C XML Schema's 
>limitations and flaws, nor unaware of the controversy it causes in the 
>user community.

Hi Andrew,

As you know from prior exchanges, I'm quite aware of the complexity, 
limitations, and flaws of XML Schema, and of the controversy that is loud 
in some parts of the user community, but not in others. For all it's flaws, 
XML Schema is good enough to be very useful, and it just happens to be the 
only typed schema language that is supported by the tools that most people 
use. Therefore, I think it's pretty clear that we need to support at least 
XML Schema.

>Vendor lock-in has, rightly, received much criticism from the user 
>community. It is sad to see standards-body-lock-in rear its ugly head 
>throughout the W3C specifications in the form of what I previously termed 
>"schema fascism" by which I mean the forced imposition of W3C XML Schema 
>in diverse W3C specifications. I suggest that a more acceptable approach 
>would be for W3C specifications to allow the use of multiple schema 
>languages, ideally in a modular way.

I think that it's essential for a query language to know its primitive 
types, such as integers, doubles, strings, etc, and the type system of the 
query language should match the type system of the data. You wouldn't 
design a DDL with one set of types and a DML with another set of types. 
Therefore, I think it's important to base our type system W3C XML Schema 
Datatypes (XML Schema Part 2 ). These types are already in use by a wide 
variety of standards, and they are also the types most commonly used with 
RELAX-NG. Tim Bray's suggestion to ship only Basic XQuery would allow us to 
use only these types.

For complex types, the same argument holds, but only to a certain degree. 
Ideally, we would like to have one schema language. The real world is not 
like that - we already have DTDs and merely-well-formed XML in addition to 
XML Schema. It's quite possible that RELAX-NG will also get some market 
share. I think we should leave the door open for defining mappings in 
RELAX-NG as well, but this is not work that we will be able to do in 
Version 1.0, and it is not at all clear that anybody is going to implement 
XQuery on the basis of RELAX-NG until RELAX-NG gains more commercial market 
share.

Jonathan



