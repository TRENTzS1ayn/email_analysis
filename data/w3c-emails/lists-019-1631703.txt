docno="lists-019-1631703"
received="Wed May 14 03:55:31 2003"
isoreceived="20030514075531"
sent="Wed, 14 May 2003 09:54:10 +0200"
isosent="20030514075410"
name="Tobias Reif"
email="tobiasreif@pinkjuice.com"
subject="Re: node equality: fn:node-equal()"
id="3EC1F622.6040306@pinkjuice.com"
charset="us-ascii"
inreplyto="5C39F806F9939046B4B1AFE652500A3A0509B38D&#64;RED-MSG-10.redmond.corp.microsoft.com"
expires="-1"


To: Michael Rys<mrys@microsoft.com>
CC:public-qt-comments@w3.org


Michael Rys wrote:

> How do you define node equality?


Just as fn:deep-equal() already does, without recursing down the tree, I 
would think.

> The whole reason for fn:deep-equal() is to
> provide the most common from of node equality.


But if I want to test two nodes for equality, and they have five 
thousand children, then using fn:deep-equal() would do 5001 comparisons 
instead of one (where one comparison includes attributes etc).

> Any other form in my
> opinion should be written by the user him-/herself.


As I said, I could do it by testing various aspects of the pair, thus 
writing my:node-equal(), but I'd prefer to have it available in the 
language.

Comparing two nodes for equality is even more basic, general, and useful 
as is fn:deep-equal(). I could write a lot myself, but I also could 
design and implement the whole lang myself.

> Having a
> proliferation of equality functions in the spec seems not appropriate
> (as David C. pointed out).


I think something like a standard library could be a good idea (see 
David's posts): A small language with a sufficiently comprehensive 
library of utility functions (etc).

Tobi

-- 
http://www.pinkjuice.com/



