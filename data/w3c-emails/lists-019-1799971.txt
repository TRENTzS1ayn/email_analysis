docno="lists-019-1799971"
received="Wed May 14 22:46:20 2003"
isoreceived="20030515024620"
sent="Wed, 14 May 2003 19:46:13 -0700"
isosent="20030515024613"
name="Michael Rys"
email="mrys@microsoft.com"
subject="RE: node equality: fn:node-equal()"
id="5C39F806F9939046B4B1AFE652500A3A05467B51@RED-MSG-10.redmond.corp.microsoft.com"
charset="us-ascii"
inreplyto="node equality: fn:node-equal()"
expires="-1"


To:"Tobias Reif"<tobiasreif@pinkjuice.com>
Cc:<public-qt-comments@w3.org>


And why can't you write the function yourself? 

I am not convinced yet that such a function has a general enough value. 

Also note that the more functions the WG is defining, the longer it will
take until implementations will have fully conformant implementations. 

I would much rather have an incremental development of the function
library and continue to add functions over time. This means that you
need to postpone functions that have less general value for a later
version.

And your function below for me falls into the postponing category for
the following reasons:

1. I still don't fully understand the semantics
2. The semantics that I infer from your description (shallow-equal) is
in my opinion both cheap enough to write yourself and not general enough
a function to be included.

Best regards
Michael



> -----Original Message-----
> From: Tobias Reif [mailto:tobiasreif@pinkjuice.com]
> Sent: Wednesday, May 14, 2003 0:54 AM
> To: Michael Rys
> Cc: public-qt-comments@w3.org
> Subject: Re: node equality: fn:node-equal()
> 
> Michael Rys wrote:
> 
> > How do you define node equality?
> 
> 
> Just as fn:deep-equal() already does, without recursing down the tree,
I
> would think.
> 
> > The whole reason for fn:deep-equal() is to
> > provide the most common from of node equality.
> 
> 
> But if I want to test two nodes for equality, and they have five
> thousand children, then using fn:deep-equal() would do 5001
comparisons
> instead of one (where one comparison includes attributes etc).
> 
> > Any other form in my
> > opinion should be written by the user him-/herself.
> 
> 
> As I said, I could do it by testing various aspects of the pair, thus
> writing my:node-equal(), but I'd prefer to have it available in the
> language.
> 
> Comparing two nodes for equality is even more basic, general, and
useful
> as is fn:deep-equal(). I could write a lot myself, but I also could
> design and implement the whole lang myself.
> 
> > Having a
> > proliferation of equality functions in the spec seems not
appropriate
> > (as David C. pointed out).
> 
> 
> I think something like a standard library could be a good idea (see
> David's posts): A small language with a sufficiently comprehensive
> library of utility functions (etc).
> 
> Tobi
> 
> --
> http://www.pinkjuice.com/



