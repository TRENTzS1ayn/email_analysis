docno="lists-019-2345926"
received="Tue May 20 09:18:03 2003"
isoreceived="20030520131803"
sent="Tue, 20 May 2003 15:14:23 +0200"
isosent="20030520131423"
name="Kay, Michael"
email="Michael.Kay@softwareag.com"
subject="RE: implementation defined and implementation-dependent"
id="DFF2AC9E3583D511A21F0008C7E62106073DCE55@daemsg02.software-ag.de"
inreplyto="implementation defined and implementation-dependent"
expires="-1"


To:David.Pawson@rnib.org.uk,public-qt-comments@w3.org


> There appears to be an inconsistancy between 
> the use of implementation-defined and same, without the 
> hyphenation. I think the functions document uses it without 
> hyphenation, others are more consistant.
> 
> Rather more worryingly, a v.quick count of that string produces:
> 
> In serialisation - 9
> In data model -2
> In functions - 20
> In xpath 19
> in xslt 50+ 
> 
> instances of one or the other.
>   Is it really that fluid/up to the implementor.
> 

Appendix E of the XSLT 2.0 specification
http://www.w3.org/TR/xslt20/#implementation-defined-features
lists 34 implementation-defined features, each individually numbered, so
it's not clear how you did your counting.

Looking through the list of 34 items, they all look reasonable to me. Most
of them are things that were implementation-defined in XSLT 1.0, or are
similar to things that were implementation-defined in XSLT 1.0. 

Broadly speaking, the implementation-defined features in XSLT fall into five
categories:

(a) the API for invoking the XSLT transformation and accessing its results
(b) facilities deliberately provided for extensibility - the experience of
XSLT 1.0 has shown that such facilities, provided in a controlled way, can
greatly assist the adoption of the technology
(c) error handling
(d) interaction between the XSLT processor and its environment (e.g.
interpretation of URIs)
(e) localisation (e.g. collating sequences and date formats)

In some other specs, there is an additional category, 

(f) arithmetic precision

All these features have been left implementation-defined for a good reason,
namely because we think it is warranted by variability in the user
requirements or in implementation platforms.

If you can identify specific things that you think should not be
implementation-defined, then we can review the decision. It's hard to see
what you expect us to do with a general observation that the number of
implementation-defined features is too high. 

Michael Kay



