docno="lists-019-2838661"
received="Mon May 26 14:51:27 2003"
isoreceived="20030526185127"
sent="Mon, 26 May 2003 11:50:42 -0700"
isosent="20030526185042"
name="Howard Katz"
email="howardk@fatdog.com"
subject="RE: FW: different AST's"
id="NFBBKEMEJKFJGCPOOKHCKENFDFAA.howardk@fatdog.com"
charset="Windows-1252"
inreplyto="OF91F6E0A8.00603FBC-ON85256D32.006105FE-85256D32.0063030D&#64;lotus.com"
expires="-1"

To:<scott_boag@us.ibm.com>
Cc:<public-qt-comments@w3.org>,<public-qt-comments-request@w3.org>


Right. I actually throw away everything myself except the leaves, which
makes it extremely easy to see whether you've actually built the structure
you think you have, given a particular query. In the extreme case I believe
it's the difference between an AST and a parse tree (tho I never remember
which is which). I just wasn't sure why some of your intermediates were kept
and others not.
Howard
  -----Original Message-----
  From: scott_boag@us.ibm.com [mailto:scott_boag@us.ibm.com]
  Sent: Monday, May 26, 2003 10:52 AM
  To: Howard Katz
  Cc: public-qt-comments@w3.org; public-qt-comments-request@w3.org
  Subject: Re: FW: different AST's



  > Why are the AST's emitted by the online grammar checkers at the XML
Query
  > website different from those produced by walking the formal BNF's
manually?
  > The former omit a lot of the intermediate productions. How come?

  When we make the JavaCC/JJTree parser we spec certain nodes as "void" in
certain contexts, meaning, they don't have real meaning in the AST, so don't
construct them.  I would like to void more nodes, actually.   It's really
only a means of keeping the size of the tree down.

  -scott



