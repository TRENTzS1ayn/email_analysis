docno="lists-019-9184595"
received="Fri Sep  5 17:37:55 2003"
isoreceived="20030905213755"
sent="Fri, 5 Sep 2003 14:38:02 -0700"
isosent="20030905213802"
name="Kevin Jones"
email="kjones@actuate.com"
subject="RE: Xquery grammar question"
id="A1BD4B37957C934C9BCF6619615E41957A5D07@exchange6.actuate.com"
charset="iso-8859-1"
inreplyto="Xquery grammar question"
expires="-1"


To:<scott_boag@us.ibm.com>
Cc:<public-qt-comments@w3.org>,<public-qt-comments-request@w3.org>


Hi Scott,

Here is another round of issues that I found with regard to the 22 August 2003 draft.

1) Seperator should be spelled Separator

2) The QuerySeperator token (DEFAULT and OPERATOR states) is not defined in the spec

3) QName "(" - Why is this token group needed? Isn't the disambiguation of QName "(" from QName "(:" handled by the longest match rule when the '(' is encountered?

4) State changes are mixed in with token groups. How is this reconciled? Aren't token groups expected to be processed in the same state?

5) The following is more thinking out loud than an issue.

Q: Why are the following designated "named terminals" when they might be more easily represented as grammar productions?
SchemaMode ::= "lax" | "strict" | "skip"
SchemaGlobalTypeName ::= "type" "(" QName ")"
SchemaGlobalContext ::= QName | SchemaGlobalTypeName SchemaContextStep ::= QName PITarget ::= NCName VarName ::= QName
A: Because they initiate state changes.

Possible solution: Leave as is or make them productions and add state change in the grammar

Can you think of any other way that this could be handled to make the distinction between lexical analysis and parsing more clear.

6) Can the explicit whitespace designation be removed from the grammar and placed at the lexical level and/or handled by lexical states?

regards,

Kevin Jones



