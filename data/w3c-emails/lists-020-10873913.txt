docno="lists-020-10873913"
received="Tue May  4 07:11:40 2004"
isoreceived="20040504111140"
sent="Tue, 4 May 2004 13:10:05 +0200"
isosent="20040504111005"
name="Jean-Fran?ois Baget"
email="jean-francois.baget@inrialpes.fr"
subject="UC&amp;R draft: 1.31 &ndash;&ndash; Requirement 4.1"
id="038b01c431c8$5b0e71b0$5e16c7c2@inrialpes.fr"
charset="iso-8859-1"
expires="-1"

To:<public-rdf-dawg@w3.org>



About requirement 

> 4.1 Multi-edged Paths 
> A query language must include the ability to match paths through an
RDF graph where the number of arcs > traversed is greater than one, as
well as single one-edge paths. The query language may still only have >
paths of fixed length in the query or may cover paths of variable length
(e.g. transitive closures).

I think we have discussed and agreed on the fact that a query should
include multiple triples (i.e. The query is an arbitrary RDF graph/set
of triples instead of a single atomic triple).

This goes a bit further: Am I right to assume that you intend to match
"variable length triples" such as:

ex:someUrirefSubject (ex:someUrirefProperty)+ _someVariable .

Where _someVariable must be matched to a node being the end of a path of
one or more arcs labelled by ex:someUrirefProperty, the first node of
the path being labelled by  ex:someUrirefSubject .

In that case, should the query be an arbitrary set of "variable length
triples" or just "atomic variable length triples"?

Then, since we already included all the algorithmic difficulty, could it
be interesting to express the "variable length property" by any algebric
expression?

I do not remember this to be discussed in Amsterdam... But it could be
interesting. Any use case that is covered by this?


Jean-Fran?ois Baget

INRIA Rh?ne-Alpes
jean-francois.baget@inrialpes.fr
Tel: 04 76 61 53 27



