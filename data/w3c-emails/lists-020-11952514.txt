docno="lists-020-11952514"
received="Fri May  7 13:52:44 2004"
isoreceived="20040507175244"
sent="Fri, 7 May 2004 12:52:22 -0500"
isosent="20040507175222"
name="Kendall Clark"
email="kendall@monkeyfist.com"
subject="Re: requirement: rdfs query (for lack of a better name...)"
id="20040507125222.A31246@monkeyfist.com"
charset="us-ascii"
inreplyto="p06001f2abcc1781c8390&#64;[10.0.100.76]"
expires="-1"


To: Pat Hayes<phayes@ihmc.us>
Cc: RDF Data Access Working Group<public-rdf-dawg@w3.org>


On Fri, May 07, 2004 at 12:36:27PM -0500, Pat Hayes muttered something about:

> >Uh... RDFS is hardly "one particular flavor of supplementary semantic
> >knowledge". That's about as perverse a description as I can
> >imagine.
> 
> Why? Seems to me to be exactly on the mark. 

I guess I misread (?) Rob to be saying "why RDFS rather than something
else", that is, that my asking for RDFS query was arbitrary. If that wasn't
his objection, then I'm not sure what it was. And that objection seems
perverse (epistemically?) to me. (As the RDFS spec says, it "describes how
to use RDF to describe RDF vocabularies". That's hardly arbitrary.)

But, yeah, perhaps I just misread?

> >Besides, if you're worried about "killing off" OWL, that's an
> >argument to do RDFS in 1.0 and OWL in 2.0, not an argument not to do
> >RDFS at all.
> 
> The point is, if we allow inference, where do we stop? 

Well, insofar as "RDFS" defines a natural stopping point, I'd suggest we
stop there for our first version. If it doesn't, then I'm not sure where to
stop, but that doesn't seem a question that's impossible to answer in a
principled way. 

> Seems to me that querying is one thing, inference another.

Yeah, I don't dispute that. But, and here I'll probably sound like Rob,
users aren't always aware of that distinction; in fact, I suspect they don't
care about it. That leaves us as a WG in a tricky spot.

> BUt if we must involve inference, let me suggest a methodological 
> strategy: we treat it as 'direct' retrieval from a virtual graph 
> which is an appropriate inferential 'closure' (eg under transitivity 
> of subClassOf). 

I think that's a perfectly good design decision following out of my proposed
requirement. (In fact, I might have been made happy by a wide range of such
design decisions, including some kind of happy-making sugar for RDFS
queries/inferences.)

> This keeps the discussion clean since we can 
> distinguish retrieval-from-graph issues separate from 
> which-graph-retrieved-from issues, and it helps keep inference 
> strategy issues out of the way. It also BTW gives engine designers 
> more leeway.

This smells like a bit of progress, that is, helpful clarification of my
requirement. Thanks.

Kendall Clark



