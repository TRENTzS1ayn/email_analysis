docno="lists-020-12352125"
received="Tue May 11 12:51:43 2004"
isoreceived="20040511165143"
sent="Wed, 12 May 2004 01:51:36 +0900"
isosent="20040511165136"
name="Yoshio Fukushige"
email="Fukushige.Yoshio@jp.panasonic.com"
subject="Re: On the treatment of Design Objectives?"
id="026d01c43778$38efcf60$1a48b4db@delldell"
charset="iso-2022-jp"
inreplyto="1084293026.32025.435.camel&#64;dirk"
expires="-1"


To:"RDF Data Access Working Group"<public-rdf-dawg@w3.org>


Thank you, Dan,

Dan:
> Optional protocol elements work against interoperability, so I would
> like to see more motivation. Do you have any particular topics
> in mind for optional protocols?

To me things seem just the opposite way.

If we don't make optional protocol elements, developers could invent their
own protocols
for the functionality, which will lead the interoperability.

If we do have protocols for optional functionality, the developerS who want
to support the functionality
can follow it, and the more the numbers of them, the more interoperability.

> I understand an objective to be something like a goal; i.e. the WG
> would like to get it done, but the WG is prepared to declare
> victory even if we haven't done it.

Well, those are of type (1) in my wording:

> > I think there are two types of optional functionalities:
> > (1) those would require too much time to make standards for
> > (2) those relatively easy to make standards for, but not suitable to
force
> > all implementations to support

And I think at least 4.3 Non-existent Triples and 4.4 User-specifiable
Serializatin belong to type (2).

4.5 Aggretate Query seems difficult, but it is indispensable in UC like 2.4
and 2.6 where user client
queries to more than one DB.

Cheers,
Yoshio



