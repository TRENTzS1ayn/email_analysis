docno="lists-020-13503130"
received="Fri May 28 09:43:10 2004"
isoreceived="20040528134310"
sent="Fri, 28 May 2004 14:42:25 +0100"
isosent="20040528134225"
name="Seaborne, Andy"
email="andy.seaborne@hp.com"
subject="Requirement: 3.4 Subgraph Results"
id="E864E95CB35C1C46B72FEA0626A2E808031A9AF2@0-mail-br1.hpl.hp.com"
expires="-1"


To:"''public-rdf-dawg@w3.org' '"<public-rdf-dawg@w3.org>


The current text is:

"""
3.4 Subgraph Results
It must be possible for query results to be returned as a subgraph of the
original queried graph that the query matches.
"""

there is a variant:
"""
It must be possible to select an entailed subgraph of a queried graph, in
which case the query results are an RDF graph.
"""

What I want out of this requirement is:

1/ that queries can be considered to execute by RDF graph pattern matching.

It appears externally as an RDF graph.  How that is implemented doesn't
matter.  One usage is that the query writer need only consider an RDF graph.

2/ one return format where par of the larger queried graph is returned.


In procedural terms it is equivalent to the graph formed by substituting the
variable bindings into the query graph pattern.  (I am open to there being
options to modify the form of the result but this base case should be
covered but see below).

I see this as important because we have two main usages for "remote access":
getting information out of the RDF information (variable bindings) and the
architectural issue of getting some RDF from a large, remote RDF repository.
Passing graphs, and parts of graphs, around is important so a system can
collect up some information and pass it on to another systems.

- - - - - - - -

Trying to make the subgraph discussion concrete:

Suppose we have an RDFS inference engine and:
    :a rdf:type :c1 .
    :c1 rdfs:subClassOf :c2 .
then the query:
    (?x rdf:type :c2)
returns the graph 
    :a rdf:type :c2 .

If some one wishes to argue for a form that returns:
    (?x rdf:type :c2) => :a rdf:type :c1 .
or 
    (?x rdf:type :c2) => :a rdf:type :c1 . :c1 rdfs:subClassOf :c2 .

then I get worried because it seems to assume RDFS processing at the client.
Extend this argument to OWL and the client needs an OWL processor with
matched capabilities to the server.

Andy



