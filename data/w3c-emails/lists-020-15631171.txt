docno="lists-020-15631171"
received="Thu Mar 11 15:06:19 2004"
isoreceived="20040311200619"
sent="Thu, 11 Mar 2004 14:07:23 -0600"
isosent="20040311200723"
name="Dan Connolly"
email="connolly@w3.org"
subject="Re: Use case: AFS-1: &quot;Find the resource for the person called 'John Smith'&quot;"
id="1079035643.21446.33581.camel@dirk"
charset="windows-1251"
inreplyto="4050C2C5.3030803&#64;profium.com"
expires="-1"

To: Janne Saarela<janne.saarela@profium.com>
Cc: RDF Data Access Working Group<public-rdf-dawg@w3.org>



On Thu, 2004-03-11 at 13:49, Janne Saarela wrote:
> >>Very good starting point. Formally may I suggest
> >>we could use logic programming notation such
> >>
> >>(X, FN:name, "John Smith")
> > 
> > 
> > Umm... why? Is that a notation we expect our audience to
> > use when making their feature requests?
> 
> I think logic programming serves at this point as a nice
> abstract syntax for which we can find the concrete syntax
> later. I don't expect feature request arise in this format
> but I could imagine that within this WG we find this notation
> easy to formalize the feature. Is this a good assumption?

It doesn't appeal to me, at this point.
I expect to formalize features in a design document,
not in a use cases and requirements document.


> >>The evaluation result would then be either bindings
> >>for X or if closure is a requirement, we would return
> >>all triples with X bound to a different value.
> >>
> >>I would like to see closure implemented with the query
> >>language in order to enable refined queries over
> >>the result graph.
> > 
> > 
> > Can you motivate this feature with a use case? i.e.
> > a plausible story from real life?
>
> == Task & Roles
> 
> A client software wishes to connect to server software
> to find out if it could find an object whose property
> matches certain value.
> 
> == Value & Why
> 
> If the query result is a graph, the client can cache
> the query result and run another query over the query
> result. This is far more efficient than repeating the
> query over to the server again with more criteria set.
> 
> == Description
> 
> Looking for content which is written in French
> (X, dc:language, "fr") and returning all known
> properties for X should be a complete graph with
> (X, P1, V1), (X, P2, V2), ... , (X, Pn, Vn) for
> which another query can be run upon with e.g.
> additional constraint (X, dc:creator, "John Smith") set.




This is getting there, but it's still too abstract
for me... too many greek letters: "a client software",
"a server", "the query", "a graph", "known properties",
X, P1, P2, V1, V2, ...

The french language is a nice, concrete topic that
I'd expect our audience to be familiar with. dc:language
is a little geeky, but certainly something we can expect
our readers to learn with a couple paragraphs of explanation.

Could you please pick one particular scenario built out
of more concrete things like the french language,
the concept of "composer" and such?

This http://c2.com/cgi/wiki?TheFairyTale pattern seems
particularly relevant to our task...

"Structure the use case description as a fairly tale with an initiating
event (Once upon a time there was an actor who wanted?.), a sequence of
events describing the interaction of the actors with the story (and then
the big bad actor?) that describes how the goal is reached ( and they
all lived happily ever after). "


-- 
Dan Connolly, W3C http://www.w3.org/People/Connolly/
see you at the WWW2004 in NY 17-22 May?



