docno="lists-020-16321188"
received="Fri Mar 19 02:44:25 2004"
isoreceived="20040319074425"
sent="Fri, 19 Mar 2004 09:44:04 +0200"
isosent="20040319074404"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: Discover and publish a server's functionality"
id="323B526A-7979-11D8-A9CA-000A95EAFCEA@nokia.com"
charset="US-ASCII"
inreplyto="20040318124011.A31457&#64;monkeyfist.com"
expires="-1"


Cc:public-rdf-dawg@w3.org
To:"ext Kendall Clark"<kendall@monkeyfist.com>



This is a nice specialization of the more generically stated use cases

PS-1: Discovery of authoritative knowledge via URI
PS-3: Third-Party Knowledge Discovery; query by known identity

which apply to any resource whatsoever denoted by a URI, such as
a web service.

Thus, if the client software knows the URI of the web service in
question, it can then (hopefully) use the DAWG solution to obtain
a description of that web service, and decide how best (or if) to
interact with that service.

"Negotiation" is taken to equate to the client learning what
protocols, query languages, parameters, etc. the server supports
and deciding for itself how best (or if) to proceed.

Yes?

Patrick

On Mar 18, 2004, at 20:40, ext Kendall Clark wrote:

>
>
> -- Name --
>
> Generically discover and publish a server's functionality
>
> -- Description --
>
> Abelard, an independent publisher of web publications, often needs to 
> query
> an arbitrary list of RDF storage servers for assertions about a set of 
> URIs
> he cares about. The RDF storage servers are RSS feed aggregators. The 
> set of
> URIs identify Abelard's web publications. Abelard wants to use RDF to 
> keep
> track of the things people say in weblogs about his publications.
>
> Abelard's client software includes support for three different query
> languages. Abelard's client software connects to each RDF storage
> server and determines whether it supports one of the three query
> languages it knows about. Abelard's client software chooses, based on
> priorities set by Abelard, to send different queries to different
> servers.
>
> Heloise, an aggregator of RSS feeds, publishes RDF (extracted from RSS
> feeds) on the Web using an RDF storage server. Heloise's server
> supports several RDF query languages.
>
> Heloise's server publishes its supported query language available in a
> machine readable form. It negotiates with clients in order to choose
> the most appropriate query language that they have in common.
>
> -- Value --
>
> Abelard can use software to automate the process of tracking the things
> people say on the Web about his publications. Abelard can formulate 
> queries
> in a variety of query languages, which preserves his existing 
> investment.
> Abelard's software vendor and Heloise's software vendor can develop 
> and sell
> extensible, relatively generic systems.
>
> Abelard and Heloise are able to exchange third party data in an
> interoperable fashion without requiring out-of-band, human negotiation 
> about
> capabilities.
>
> -- Other --
>
> Rather than writing several parallel use cases just like this one, I
> invite the reader to substite the following for "query languages" in
> this use case:
>
>      * RDF serialization types
>      * context support
>      * publicly available models with read access
>      * publicly available models with write access
>
>

--

Patrick Stickler
Nokia, Finland
patrick.stickler@nokia.com



