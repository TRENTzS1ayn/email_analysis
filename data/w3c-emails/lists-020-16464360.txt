docno="lists-020-16464360"
received="Sat Mar 20 14:16:27 2004"
isoreceived="20040320191627"
sent="Sat, 20 Mar 2004 11:16:00 -0800"
isosent="20040320191600"
name="Rob Shearer"
email="Rob.Shearer@networkinference.com"
subject="RE: Use case: AR-2: &quot;Federated query&quot;"
id="CFE388CECDDB1E43AB1F60136BEB4973028040@rome.ad.networkinference.com"
charset="us-ascii"
inreplyto="Use case: AR-2: &quot;Federated query&quot;"
expires="-1"


To:"Patrick Stickler"<patrick.stickler@nokia.com>,"ext Alberto Reggiori"<alberto@asemantics.com>
Cc:"RDF Data Access Working Group"<public-rdf-dawg@w3.org>


I agree that "Federated query" requirements are beyond what a query
language is expected to provide, however just because a particular
application won't be specifically addressed by a recommendation does not
mean the use case can be ignored.

Most naively, you could assume that such a federated knowledge base is
really just translated to a very large collection of RDF. So call that
collection task a part of the non-query application, and a spec which
lets you query the resultant RDF is the part of the use case the DAWG
rec. address.

However, I think it's important that we keep in mind that this is not
necessarily how applications will be architected. Actually gathering all
that RDF into one place may be impractical or impossible. It might be
more reasonable to break a query into smaller pieces and send each of
them to different data source, coordinating only the way the results are
collated together.

To me, this use case brings up the point that there's a real use case
for "large" queries, instead of requiring user combination of many small
queries. If SQL allowed only querying of single tables, requiring users
to perform their own joins (even if result formats made such joins easy
to program), then it would be impossible to perform the kind of back-end
optimization that makes relational database so useful.

> -----Original Message-----
> From: Patrick Stickler [mailto:patrick.stickler@nokia.com] 
> Sent: 18 March 2004 00:03
> To: ext Alberto Reggiori
> Cc: RDF Data Access Working Group
> Subject: Re: Use case: AR-2: "Federated query"
> 
> 
> 
> 
> On Mar 17, 2004, at 22:41, ext Alberto Reggiori wrote:
> 
> >
> >
> > == Use Case Name
> >
> > Federated query
> >
> > == Intent: Task & Roles
> >
> > Actor/User Agent needs to seamlessly query/access/integrate related 
> > chunks/pieces of data coming from a set of decentralized 
> heterogeneous 
> > sources, and get presented an unified view over a the whole 
> > result-set/data-set.
> >
> 
> While this is an important, and needed, application, this 
> seems out of 
> scope
> to me.
> 
> Some particular service could provide a DAWG conformant 
> interface to a 
> virtual
> knowledge store which constitutes a federation of heterogenous 
> knowledge from
> a broad range of disparate repositories -- but a DAWG agent 
> should not 
> be concerned
> with, or even be aware of, such federation.
> 
> Such a service would be very useful, and I expect it to be 
> done often, 
> but it
> has IMO no affect on how queries are expressed and submitted to 
> services for
> resolution.
> 
> The same goes for any form of distributed query.
> 
> (or have I missed something more fundamental, Alberto, in your test 
> case?)
> 
> Patrick
> 
> Patrick Stickler
> Nokia, Finland
> patrick.stickler@nokia.com
> 
> 



