docno="lists-020-16741400"
received="Tue Mar 23 13:54:39 2004"
isoreceived="20040323185439"
sent="Tue, 23 Mar 2004 10:52:28 -0800"
isosent="20040323185228"
name="Rob Shearer"
email="Rob.Shearer@networkinference.com"
subject="RE: Use case: tiger map/census data: have it your way"
id="CFE388CECDDB1E43AB1F60136BEB497302804A@rome.ad.networkinference.com"
charset="us-ascii"
inreplyto="Use case: tiger map/census data: have it your way"
expires="-1"


To:"Eric Prud'hommeaux"<eric@w3.org>,"Dan Connolly"<connolly@w3.org>
Cc:"RDF Data Access Working Group"<public-rdf-dawg@w3.org>


> I wonder which you would like to put forth as a use case, the fairy
> tale where someone still has to write the program et al, or the fairy
> tale where the QL has math libraries. I guess both are use cases, and
> the use case evaluation is the time to decide which approach the QL
> should cater to.

I think it is quite sensible to provide a language that implementors can
extend with more robust functionality, including math libraries. In
fact, such standard functionality as simple mathematical functions (like
those which are universally available in SQL dialects) would be an
important selling point for a query language.

The ability to use existing (or at the very least multi-purpose)
processors for this portion of querying would greatly simplify
implementation. For example, if existing XML Schema libraries (like
XQuery mathematics functions) could just be plugged into an RDF query
language, then you get a naive implementation of such functionality for
free. Optimizations which do something more clever (e.g. using an index
for a term computed by a math function, as a relational database might
do) would remain optional refinements.



