docno="lists-020-4560283"
received="Thu Jan 29 16:21:32 2004"
isoreceived="20040129212132"
sent="Thu, 29 Jan 2004 16:20:49 -0500"
isosent="20040129212049"
name="scott_boag@us.ibm.com"
email="scott_boag@us.ibm.com"
subject="Re: [XPath] Legal vaues for a satisfies expression in a quantifier?"
id="OF999E5130.09ACE5DF-ON85256E2A.00745896-85256E2A.00752FDD@lotus.com"
charset="US-ASCII"
inreplyto="40195A48.56C2C9DF&#64;mitre.org"
expires="-1"

To:"Roger L. Costello"<costello@mitre.org>
Cc:public-qt-comments@w3.org



Hi Roger.  I may be misunderstanding your question, but I think the answer 
is that OrExpr recurses down PathExpr.  You can follow the recursion 
basically by clicking on the first member of the right hand side of the 
BNF productions.  This particular cascade is what implements the built-in 
precedence.  Anyway, I believe the BNF to be correct, and the structure, 
dumped from the diagnostics of the test parser, is:

|XPath
|   Expr
|      QuantifiedExpr
|         Every every $
|         VarName part
|         In in
|         PathExpr
|            RootDescendants //
|            StepExpr
|               NodeTest
|                  NameTest
|                     QName part
|         Satisfies satisfies
|         PathExpr
|            VarName part
|            StepExpr
|               At @
|               NodeTest
|                  NameTest
|                     QName discounted

Note that the test parser reduces many of the unneeded steps, for instance 
for ExprSingle to PathExpr, as I think you would for most ASTs.

-scott



