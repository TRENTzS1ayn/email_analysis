docno="lists-020-6442163"
received="Fri Mar  5 07:47:08 2004"
isoreceived="20040305124708"
sent="Fri, 5 Mar 2004 04:46:38 -0800"
isosent="20040305124638"
name="Michael Rys"
email="mrys@microsoft.com"
subject="RE: [XSLT 2.0] Fallback for &quot;as&quot; attribute in non-schema-aware processor"
id="EB0A327048144442AFB15FCE18DC96C7023FF970@RED-MSG-31.redmond.corp.microsoft.com"
charset="us-ascii"
inreplyto="[XSLT 2.0] Fallback for &quot;as&quot; attribute in non-schema-aware processor"
expires="-1"


To:"Michael Kay"<mhk@mhk.me.uk>,<public-qt-comments@w3.org>

I think element(foo) should not be associated with the ISSD at all and
do what persons want it to mean. See
http://sqljunkies.com/WebLog/mrys/archive/2004/02/27/1339.aspx  for an
exposition.

 

And making this fallback part of XPath would break the intent of
instance of and treat as.

 

Best regards

Michael

 

________________________________

From: public-qt-comments-request@w3.org
[mailto:public-qt-comments-request@w3.org] On Behalf Of Michael Kay
Sent: Friday, March 05, 2004 4:08 AM
To: public-qt-comments@w3.org
Subject: [XSLT 2.0] Fallback for "as" attribute in non-schema-aware
processor

 

One of my users (Ed Willink) has raised this interesting suggestion (I
have modified it slightly):

 

If the stylesheet specifies as="element(FOO)" which a non-schema-aware
processor currently rejects, then rather than reporting an error the
processor should instead fall back to treat it as "element()".
Similarly, as="QName?" should fall back to as="xdt:anyAtomicType?".

 

This would make it much easier to write stylesheets that work well both
with and without a schema-aware processor.

 

We could apply this purely at the XSLT level, or we could extend it to
the two XPath constructs that use a SequenceType (instance of, and treat
as). In all cases the effect would simply be to run with less type
checking.

 

We could also extend this principle so that a non-schema-aware processor
ignores "type" and "validation" attributes, and xsl:import-schema,
rather than rejecting them. Perhaps such fallback behaviour should be
explicitly requested using the "switch" which we are still trying to
invent.

 

Michael Kay

 

 



