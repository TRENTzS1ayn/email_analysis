docno="lists-020-7381463"
received="Fri Mar 12 13:26:53 2004"
isoreceived="20040312182653"
sent="Fri, 12 Mar 2004 18:26:49 -0000"
isosent="20040312182649"
name="Michael Kay"
email="mhk@mhk.me.uk"
subject="RE: substring: explanation of negative or zero $startingLoc behaviour"
id="20040312182653.74AD8A11C2@frink.w3.org"
charset="us-ascii"
inreplyto="IKEOLCDFPBBPPAHGNKKOMEPPEHAA.howardk&#64;fatdog.com"
expires="-1"

To:"'Howard Katz'"<howardk@fatdog.com>,<public-qt-comments@w3.org>



The definitive statement in the spec is:

More specifically, returns the characters in $sourceString whose position $p
obeys:

fn:round($startingLoc) <= $p < fn:round($startingLoc) + fn:round($length)

The subsequent paragraphs are just trying to be helpful, and apparently not
succeeding.

Michael Kay

# -----Original Message-----
# From: public-qt-comments-request@w3.org [mailto:public-qt-comments-
# request@w3.org] On Behalf Of Howard Katz
# Sent: 12 March 2004 18:08
# To: public-qt-comments@w3.org
# Subject: fn:substring: explanation of negative or zero $startingLoc
# behaviour
# 
# 
# F and O: 7.4.3 fn:substring()
# 
# The explanation of $startingLoc in 7.4.3 reads, "If $startingLoc is zero
# or
# negative, the substring includes characters from the beginning of the
# $sourceString." I find the meaning of the phrase "from the beginning of
# the
# $sourceString" to be unclear and can't find any other reference to the
# concept of negative character positions within a string.
# 
# Out-of-band communication on the www-ql list seems to indicate that the
# concept of "imaginary character positions" preceding the physical start of
# the string might be a useful way of explaining zero or negative
# $startingLoc
# behaviour. I'd suggest the addition of this or a similar explanation to
# 7.4.3.
# 
# Howard



