docno="lists-020-7717857"
received="Thu Mar 18 09:05:08 2004"
isoreceived="20040318140508"
sent="18 Mar 2004 14:05:05 +0000"
isosent="20040318140505"
name="Colin Paul Adams"
email="colin@colina.demon.co.uk"
subject="Re: [XSLT 2.0] Data types for a Basic XSLT processor"
id="ltu10mcktq.fsf@colina.demon.co.uk"
charset="us-ascii"
inreplyto="E1B3xwc-0006Nj-1N&#64;lon1-hub.mail.demon.net"
expires="-1"

To:"Michael Kay"<mhk@mhk.me.uk>
Cc:<public-qt-comments@w3c.org>



>>>>> "MK" == Michael Kay <mhk@mhk.me.uk> writes:

    MK> It's possible to implement xs:integer using 64-bit hardware
    MK> arithmetic, I believe*. It's certainly possible to implement
    MK> it so that it uses hardware arithmetic when the numbers are
    MK> small enough. I've no idea about xs:decimal - I grew up with
    MK> machines that did decimal arithmetic in hardware, but I
    MK> suspect that's gone out of fashion? As for float and double,
    MK> surely 32-bit floating point is a complete anachronism? 20

Then why is it in XML Schema part 2?

    MK> But this is aside from the point. I don't believe that numeric
    MK> arithmetic accounts for a sufficiently high proportion of XSLT
    MK> execution costs for this to be a real concern.

Then why include xs:double? Pointless.

    MK> 18)". 64 bits is enough to meet this requirement. I think the
    MK> word "minimum" here is meaningless, and best ignored.

I don't think so. I think it means you should implement arbitrary
precision if you can.  
-- 
Colin Paul Adams
Preston Lancashire



