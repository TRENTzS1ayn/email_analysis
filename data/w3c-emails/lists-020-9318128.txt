docno="lists-020-9318128"
received="Mon May 24 16:06:20 2004"
isoreceived="20040524200620"
sent="Mon, 24 May 2004 20:53:11 +0100"
isosent="20040524195311"
name="Michael Kay"
email="mhk@mhk.me.uk"
subject="RE: [Serial] I18N WG last call comments"
id="20040524200612.61F53A27DE@frink.w3.org"
charset="us-ascii"
inreplyto="4.2.0.58.J.20040524142147.0747cc30&#64;localhost"
expires="-1"

To:"'Martin Duerst'"<duerst@w3.org>,"'Henry Zongaro'"<zongaro@ca.ibm.com>,<w3c-i18n-ig@w3.org>
Cc:<public-qt-comments@w3.org>



> 
> >There
> >are many ways that we allow XSLT stylesheets to generate 
> non-conformant
> >HTML, and I don't see that this one is particularly 
> different from the
> >others.
> 
> Could you point to a list of these, or list (some of) them here?
> 

For example:

* you can produce elements and attributes that aren't defined in HTML

* you can nest elements in ways that aren't allowed in HTML

* you can give attributes values that aren't allowed in HTML

* you can use any system ID and public ID that you like in the doctype
declaration

* you can use disable-output-escaping (or now character maps) to produce any
kind of garbage that takes your fancy

* you can suppress the escaping of URIs in URI-valued attributes

* you can suppress the generation of the META element defining the character
encoding or generate your own that contains a value unrelated to the true
character encoding

All these features are occasionally useful either to exploit non-standard
features in browsers, or to generate output designed for processing by
software other than HTML browsers.

Michael Kay



