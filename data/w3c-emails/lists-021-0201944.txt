docno="lists-021-0201944"
received="Wed Mar 24 06:40:26 2004"
isoreceived="20040324114026"
sent="Wed, 24 Mar 2004 13:30:45 +0200"
isosent="20040324113045"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: Use case: Find the email address of &quot;John Smith&quot;"
id="B0FCC0A2-7D86-11D8-858C-000A95EAFCEA@nokia.com"
charset="US-ASCII"
inreplyto="E864E95CB35C1C46B72FEA0626A2E80801EA189F&#64;0-mail-br1.hpl.hp.com"
expires="-1"


Cc: Dan Connolly<connolly@w3.org>, RDF Data Access Working Group<public-rdf-dawg@w3.org>
To:"ext Seaborne, Andy"<andy.seaborne@hp.com>



On Mar 24, 2004, at 12:13, ext Seaborne, Andy wrote:
>
>
> LDAP: Assumes a planned deployment.  And my address book is an RDF 
> file, not
> a RDF-fronted LDAP server.

I think it would be useful if we presume that the target of any
particular query (or query exchange between client and server)
is an RDF graph.

How that RDF graph is realized should be irrelevant to our
specifications.

It could be an RDF/XML instance, a native RDF triples store, an RDF
interface to a RDBMS or LDAP server, a student/slave chained to a
workstation/terminal, whatever.

While it will be the case that real-world scenarios will have to
deal with how those RDF graphs are realized, that shouldn't IMO
affect our requirements or resulting recommendation, and the less
we talk about underlying machinery that should be below the line
of opacity, the better (presuming we all agree where that line
should be drawn, of course ;-)

Patrick

--

Patrick Stickler
Nokia, Finland
patrick.stickler@nokia.com



