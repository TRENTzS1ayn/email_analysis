docno="lists-021-11167653"
received="Wed Apr  7 21:16:53 2004"
isoreceived="20040408011653"
sent="Wed, 07 Apr 2004 21:20:20 -0400"
isosent="20040408012020"
name="Thomas B. Passin"
email="tpassin@comcast.net"
subject="Re: How does RDF/OWL formalism relate to meanings?"
id="4074A8D4.5020704@comcast.net"
charset="us-ascii"
inreplyto="D3C8F903E7CC024C9DA6D900A60725D9057C2613&#64;DLTKVMX1.ads.deltek.com"
expires="-1"


To:public-sw-meaning@w3c.org


John Black wrote:

>>From: Thomas B. Passin
> 
> As I was asking Dan, why do I need to remember that a URI stands 
> in some way (what way?) for a "resource"?  How does that relate 
> to the meaning of the URI? 
> 

We are talking primarily RDF here, and RDF uses URIs to identify the 
things that it is interested in, and the things that can be said about 
them.  The RDF term for those things is "Resource".  By "stands for", I 
mean "identifies in an RDF statement".  Less formally, I think of it as 
"stands for the resource in a computer", though of course people use the 
URIs without computers, too, when they are talking about RDF data.


>>I realize that this post was long.  Does it start to address some of 
>>your questions?
> 
> 
> Yes.  Thanks for taking the time to answer.  Unfortunately it answers 
> them in a way that is unsatisfactory.  For my applications, I need to 
> send messages from people to machines, from machines to people, and 
> from machines to other machines.  And at each step, I need for the 
> people or machines to get my notion of strength, for they may need to 
> make decisions based on it.  All of your methods of interpreting my 
> URI/RDF/OWL for the meaning involve resorting to natural language.  

Yes, but that is because you led by talking about wanting your 
"audience" to understand your concepts, e.g., "strength".  So naturally 
I concentarted on that.  I thought that the abstract, machine-usable 
aspect was probably better under control here, but maybe not.


> And due to the machine to machine links, this just won't work.  
> Perhaps you could translate each of the above methods into something 
> that a machine could do.
> 

It might be good to read up on the RDF definitions relating to 
interpretations.  This material came in with the new version of the RDF 
Recommendations.

Consider the following -

3^2 + 4^2 = 5^2

What is that?  __if__ you know that the symbols (2,3,4,5) are numbers, 
and _if_ you know what the equals sign represent, and _if_ you know some 
plane geometry, you _might_ decide that this is a mathematical statement 
about right triangles.  But there are plenty of other possibilities, and 
that is so even if we stay just in the domain of math.

Now if you could define some kind of BFN notation with OWL, you could 
specify how to construct an equation like that.  This would be precise, 
and other computers could use it to check whether a given equation met 
that prescription.  You could turn a theorem-prover loose on it and 
prove dozens of relatead theorems, perhaps.

In this way a computer can work with a precise "knowledge" about the 
symbols without having much if any notion about what _we_ mean by them.

To go from people to machines is much like other data modeling tasks. 
You have to come up with an adequate model, and you have to use the 
language of choice to translate the model in computer-usable form.  And 
then you have to interpret the results of any computation.  However, a 
thermostat can be set from a database without human intervention - once 
the code has been written and the database populated.

So the time for human intervention and "understanding" can be at runtime 
or at design time or at build time (or some combination).

Well, you probably know all that better than I do.  I don't mean imply 
that you don't.  I would say at this point that it would help if you 
came up with a small concrete example that could be a focal point for 
more discussion, one that highlights why you have questions and more 
about their nature.  The kind of responses you are seeking probably 
depend on just what you really want to accomplish.

Cheers,

Tom P



