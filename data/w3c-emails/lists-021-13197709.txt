docno="lists-021-13197709"
received="Fri Apr  2 04:42:46 2004"
isoreceived="20040402094246"
sent="Fri, 2 Apr 2004 11:39:15 +0200"
isosent="20040402093915"
name="NANNI Marco FTRD/DMI/SOP"
email="marco.nanni@francetelecom.com"
subject="[WRLD] Some few questions about the formal description of the TF"
id="BBBE5BAA3B351C488C415EA662EA88400B711C@ftrdmel2.rd.francetelecom.fr"
charset="us-ascii"
expires="-1"


To:"Jim Hendler"<hendler@cs.umd.edu>
Cc:"SWBPD"<public-swbp-wg@w3.org>

Hello,

1) When you make a distinction between "Developers not yet using RDF and
OWL" (1) and "those already interested in using Semantic Web technology
but confused about how to get started or to move forward with
development " (2)  do you mean 

- that there are problems that are not SW related but for which
a SW based solution would be better ? or/and
- that some developers not yet using RDF and OWL solve problems
without knowing they are tipical SW related problems  and so they might
use SW technologies ? and/or
- that RDF (OWL) can also be used for non SW applications ?

2) regardless of these questions what do you think of this proposition
for these first part :
"The first note will be aimed at Web Developers not yet using
RDF and OWL. It's goal is to help them to distinguish SW use cases from
not SW use case and so when to use RDF and OWL"
In other words we only have to treat the WHEN problem. It could be also
possible to try to convince them to use RDF and OWL as much as possible
even if their problem is not SW related except if we can prove that this
use will raise some critical problems. Simply because "Qui peut le plus
peut le moins" a french proverb
Once you have defined the WHEN, we have to define the HOW, i.e given a
technical context we propose a set of rules to use at the best RDF and
OWL. But I think that the HOW phase should be treated in an other task
(OEP or a new task ?)

3) You write :
"and to debunk the myth that somehow the languages form an
"ordering" from least to most 
complex"

I agree with you but not necessarily for the same reasons. For
me the difference is clear : OWL is the more expressive one, the
clearest and i also would say the simplest one (to use). Perhap's i'm
wrong and in this cas correct me please, but according to  what i have
understood from these languages i Think that there are things that you
can't express with RDF(s) but that you can express with OWL but the
contrary is not true. I could say the same thing by asking you a
question : can you give me an example where, starting from scratch,  the
use of RDF(S) is a better solution than the use of OWL ?

So to summarize, I don't see why for this particular audience (2) we can
give the following advice :

"If you start from scratch Don't
hesitate between these language and use OWL."

Of course this advice will be
followed by some complements (but exposed in other Tasks) like :
- all the stuff relative
to the concrete problems due to the difference of OWL lite/DL and OWL
Full (reasonning problems for example) 
- all the problem
relative to the fact that you don't start form scratch and that you have
to integrate existing data not defined in OWL but i think that this kind
of problem will be treated by some other tasks (OEP ?)
- perhaps some points
relative to the competences of the "developper" but, sincerely, OWL as I
have written above for me it is perhaps even easier to learn OWL than
RDF(S). Anyway this is an opened  debate relative to the difficulty to
learn OOL vs no OOL.

So, for me the most important thing we have to do is to convince the
reader that OWL is a good language and that he migth uses it as much as
possible. Obviously the demonstration will based on some comparisons
betwen the languages but always, in my mind, according to the fact that
OWL is the most powerful one.

Thank you very much for you patience

Best regards

marco NANNI



