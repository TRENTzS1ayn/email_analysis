docno="lists-021-15765666"
received="Wed Mar  3 05:52:42 2004"
isoreceived="20040303105242"
sent="Wed, 03 Mar 2004 11:52:09 +0100"
isosent="20040303105209"
name="Guus Schreiber"
email="schreiber@cs.vu.nl"
subject="top-3's received so far"
id="4045B8D9.5040401@cs.vu.nl"
charset="us-ascii"
expires="-1"


To: SWBPD<public-swbp-wg@w3.org>


For convenience I have collected the top-3 statements received so far
Guus

%%%%%%%%%%%%%%%%%

JIM HENDLER

1 - An alternate state of MIME
  The state of MIME types for RDF, RDF, OWL Lite, OWL DL, and OWL Full
  may need revisiting.  The new DAWG may be the place to do this, or it
  may be SWBP.   Currently, however, RDF and OWL documents are showing
  up as text, as xml, as RDF (a mime type not recognized by many
  browsers).  The bottom line is that MIME is horribly broken and
  should be fixed at a higher level, but for now we need to live with
  what is out there -- coming up with a stronger recommendation.  Part
  of this will be outreach to the browser folks to support us better
  (i.e. if we confirm our recommendation to use application/XML+RDF for
  all the languages, then it would be nice if browsers didn't barf on
  this)


2- Explain the mess we created
  For reasons that have as much to do with history and politics as
  anything else, we have created a muddle with RDF, RDFS, OWL Lite, OWL
  DL, and OWL Full all now being recommendations.  How does someone
  decide which to use and when?  How do we explain that OWL Full (which
  should be renamed "OWL") is really the "vocabulary" for OWL that can
  be used in any way compatible w/RDF, and that OWL DL (and Lite) are
  "profiles" that can be used when certain functionalities are needed.
  How do we better explain that an RDF-S document is in OWL Full (since
  it uses rdfs:Class instead of owl:Class) and that this is ok and to
  be expected.  In short, to make RDF-Schema and the OWL stuff work
  together in the world, instead of appearing to be competing in some
  sense, we need to explain this stuff to the world in a way that
  developers who aren't logicians can understand.


3 - N3 (turtle?) status upgrade
  Many of us use a portion of the N3 notation (basically what Dave
  Beckett has in  "turtle" [1]) when we use the RDF-family of
  langauges.  However, this notation is opposed by some who worry that
  it somehow endorses N3 as "the rules language" and/or that there's
  "no formal semantics" for N3.    I think that the SWBPD WG should
  take the issue of presentation syntax seriously, should endorse the
  non-rules subset of N3 as a useful and useable language for RDF+, and
  should produce a note (based on [1]) codifying this better, adding
  more information on the mapping, and making it easier for people to
  use RDF.


JOS DE ROO

o repository of test cases using existing standard vocabularies
   (e.g. healthcare UMLS, OpenGALEN, NCI, ICD9, MeSH, DICOM, HL7, ...)
   also by using an ontology in which one can say things like
   "this is something which is called xyz by that standard/body"

o test results page covering different implementations for
   those test manifests and using a test results ontology with
   a more specific result:output ontology

o X feeds data into Y using controlled vocabulary
   Y performs actions which should be verified
   results are fed back to X using controlled vocabulary
   e.g. physician order entry


OSCAR CORCHO

1. Guidelines to transform existing representations from/to RDF/OWL.
At UPM, we have experience in transforming frame-based+first-order-logic
representations from/to RDF/OWL.

2. Design patterns for constructing ontologies.
I am thinking of issues like:
"how do I represent an abstract class in OWL (that is, a class that cannot
have instances?"
"how do I represent a default value in OWL?"
etc.
These issues appear from time to time in the WebOnt and RDF-interest lists.

3. Course material and introductory texts for ontologies and ontological
engineering
UPM has recently published the book "Ontological Engineering", from which we
can extract some introductory texts on a royalty-free basis. We have also
course material from our PhD course on ontologies and the Semantic Web.


BERNARD VATANT

1. Leverage legacy
Use cases of migration of public index, thesauri, directories ... to make
them easily usable in SW applications

2. Avoide balkanization of efforts
Use cases of ontology mapping and re-use practices minimizing redundancy
and maximizing interoperability

3. Bring enterprise into the game
Why should I care about semantic interoperability of my enterprise private
ontologies/data with public SW ontologies/data ?

[ 2. and 3. both address a concern I've already expressed. From the
experience we have with customer companies, they come to semantic
technologies and languages first for internal interoperability sake (which
is a good thing), but are more relunctant to ensure external
interoperability. Either they don't see the point of it, or they consider
their internal ontology as a strategic asset to be kept hidden under the
hood. ]


CHRIS WELTY

1) An important, and I believe implicit in the name "*Best*
    Practices", element of our mission is some notion of correctness or
    general acceptance of an approach or technique.  I strongly believe
    this group should not simply build a catalog of all the OWL/RDF
    applications, but distill from them the best (and perhaps even
    worst) solutions and approaches.  It will be hard, of course, to
    define what "correct" means, but probably less hard to define what
    "acceptance" means.


2) At ISWC I talked about the idea of establishing common "ontology
    patterns".  I started something along these lines at the W3C wiki
    site: http://esw.w3.org/topic/PartWhole.


3) Almost as important as pointing out correct/accepted approaches is
    documenting "modeling pitfalls" and common mistakes that people
    make .  There are several of these in the OWL Guide and the Wine
    Ontology, which is unfortunate, but none of us had the time or
    resources to fix it at the time.  Given the high visibility of this
    document, I think it would be a good place to start.


-- 
Free University Amsterdam, Computer Science
De Boelelaan 1081a, 1081 HV Amsterdam, The Netherlands
Tel: +31 20 444 7739/7718
E-mail: schreiber@cs.vu.nl
Home page: http://www.cs.vu.nl/~guus/



