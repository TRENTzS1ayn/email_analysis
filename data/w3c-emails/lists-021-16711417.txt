docno="lists-021-16711417"
received="Fri Mar 19 09:30:46 2004"
isoreceived="20040319143046"
sent="Fri, 19 Mar 2004 15:30:18 +0100"
isosent="20040319143018"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="# vs / or = or ?"
id="BHEGLCKMOHGLGNOKPGHDCEOACCAA.jjc@hpl.hp.com"
charset="iso-8859-1"
expires="-1"

To:<public-swbp-wg@w3.org>



Not sure if this is a swbp or www-rdf-interest thing ...

Noted that in the IRC at the end of yesterday's meeting:

[re wordnet, the big issue to my mind is whether, if we map noun terms to
RDF classes, what namespace URI to use (end in # vs /) since that affects
what you can do by derferencing a term]

I am just thinking about constructing an infinite ontology (i.e. an ontology
with an infinite number of terms in it, slightly more interesting than
rdf:_1, rdf:_2 ...)
This is for language tags, and the infinite number of terms comes from
permitting unregistered extensions to an RFC 3066 tag

My thought is to have it so that e.g.
  lang:en-us and lang:en-gb-scouse
work in a tractable way of having a namespace binging
  xmlns:lang="http://someserver.example.org/lang.jsp?tag="

Thus the URI for lang:en-us is

http://someserver.example.org/lang.jsp?tag=en-us

Is this good practice or bad practice?

This URI would retrieve everything you need to know about this tag (e.g. its
relationship with en) but if you want to know about en-us-boone's
relationship with this tag you need to get
http://someserver.example.org/lang.jsp?tag=en-us-boone

i.e. I think I can structure my infinite ontology so that getting all the
URIs you have in your hand gives you that finite subset that you need.

(I guess I could do this with a URI ending in "/" and some magic on the
server - certainly would have difficulty ending in "#")

It seems to me that it is bad practice to have a namespace name in RDF that
ends in a character permitted in an NCName (because then there is a problem
finding the splitpoint)

Jeremy



