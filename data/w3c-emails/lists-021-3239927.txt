docno="lists-021-3239927"
received="Wed Sep 10 14:00:29 2003"
isoreceived="20030910180029"
sent="Wed, 10 Sep 2003 11:59:04 -0600"
isosent="20030910175904"
name="Aredridel"
email="aredridel@nbtsc.org"
subject="Re: rubyrdf"
id="1063216744.4775.227.camel@mizar.nbtsc.org"
inreplyto="20030909214502.GC27848&#64;w3.org"
expires="-1"

To: Dan Brickley<danbri@w3.org>
Cc: RDF-Ruby list<public-rdf-ruby@w3.org>


On Tue, 2003-09-09 at 15:45, Dan Brickley wrote: 
> Short reply for now: awesome :)

Excellent.

> One way of doing so would be for you to join the list and add 
> "Cc: public-rdf-ruby@w3.org" to your reply to this message.

Done.

> I have also started to move the src tree over to dev.w3.org CVS where
> it is easier to support additional collaboration. Re licensing, the
> main thing is that code be available under the W3C Software License; I
> believe we are ok with distributing stuff (c) by others, so long as
> the license terms are compatible.

Sounds good to me.  I just want to make it work, and have SW stuff
actually get deployed.

> Damian has worked on a new Squish++ implementation that does optional 
> clauses, and also has some patches to the core RubyRdf stuff. I suggest
> we have a chat (on the public list) about all this before you spend too
> much time on the current code. My stuff was always a bit rough, but 
> I think there is now the basics of an interesting system falling into
> place: we have query engines, SQL backends, a half-decent RDF parser,
> etc.  but plenty of room for improvements.

Yeah -- the code is functioning but ugly. Functioning is what other RDF
projects often lack in my experience, though.

I'm not sure as to the state of the SQL support -- I've found basicrdf's
Graph#toSQL, but dumping the entire graph from memory to SQL as fresh
insert statements seems counterproductive to me.  Am I missing a greater
part of the interface?

I've not made heads nor tails of RDF4R yet -- just the basicrdf
library.  I'm planning to run the whole thing through rbbr and rdoc and
browse a little more intelligently than my survey so far.  All I know is
that my sixth sense for what project is most promising says "RubyRdf".
<wry grin goes here>

> I'd be very happy to collaborate with you on this, anyway. Re alternate
> backends, I've had MySQL working OK btw., but am generally more focussed 
> on Postgres. SQLLite would be interesting certainly.

Alright.  For Ruby, using the DBI layer might make the most sense,
though I'm using SQLite directly at the moment.

> Dave Beckett's redland is now quite nicely packaged with Ruby wrappers,
> so there is work we could do there too. So many things to do, so little 
> time... ;)

There's plenty to do there.  I compiled redland and the ruby module the
other day, and was less than impressed by the API.  It's about as
un-ruby as one can get -- it's basically the C API wrapped into Ruby,
hardly object-oriented.  It might be okay to /use/, but extending it in
Ruby isn't going to fly without some major wrapping of the core API. 
I'd love to see the API reworked into a proper Ruby module, with all the
namespaces sorted out and planned support for inheritance added.

> Let's move this onto the new list and see whether we can get started...

Alright!

> Dan

> ps. damian do you have a url for your fixed-up version?

Yes, please, Damian!

Ari




