docno="lists-021-7655974"
received="Fri Nov 21 11:57:45 2003"
isoreceived="20031121165745"
sent="Fri, 21 Nov 2003 08:57:12 -0800"
isosent="20031121165712"
name="Bijan Parsia"
email="bparsia@isr.umd.edu"
subject="Re: SWSL declarative semantics"
id="C05DF907-1C43-11D8-AFFE-0003939E0B44@isr.umd.edu"
charset="US-ASCII"
inreplyto="20031121152156.1C983112F30&#64;kiferserv.kiferhome.com"
expires="-1"

Cc:"Peter F. Patel-Schneider"<pfps@research.bell-labs.com>,public-sw-meaning@w3.org
To: Michael Kifer<kifer@cs.sunysb.edu>



On Friday, November 21, 2003, at 07:21  AM, Michael Kifer wrote:
> Note that I said "pictorial conventions *and other* notations".  And, 
> second,
> I said that this is needed for an *informal* conceptual model. That is,
> this is not supposed to be the formalism itself, but a way to convey 
> the
> intuition behind the formalism to ordinary folks (knowledge engineers).

Documentation?

I'm a little confused about what the standards for a notation for an 
*informal* conceptual model are. For example, most semantics are given 
in a slightly stilted, semi-formal, natural language based notation. 
That is, "standard" set theory notation, plus some logical symbols, 
plus a bunch of, say, for OWL, English. In the RDF semantics document, 
we have some helpful diagrams to help make what's going on clearer. I'm 
not clear that these specified an informal conceptual model rather than 
just elucidate the formalized model.

Are you really proposing a...er...*standard* notation for specifying 
*informal* conceptual models? I think I don't have any idea of what 
this would be *except* as an inadequate notation :)

> I think it is a mistake to think that programmers appeal to
> model-theoretic semantics when they specify something in a logic-based
> formalism.

Hmmmm. Perhaps they *should* :) They appeal, typically, to their 
understanding of the constructs which may not be model theoretic. But, 
one hopes, they interact with software written with the model theory as 
a guide.

> I believe that programmers need "rules of
> thumb" that are natural enough to enable the programmers write correct
> programs. This is where I see the role of the informal conceptual 
> model.

Isn't this point independent? I mean, "prefer disjoint classes to 
nominals (in OWL)" seems to be a useful rule of thumb for writing OWL 
ontologies (especially, given current system) but it doesn't seem to be 
about the *meaning* of the constructs.

> I don't believe that model-theoretic semantics by itself is sufficient
> to make sure that people use the language constructs correctly.

Well, no one, I think, thinks that. But there's several ways of going 
wrong. One way would be that we "know" what we want to express, but due 
to our unfamiliarity with the formalism, we end up saying something 
stronger or weaker than we clearly desired. Personally, I tend to think 
it unlikely for anyone to have that level of detailed knowledge 
*without* having expressed it in a suitably formal way. In which case, 
the informal notation isn't helpful.

> Its role is to serve as a yardstick for correct implementation of the
> language itself and as an arbiter in hairy cases. In both uses, it is a
> took for an expert, not for an average Joe-knowledge-engineer.
> (Even experts use the formal semantics in their day-to-day work
> only when they get stuck.)
>
> Also, not that in my message I said that such a conceptual model is an
> objective and not a requirement. In our slang this means that it is
> something desirable, but we aren't sure that it is achievable in full.
> However, this is achievable to some degree. To cite a trivial case, E-R
> diagram is such a tool (for a very simple case). Another successful 
> example
> is Query by Example as it is implemented in, say, MS Access.

I wonder if this is all due to having an insufficiently expressive 
formalism in the first place?

Cheers,
Bijan Parsia.



