docno="lists-022-13997671"
received="Mon Aug 11 12:24:59 2003"
isoreceived="20030811162459"
sent="Mon, 11 Aug 2003 17:30:46 +0100"
isosent="20030811163046"
name="Johnb@screen.subtitling.com"
email="Johnb@screen.subtitling.com"
subject="RE: TT and subtitling/captioning - separating timing from style f rom content"
id="11E58A66B922D511AFB600A0244A722E9EE575@NTMAIL"
charset="iso-8859-1"
inreplyto="TT and subtitling/captioning - separating timing from style f rom content"
expires="-1"


To:glenn@xfsi.com
Cc:public-tt@w3.org

Glenn,
 
<GA>
We would have to extend XPointer to handle ranges that involve words or
lines. At present, ranges demarcate their endpoints using character offsets
or element offsets, e.g., from 2nd to 4th character, from before element E
to after element F, etc.
 
<JB>
I'm not sure I see that this is a problem - since we wouldn't be using the
spans in this instance...
 
<p id="p1">
Scooby dooby doo where are you?
we've got some work to do now
Scooby dooby doo, where are you?
we need some help from you now
come on Scooby doo, I see you
pretending we've got a slither
you're not fooling me, cause I can see
the way you shake and shiver
</p>
 
so presumably:
 
<cue select="#xpointer(p1/range(1.0, 1.31))" use="a2" dur="1"/>
<cue select="#xpointer(p1/range(1.32, 1.61))" use="a2" dur="1"/>
<cue select="#xpointer(p1/range(1.62, 1.91))" use="a2" dur="1"/>
 
and so on
 
 - would select lines from the paragraph.
But agreed - this is not quite as elegant as a word / line / character /
paragraph selector.
 
<GA>
Doing a line selector is problematic unless it is based strictly on forced
line breaks in content, which would require the authoring system to
predetermine line breaks and which would not work well if UA or device could
change fonts or layout region. It might be possible to introduce a form of
"pseudo" selector that makes selection based on units that are not
determinable by lexical content. CSS provides such selectors.
 
<JB> I'd definitely prefer to avoid hard line breaks - they would tie the
content to a specific layout. Within subtitling / captioning, a line break
has a greater significance than within 'bulk text' - since there may be an
inferred change of speaker etc.....
 
I think the issues that arise when the "UA or device could change fonts or
layout region" are within what I am calling the "temporal flow " model.
That is - I see two distinct modes here:
 
1) an explicit 'knife and forked' model - where content is without inline
**style** markup - but perhaps uses some form of line markup to support
selection. This mode is 'author driven' i.e. the author is making choices
based on expected delivery interfaces.
 
2) a relaxed model - where content is without **any** inline markup. In this
model - the "temporal flow" attributes control how much content is in the
region and what happens if it overflows. This supports device independence
much more flexibly. So this example might produce pop on subtitles....
 
<style>
  p { display : none; color: blue; temporal-overflow: auto; add-interval:
1s;  read-interval: 3s; region-full-clear: all; region-fill-mode: all}
</style>
  
<cue select="id(p1)" dur="50s"/>
 
<p id="p1">
Scooby dooby doo where are you?
we've got some work to do now
Scooby dooby doo, where are you?
we need some help from you now
come on Scooby doo, I see you
pretending we've got a slither
you're not fooling me, cause I can see
the way you shake and shiver
</p>
 
regards 
John Birch 

The views and opinions expressed are the author's own and do not necessarily

reflect the views and opinions of Screen Subtitling Systems Limited. 



