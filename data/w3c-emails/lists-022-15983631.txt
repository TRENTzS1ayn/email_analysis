docno="lists-022-15983631"
received="Thu Jan 30 09:16:45 2003"
isoreceived="20030130141645"
sent="Thu, 30 Jan 2003 14:24:18 -0000"
isosent="20030130142418"
name="Johnb@screen.subtitling.com"
email="Johnb@screen.subtitling.com"
subject="RE: TT Content Buffering and Timing Scenarios"
id="11E58A66B922D511AFB600A0244A722E6C5F84@NTMAIL"
inreplyto="TT Content Buffering and Timing Scenarios"
expires="-1"


To:glenn@xfsi.com,public-tt@w3.org


Glenn A. Adams wrote...

> I would like to engender a discussion on the issue of the contexts
> where timed text (TT) content may be used and how this will affect
the
> buffering and timing aspects of this content. If this was
discussed in
> detail in the task force, please let me know. Otherwise, perhaps
we can
> discuss it a bit here, since I see some need for clarity (at least
in
> my own mind) regarding the various high-level usage scenarios.

<SNIP>

I had been thinking along broadly similar lines and came up with the
following 'scenarios':

Creation of TT
Storage of TT
Display of TT

These scenarios will each have different (self evident?) implications on the
TT 'standard'.

Distribution of TT.
There is a required movement of TT information between these three
scenarios. In the simplest form this movement is by transfer of a **complete
program** (containing probably multiple timed text instances - 'Access
Units') of TT information. This in practice only occurs between one Storage
scenario and another Storage scenario. For reasons of efficiency and
implementation, the distribution of TT information between storage and the
display location is much more likely to be 'streamed' - 'Access Units' of
the complete program might need to be distributed and displayed before
subsequent elements (or the complete program) arrive.

In the Display scenario (and Creation scenario), by its very nature it would
be more convenient (essential?) if the TT information is fragmented into
**self contained** Access Units. It is a characteristic of TT that text
elements will be displayed and removed in a pre-determined sequence. The
process of rendering TT to a user visible form is in effect streaming from
storage to the display surface.

This is also true of the creation process - the TT will be manipulated at an
Access Unit level, effectively a two way 'streaming' between Storage and the
editing process. In the subtitling (captioning) world, the repeated
previewing and adjustment of the created material is a given.

I realise that I am playing a little fast and lose with the term streaming
here.... but I feel TT is by nature inclined to a 'streamable' format.

> Among these various contexts, there appear to be a number of
distinct buffering and timing models:

<SNIP>

> 2. Can (and should) the models described above be simplified
and/or generalized?

I suspect that the non-streamed models may be sub sets of certain streamed
models, that is, if a syntax is developed that supports streaming - it may
be specified such that by default it supports the non-streamed case.

regards John Birch

Senior Software Engineer

> Screen Subtitling Systems  
> The Old Rectory, Church Lane
> Claydon, Ipswich, Suffolk
> IP6 OEQ
> 
> Tel: +44 1473 831700
> Fax:+44 1473 830078
> www.screen.subtitling.com 
> 
The views and opinions expressed are the author's own and do
not necessarily reflect the views and opinions of the Screen Subtitling
Systems Limited.

> Whilst all efforts are made to safeguard Inbound and Outbound
> emails, we cannot guarantee that attachments are Virus-free or compatible
> with your systems and do not accept any liability in respect of viruses or
> computer problems experienced.
> 



