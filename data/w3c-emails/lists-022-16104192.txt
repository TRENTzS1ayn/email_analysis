docno="lists-022-16104192"
received="Thu Jan 30 14:55:33 2003"
isoreceived="20030130195533"
sent="Thu, 30 Jan 2003 12:01:55 -0800"
isosent="20030130200155"
name="Erik Hodge"
email="ehodge@real.com"
subject="Re: [public-tt] &lt;none&gt;"
id="5.1.0.14.2.20030130111735.031d4ca0@mail.real.com"
charset="us-ascii"
inreplyto="61F38EE08D2FD511AB270050DA8B6EAF46ACEA&#64;mail.rapidtext.com"
expires="-1"


To: Jason Terando<jterando@rapidtext.com>,"'public-tt@w3.org'"<public-tt@w3.org>

At 09:42 AM 1/30/2003 -0800, Jason Terando wrote:

>I guess where this is going is should TT files include the ability to 
>address multiple types of consumers in a single/file stream; or would it 
>be better from a design, implementation and consumption standpoint to 
>limit each TT file/stream to a single type of consumer; or to support 
>heterogenous types of consumers in a single TT file/stream?

We'll certainly want to look at these options.  Here is a quick
(and surely incomplete) list of advantages of each approach:

Single file containing multiple data sets:
(1) One file can, in *some* cases, be easier to author and maintain
than multiple files.
(2) consumer can switch between data sets on-the-fly without the
overhead of having to end one stream and fetch & begin another.

Multiple files, one file per data set:
(1) Multiple files can, in *some* cases, be easier to maintain/edit
than a single combined-data-set file.
(2) Each stream can come from a different file source, thus each
could be stored in a different place, e.g., the Spanish-text version
could reside on a Barcelona server where a native speaker could
author and maintain it, while the Japanese version could reside on,
say, a Tokyo server.
(3) No client-side processing is necessary to separate the relevant
stream from the unwanted ones.
(4) Extra bandwidth is not consumed transmiting unrequested data.
(5) Reading of, seeking within, and caching of a 1-data-set file
are all faster than they are with a multiple-data-set file.

         - Erik



