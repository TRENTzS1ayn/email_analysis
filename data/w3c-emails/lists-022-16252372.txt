docno="lists-022-16252372"
received="Fri Jan 31 12:34:49 2003"
isoreceived="20030131173449"
sent="Fri, 31 Jan 2003 18:34:14 +0100"
isosent="20030131173414"
name="Robin Berjon"
email="robin.berjon@expway.fr"
subject="Re: TT and subtitling"
id="3E3AB396.9030106@expway.fr"
charset="us-ascii"
inreplyto="7249D02C4D2DFD4D80F2E040E8CAF37C01FA9C&#64;longxuyen.xfsi.com"
expires="-1"


To:"Glenn A. Adams"<glenn@xfsi.com>
CC:public-tt@w3.org


Glenn A. Adams wrote:
> From: Robin Berjon [mailto:robin.berjon@expway.fr] 
>> Couldn't we use SVG fonts here? It would seem to be a perfect 
>> fit for the task. 
>> SVG Basic and Tiny define a subset of the font 
>> capabilities[1] that have been 
>> shown to be suitable to constrained devices.
> 
> Yes, this is certainly a possibility. However, I wonder if these
> capabilities have indeed been implemented in any small footprint
> devices yet. I have heard from some sources that "SVG Tiny is not
> nearly tiny enough", and the reason the tend to give is the inclusion
> of the basic font module.

Yes, they have been implemented by several vendors. The rant that Tiny isn't 
tiny enough tends to be disproved in practice. At any rate if Tiny's font 
mechanism is too tough for the range of devices you are addressing, I'm certain 
it will be possible for you to sort something out with the SVG WG.

> One potential issue with the SVG font format is its apparent
> lack of support for bitmap as opposed to outline glyph representations.
> I would like to have seen a mechanism in SVG fonts that would support
> the use of a "data:..." URI in which one may embed a bitmap directly.
> Perhaps there is such support and I simply haven't discovered it.

SVG Full glyphs "can be either a single path data specification within the d 
attribute or arbitrary SVG as content within the 'glyph'"[1]. This includes the 
image element, which in turn "must support base64 encoded content using the 
"data:" protocol"[2].

However in SVG Basic and Tiny, that is not possible as "only the 'd' attribute 
on the 'glyph' and 'missing-glyph' elements is available. Arbitrary SVG within a 
'glyph' is not supported."[3] So it would seem that if you include raster images 
in your requirements, Tiny is too tiny ;) A middle-ground can certainly be found.


[1]http://www.w3.org/TR/SVG11/fonts.html#GlyphElement
[2]http://www.w3.org/TR/SVG11/conform.html#ConformingSVGViewers
[3]http://www.w3.org/TR/SVGMobile/#sec-fonts

-- 
Robin Berjon <robin.berjon@expway.fr>
Research Engineer, Expway        http://expway.fr/
7FC0 6F5F D864 EFB8 08CE  8E74 58E6 D5DB 4889 2488



