docno="lists-022-2660071"
received="Tue May  4 05:24:12 2004"
isoreceived="20040504092412"
sent="Tue, 04 May 2004 10:23:25 +0100"
isosent="20040504092325"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="Re: [OEP] a Quantity pattern? [was: Re: [UNITS] FAQ : Constraints   on  data values range]"
id="4097610D.8040401@hplb.hpl.hp.com"
charset="us-ascii"
inreplyto="006301c431b5$60447fc0$afc15882&#64;Newton"
expires="-1"


To: Jeff Pan<pan@cs.man.ac.uk>
Cc:public-swbp-wg@w3.org, Guus Schreiber<schreiber@cs.vu.nl>, Bernard Vatant<bernard.vatant@mondeca.com>, Alan Rector<rector@cs.man.ac.uk>, Natasha Noy<noy@SMI.Stanford.EDU>, Ian Horrocks<horrocks@cs.man.ac.uk>, Ulrike Sattler<sattler@cs.man.ac.uk>


Jeff Pan wrote:
> 
> How is it possible use the predicate cmPerM to detect the inconsistency in
> the above example, i.e., 15cm is not 1.5m?
> 

Isn't this one of those things that we currently have no solution to.
The document it and move on approach might be appropriate.


OTOH assuming we had an oracle that could tell us

  SameIndividual(
    individual(type(LengthQuantity) value(150) unit(cm)),
    individual(type(LengthQuantity) value(1.5) unit(m)))

then we seem to have a modelling problem ... because we now have two 
different values for the same thing ...

in other words is a diameterValue a pair (value,unit) or is it an 
abstraction of a length. If the latter then we can't represent it as 
simply a pair becase of the many different equivalent pairs.
This would suggest a lengthInM and lengthInCM approach to modelling 
units so that

SameIndividual(
    individual(type(LengthQuantity) lengthInCM(150) ),
    individual(type(LengthQuantity) lengthInM(1.5) ))

works without contradiction.

I suspect that long-term it is best to work with the abstraction rather 
than the concrete pair.

Jeremy



