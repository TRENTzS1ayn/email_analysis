docno="lists-022-3140475"
received="Mon May 10 20:01:41 2004"
isoreceived="20040511000141"
sent="Mon, 10 May 2004 17:01:35 -0700"
isosent="20040511000135"
name="Natasha Noy"
email="noy@SMI.Stanford.EDU"
subject="Re: [OEP] Draft of a note on n-ary relations"
id="5E374866-A2DE-11D8-B7E8-000A958B5C28@smi.stanford.edu"
charset="US-ASCII"
inreplyto="p06001f30bcc184355934&#64;[10.0.100.76]"
expires="-1"


Cc:public-swbp-wg@w3.org
To: Pat Hayes<phayes@ihmc.us>


> 2. Strictly, this way of describing it is wrong: the thing that gets, 
> er, reified is not the relation, but an instance of the relation (A 
> tuple rather than set of tuples: sometimes called a trope or a 
> situation or a holding, or more prosaically a fact or even an event). 
> If you aren't clear about this the account gets kind of murky: for 
> example, in your example, the relation is a 3-argument thing, but the 
> orange node has role-style links only to two arguments: so if it is a 
> relation is is binary or trinary? But if it was binary, why did you 
> need to do anything about it in the first place? And what is the 
> relationship between the relation Diagnosis_Relation and the property 
> link labelled has_diagnosis? Shouldnt there be some kind of actual 
> (not reified) property to which the reified property is somehow 
> related? How?? And so on.
>
> I'd suggest that it would  be better to say something like his:
>
> "If we need to...., we can do it by creating individuals which stand 
> for an instance of the relation, and relate them to the things that 
> are involved in that instance of the relation. The original relation 
> can be thought of then as the class of all these relation-instances. 
> This is sometimes described as a 'role-value' style of description, 
> where the various arguments are seen as playing a 'role' in the fact 
> or event indicated by the instance of the relation."

Pat, thanks for the constructive suggestion. We'll try to weave in 
something like this and get rid of the word "reify" to avoid religious 
wars. That said, perhaps we can put a note saying that doing so is 
often called "reifying a relation" to ground it for those who actually 
do know the KR meaning of the word.

> 3. Most importantly, I don't like the note saying that this is 'THE 
> general solution' . It is one of several options, and not clearly 
> always the best one. OWL for example frequently uses a different 
> option, where the second argument of the relation is made into a list 
> of the remaining arguments: this has many practical advantages, the 
> most important being that the property stays a genuine property.

Yes, someone pointed out  this solution privately and we'll try to 
include it as one of the options. Do you have a good example of when 
such a solution would be preferable?

> Other options still are a systematic role-value style of expressing 
> things (which your example could be, in fact: its not quite clear) and 
> other 'container' style solutions, and its even possible, though 
> clunky, to use things like binary subProperties to play the role of 
> the component links.

hmm... I am losing you there. If you think it's worth mentioning as one 
of the alternatives, perhaps you could give some examples/descriptions? 
Or does it get too clunky to recommend it to people?

> 4. I think that the discussion of the two cases distinguished by 
> whether there is an 'originator' is best omitted. It is potentially 
> misleading and has no connection whatever with the OWL semantics, and 
> in any case isnt needed for the point being made.
>

Well, as an ontology designer, if I am reading a note like this, I 
would like to have some indication of which approach to choose. Perhaps 
the indication that we've given is not the best one (in fact, it most 
probably isn't), but if you could suggest an alternative simple 
rule-of-thumb-type explanation, that would be great.

Thanks a lot!

Natasha



