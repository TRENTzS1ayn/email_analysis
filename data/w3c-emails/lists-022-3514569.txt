docno="lists-022-3514569"
received="Thu May 13 20:45:30 2004"
isoreceived="20040514004530"
sent="Thu, 13 May 2004 17:42:44 -0700"
isosent="20040514004244"
name="Natasha Noy"
email="noy@SMI.Stanford.EDU"
subject="Re: [OEP] Draft of a note on n-ary relations"
id="9D5ABBE6-A53F-11D8-93C6-000A958B5C28@smi.stanford.edu"
charset="US-ASCII"
inreplyto="BHEGLCKMOHGLGNOKPGHDEEAFCDAA.jjc&#64;hpl.hp.com"
expires="-1"


Cc: Alan Rector<rector@cs.man.ac.uk>, swbp<public-swbp-wg@w3.org>
To:"Jeremy Carroll"<jjc@hplb.hpl.hp.com>


Jeremy,

> I've got another comment that I have not managed articulate yet - it is
> possibly two comments.
>
> I'll try and sketch the point here, in the hope that someone else will 
> be
> able to pick it up and run with it.
>
> 1) (more basic one)
> defaults and nulls
> This design pattern may well be used by people porting relational data 
> to
> RDF and OWL. Sometimes that permits null values; the most obvious 
> mapping is
> null values get mapped to 0 triples.
> Unfortunately, the semantics of a column might indicate some default
> semantics when a null is present. This is not appropriate on the 
> semantic
> web and default values need to be made explicit. (e.g. a language 
> column in
> a US library might only be used for foreign works, i.e. not in US 
> english)
>
> 2) harder point
> again, in the same use case of porting from a relational database.
>
> In porting to RDF you need to break the n-tuples into triples, one per
> column. RDF semantics imposes a monotonic semantics on these triples.
> This can result in porting errors where the semantics of an n-tuple 
> depends
> on the values of its fields in a non-monotonic fashion. These errors 
> can
> best be avoided by making it clear in any rdfs:comment that a single 
> triple
> does not have meaning, but the combination forming an n-tuple is given
> meaning (poorly expressed), see the way that OWL Full discusses the 
> meaning
> of owl:onProperty.
>
> combining the above:
>
> An example of where this might fail is where the n-tuple represents a
> certificate, and one of the fields is called "valid-until" and if the 
> value
> is null the certificate is understood as always valid. The most obvious
> mapping to triples is flawed by being non-monotonic.

I have a vague idea what your point here is, but it's very vague 
indeed. Someone will have to "run  with it", as you say, if it is to be 
more clear.

However, from what I can gather, I think this issue is out of scope for 
the note on how best to represent n-ary relations in RDFS and OWL. You 
may want to write a different note on how best to import data from 
relational database (and it may be a good idea to do so), but I am 
strongly in favor of each of these notes on ontology-design patterns to 
focus on one particular issue, and either sweep other issues that come 
up in examples under the rug, or (better yet!) cross-reference another 
note or pattern.

If I am trying to build an ontology and have to represent an n-ary 
relation, I want to read something that is brief and hopefully answers 
my question rather than sort through many related topics trying to find 
my answer.

The most difficult part would be somehow indexing or bringing all this 
stuff together later, when we have enough notes to try and bring them 
together.

Natasha



