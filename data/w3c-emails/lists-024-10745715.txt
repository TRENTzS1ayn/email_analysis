docno="lists-024-10745715"
received="Fri May  9 22:55:23 2003"
isoreceived="20030510025523"
sent="Fri, 09 May 2003 15:49:57 -0400"
isosent="20030509194957"
name="golbeck"
email="golbeck@gwu.edu"
subject="OWL S&amp;AS Comment - owl:imports"
id="3EBD5568@newman"
charset="ISO-8859-1"
expires="-1"

To:public-webont-comments@w3.org



We have some concerns with the semantics of owl:imports:
1) While clear, it doesn't have a desirable behavior in many, if not most 
cases
2) There is no alternative mechanism for sharing parts of ontologies, and no 
place holders for such
3) The explication in the Reference and Guide is confusing

Concerns 1) and 2) were inspired by our work on converting the NCI terminology 
from its proprietary XML format to OWL. The resulting file (viewable at 
http://www.mindswap.org/CancerOntology) is 46MB and, because of the size, has 
broken nearly every existing tool we have tried to use.

One  solution we considered was breaking the terminology into different files. 
However, since the concepts defined therein are interlinked, each subfile 
would have to import all others. Because the current behavior of imports joins 
all terms from the imported ontologies, the separate files actually offer no 
size solution.

When creating their own files, users may want to borrow a single term from a 
large ontology. With the current function of "imports", a small file that uses 
one term from cyc would become huge. As the semantic web becomes increasingly 
interlinked, a file with only a handful of concepts and a few imports could 
easily grow to be several gigabytes because of cascading includes.

To address this issue, we would like to see an alternative that allows users 
to import only specific elements of an ontology.

3) With respect to specific documents:


From OWL Reference, 7.2: """Note that the importing a document is different 
than creating a namespace reference. owl:imports do not set up a shorthand 
notation for names as does a namespace reference. On the other hand, the 
namespace reference does not imply that all (or even any) ontological terms 
from that namespace are being imported. Therefore, it is common to have a 
corresponding namespace declaration for any ontology that is imported."""

What is "creating a namespace reference"? It seems like you're confusing two 
different levels, the imports, which takes place at the *ontological* (or 
"graph") level, and the document level (i.e., where people write out the 
ontology). Furthermore, *namespace* declarations aren't the only way one can 
"suggest" important. Presumably *using* a term from some other ontology (via a 
uriref in an rdf:about or rdf:resource, or, higher level, as one side of an 
equivalence or subClass|PropertyOf relation. (There are folks who have written 
tools that try to import ontology documents that are "at" any URI mentioned in 
the current document.)

From OWL Guide, 2.2.: """Importing another ontology brings the entire set of 
assertions provided by that ontology into the current ontology. In order to 
make best use of this imported ontology it would normally be coordinated with 
a namespace declaration. Notice the distinction between these two mechanisms. 
The namespace declarations provide a convenient means to reference names 
defined in other OWL ontologies. Conceptually, owl:imports is provided to 
indicate your intention to include the assertions of the target ontology. 
Importing another ontology, O2, will also import all of the ontologies that O2 
imports."""

"In order to make best use..."? All the namespace declaration *can* get you is 
some syntactic shortcuts. It's as if you'd written, "In order to make best use 
of an imported ontology it would normally be coordinated with an entity 
declaration." Furthermore, in some "breaking the file up into pieces" 
situations, the ontology uri might not be the "namespace" of some, many, or 
even most of the terms in that ontology (e.g,. you import ontology A which 
merely imports B, C, D, and E -- i.e., it's a convenience). In other words, an 
ontology's uri doesn't have any necessary (or necessarily likely) connection 
to a prefixing substring of its terms' uris. And that's what's needed for the 
namespace dec to be useful. There's no scenario in which it affects what you 
can do, or do well, from the semantic point of view.

-Jennifer Golbeck and Bijan Parsia



