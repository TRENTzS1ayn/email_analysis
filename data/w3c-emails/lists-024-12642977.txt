docno="lists-024-12642977"
received="Wed Sep 24 05:57:58 2003"
isoreceived="20030924095758"
sent="Wed, 24 Sep 2003 10:48:39 +0200"
isosent="20030924084839"
name="Raik Gruenberg"
email="graik@web.de"
subject="why not collapse sameAs, equivalentClass...and other questions"
id="200309241047.25580.graik@web.de"
charset="us-ascii"
expires="-1"

To:public-webont-comments@w3.org



Hi all,

since a year or so (on and off) I have been working on a java library for the 
data mining and creation of semantic web documents (you can plug in any other 
ressources too). First of all, I used that for my own data integration 
problem but it is now very general and could be useful for others as well. 
More about that later.
It's been quite a while since I have visited the OWL pages, and I was 
surprised by the advance and the explicit call for implementator's comments. 
Sorry about the delayed response, but there are two or three things I always 
wanted to know and never dared asking...

1) More a practical question: Where are the real (preferable N3) definitions 
of the current OWL items. I found a lot of helpful documents but no file 
where one can actually check whether e.g. equivalentClass is a sub-property 
of sameAs or not.

2) What are the plans for N3 vs. XML-based Syntax?

3) My library decides at runtime what "plugin" to use for reading / writing a 
given address. Have you come up with naming conventions ala "a file in N3 
syntax should be called *.n3" etc.?

4) I am now implementing the automatic follow-up and collapsing of Elements 
related by owl:sameAs. Why is owl:sameAs not also used for Classes and 
Property definitions? Are equivalentClass and equivalentProperty, at least, 
subPropertyOf owl:sameAs? As I understand, each owl:Class definition will 
have a property "owl:type owl:Class" and each Property definition will have 
one "owl:type owl:Property". It is hence quite clear what to expect on the 
other side (although it helps to have a more restricted owl:range). 

In my implementation the java classes for Class and Property definitions are 
both derrived from the basic "Element" (which defaults to owl:Thing). It 
hence spares me some work if things like equivalentClass and 
equivalentProperty are at least childs of sameAs and not completely 
independent. The same is true for subClassOf and subPropertyOf.

5) More a beauty question. Is it necessary to still have  rdfs:XXX 
defintinions in the OWL name space? Almost all classes and properties defined 
by OWL are also rooted in the owl name space. I have just recently discovered 
that some are not (such as, I think,  rdfs:id and rdfs:subPropertyOf (?) ). 
For me it would be a bit simpler  (and cleaner) if all the basic language 
features that have to be hardcoded into the library (because the program 
needs to react to them) belonged to the OWL name space.

OK, that's enough for the beginning.
Greetings and Thanks for any response!

Raik

Raik Gruenberg
Unite de Bioinformatique Structurale
Institut Pasteur, Paris



