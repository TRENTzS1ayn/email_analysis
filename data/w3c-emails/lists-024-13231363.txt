docno="lists-024-13231363"
received="Sun Jan  4 09:00:37 2004"
isoreceived="20040104140037"
sent="Sun, 04 Jan 2004 18:54:26 +0500"
isosent="20040104135426"
name="Mikhail Khlopotov"
email="mik@prima.susu.ac.ru"
subject="Property Properties in OWL Was:[RE: Properties in OWL]"
id="3FF81B12.4090506@prima.susu.ac.ru"
charset="us-ascii"
expires="-1"


To:public-webont-comments@w3.org


>Just follow your question: I have the same feeling.

I do believe that property properties could be useful and sometimes vital.
A bit more about that later.

>For example: suppose there is a property HasYield (integer), 
>but what about the unit this property is using,(Kg, g, etc.)? 
>It is the quesion of property about property.

In this case you should not assign a property to HasYield, but 
instead make a class of "Measures", instances of which will have 
a separate property for value and for unit. Ex:
  ex:something your:HasYield ex:measure1
  ex:measure1 ex:value [10]
  ex:measure1 ex:unit ex:kilograms

>Could OWL figure out this situation?
>Thanks in advance!

Another example I can think of is how do we provide a source of information for a assertion,
like "Acording to CNN & BBC meeting will take place in Brighton", assuming that you trust this statement 
but keep CNN & BBC reference for future.

Asserting properies about properties has some issues:
1) RDF, RDFs and OWL assumes, that every time you say "friends" 
   you use the same property "ex:friends", and it's the same resource.
   So you can't say that Mike and Jim are "old friends"* by saying 
      Mike ex:friends Jim
      ex:friends rdf:type ex:old
   You will say that all the friends are old.  
   * - Bad example, actually. "old friends" should be stated as a subproperty of "friends".
2) You can not assert that a property is false or negative, because
   the original assretion will remain in the graph.  You should use reification 
   on this purpose.
3) p on p's are forbidden in OWL. 

RDFs and OWL have a rdfs:subpropertyOf relation, which helps you solve issue 1.
You should individualise properties you want to speak about, and make them subproperties 
of your original property. So you'll keep original semantics and restrictions of a property, 
but also will make it unique.
Any way, this is restricted by the OWL specification, whis is inconsistent (as far as I have read)
about this - properties can't have properties, but they do have them - "type", "subPropertyOf",
"inverseOf", so on.

I have a small article about properties having properties acording to different levels - RDF,
RDFs, OWL.  It's in Russian, and I will provide a link as soon as I translate it.

Mikhail Khlopotov.
South Ural State University, Russia.



