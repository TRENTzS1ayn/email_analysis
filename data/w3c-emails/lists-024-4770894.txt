docno="lists-024-4770894"
received="Tue Aug  6 05:57:20 2002"
isoreceived="20020806095720"
sent="Tue, 06 Aug 2002 11:57:18 +0200"
isosent="20020806095718"
name="J.R. van Ossenbruggen"
email="Jacco.van.Ossenbruggen@cwi.nl"
subject="Comments on draft &quot;Feature Synopsis for OWL Lite and OWL&quot;"
id="200208060957.g769vIP32674@gemini.ins.cwi.nl"
expires="-1"


To:public-webont-comments@w3.org


Hereby some comments on the feature synopsis draft. These are
my personal comments, not necessarily CWI's.

While I think the feature synopsis document is a good addition
to the more formal documents, I think the synopsis good do better
in making explicit to what class(es) of applications these features
are aimed at.  This would guide readers in the process of choosing
what language to use, but also help to convince the membership 
of the added value of having these ontolgoy languages (given the 
amount of discussion at the start of the WG, WebOnt needs to convince 
the public of their added value, maybe even more than other 
working groups do).

This applies in particular to OWL Lite.  It is a little more than
RDFS, and a little less than full OWL.  Those features that
are added on top of RDFS, why were they added?  And those features
that where left out of Lite, but are present in full OWL, why are they 
choosen not to be in OWL Lite?  What is the goal of OWL Lite?  
The current goal is rather vague:

    The goal of OWL Lite is to provide a language that is viewed by
    tool builders to be easy enough and useful enough to support.

(apart from being vague, this could also suggest that the other languages
 are not easy and useful enough to support...)

I think the goal has to be more explicit.  Maybe it could reach out 
to the "non-AI crowd" more, and explicitly discuss the OWL Lite features
in the terms familair to users dealing with metadata (e.g. "the digital 
library crowd"), UML designers (e.g. "the OO crowd"), semantic modelers 
(in the database sense of the term, so those doing (extended) Entity
Relationship modeling etc).  

Explicit statements like "these and these features are not part of RDFS, 
but you need them to represent features found in most ER/UML diagrams" 
would help.  An example of a typical ER-diagram and a typical UML 
diagram with their OWL-lite serialization would also help.

I also would like to see some discussion to practical usage scenario's
for toolbuilders like:

    If your tool already support RDFS (+MT) than adding OWL Lite
    support will cost you <placeholder for "little"> while your
    customers get <placeholder for "much">.

In short, after reading the synopsis, readers should have an intuition
about what language is most suited for their application.  

Regards,

Jacco van Ossenbruggen



