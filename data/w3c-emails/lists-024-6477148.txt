docno="lists-024-6477148"
received="Fri Apr 11 10:16:23 2003"
isoreceived="20030411141623"
sent="Fri, 11 Apr 2003 15:15:21 +0100"
isosent="20030411141521"
name="Jeff Z. Pan"
email="pan@cs.man.ac.uk"
subject="S&amp;AS comments"
id="00ca01c30035$031106a0$6bc65882@cs.man.ac.uk"
charset="iso-8859-1"
expires="-1"


To:<public-webont-comments@w3.org>



1. Section 2

Section 2 claims that OWL uses some of the facilities of XML Schema, and some
built-in XML Schema datatypes can be used in OWL. It is not clear, however,
whether the derived datatypes based on the above supported XML Schema datatypes
can be used in OWL or not. Reasons for why they can (or can't) be used in OWL are
expected to be explained in section 2 as well.


2. Section 3

(1) In the definition of the formal syntax, rdf:type is treated as an annotation
property as follows:

ER:VAP U {rdf:type} -> P(R*(R U LVT)),

while no explanation is made about why it is treated this way.

(2) The description of the elements of VD is a bit confusing, along with the
supported datatype described in section 2. Section 2 says a list of XML Schema
datatypes can be used in OWL, ..., *and* OWL also uses rdfs:Literal and can use
rdf:XMLLiteral. Section 3.1 says VD contains the URI references of the built-in
OWL datatypes and rdfs:Literal. Thus it seems that rdfs:Literal and
rdf:XMLLiteral are not built-in OWL datatypes, and rdf:XMLLiteral is not in VD
(but can be in D of a datatype theory). Is that right?

(3) In the definition of datatype theory, it is not clear that what kinds of
datatypes can be in the set D. Does it contain only the built-in OWL datatypes,
or also their derived datatypes? If it can only consist of built-in OWL
datatypes, the datatype theory is quite limited and seems to me not enough in
many cases.

(4) In an abstract OWL interpretation, I think it might be easier to understand,
if we present S in the following way:

S: VI -> R
SA: VI U VC U VD U VDP U VIP U VAP U VO U {owl:DeprecatedClass,
owl:DeprecatedProperty} -> R U LVT

so that we won't confuse ourselves S(i),the interpretation of an individual URI,
and SA(i), some annotation of  an individual URI. Surely S can be further
extended to plain literals and types literals. I believe separating
interpretation and annotation is usually a good idea.

(5) The expression EC(annotation(p1 o1)) seems to me a bit "annoying", partly
because having annotation in interpretation is strange, partly because
annotations don't seem to be natural elements of VC or VD.


Jeff
--
Jeff Z. Pan  ( http://DL-Web.man.ac.uk/ )
Computer Science Dept., The University of Manchester



