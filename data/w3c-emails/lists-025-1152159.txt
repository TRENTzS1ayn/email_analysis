docno="lists-025-1152159"
received="Wed Apr 16 14:29:49 2003"
isoreceived="20030416182949"
sent="Wed, 16 Apr 2003 11:27:34 -0700"
isosent="20030416182734"
name="Assaf Arkin"
email="arkin@intalio.com"
subject="Re: Terminology - What is a process"
id="3E9DA096.8000706@intalio.com"
charset="us-ascii"
inreplyto="C1E0143CD365A445A4417083BF6F42CC053D19BE&#64;C1plenaexm07.commerceone.com"
expires="-1"


To:"Burdett, David"<david.burdett@commerceone.com>
CC:"'Howard N Smith'"<howard.smith@ontology.org>,public-ws-chor@w3.org


Burdett, David wrote:

>If your "formalism" is PI Calculus (which is what I think you are
>suggesting), then does it impose any constraints on the types of tools you
>can use with it?
>
Let's change perspective for a second. pi-calculus is mathematical model 
for looking for looking at certain things and drawing conclusions about 
them. It can cover a wider definition of processes than say CCS. And it 
has appeal because it can cover a wide spectrum of definitions from the 
more complex scenarios involving calculations down to the level of a 
single unit of processing (pi-caclulus also covers lambda calculus).

Mathematical models provide forms of analysis and proofs, in this 
particular way through a form of calculation (hence the name calculus). 
By themselves they do not provide ways to construct things. If you want 
to construct a process defintion that you can exchange, monitor and 
otherwise manage, you would have to look at languages like BPEL, BPML 
and WSCI. If you want to construct a process definition that you can 
depict visually - and this is certainly an interesting thing to do - you 
would look at visual notations like BPMN and UML.

There is no constrain on the things you can do or the type of tools you 
can use. What you get is the ability to pick the right tool for the job 
and use the formalism to draw conclusions about it. For example, you may 
decide on a tool that can only define bi-lateral choreographies because 
that happens to be your main interest at some point in time. The 
formalism will address that.

At some other point in time you may want to go further and add 
multi-party collaboration, or you may want a tool that can show you the 
n-party collaboration along with your implementation process that takes 
part in it. The tool needs to be more sophisticated, and you need some 
formalism that goes both ways. pi-calculus is interesting because it 
allows that formalism to exist, and at the same time allow these variety 
of tools and languages to use that formalism.

arkin


>David
>
>  
>



