docno="lists-025-13010552"
received="Fri Jun 20 10:09:09 2003"
isoreceived="20030620140909"
sent="Fri, 20 Jun 2003 10:08:33 -0400"
isosent="20030620140833"
name="Jean-Jacques Dubray"
email="jjd@eigner.com"
subject="RE: FW: BPSS_f2f_june03.ppt"
id="000801c33735$7007a750$2278050a@JJD"
charset="us-ascii"
inreplyto="3EF30BF4.2080504&#64;sun.com"
expires="-1"

To:"'Monica J. Martin'"<monica.martin@sun.com>,"'Anders W. Tell'"<opensource@toolsmiths.se>
Cc:"'Martin Chapman'"<martin.chapman@oracle.com>,<public-ws-chor@w3.org>



Another big advantage of using MOF is that you can readily store the
corresponding definitions (e.g. choreography definitions) in a MOF
compliant repository which are standard components.

There is also very little constraints (as I understand it) to take a
metamodel and make it MOF compliant.

Jean-Jacques 
 
 

>>-----Original Message-----
>>From: public-ws-chor-request@w3.org
[mailto:public-ws-chor-request@w3.org]
>>On Behalf Of Monica J. Martin
>>Sent: Freitag, 20. Juni 2003 09:28
>>To: Anders W. Tell
>>Cc: Martin Chapman; public-ws-chor@w3.org
>>Subject: Re: FW: BPSS_f2f_june03.ppt
>>
>>
>>>
>>>
>>>> mm1: What is your view Anders, in the context of your area of
>>>> expertise and/or as a member of this team?
>>>
>>>
>>> View of what Monica? You know my view of next maintenance release of
>>> BPSS which I posted in appropriate BPSS team forum. I dont want to
>>> burden this with out of scope issues.
>>
>>
>>mm1: Your answer below is what I was looking for: (1) Rationale for
>>consideration of MOF, (2) Your work and the ongoing work of UML 2.0
>>
>>>
>>> I can share one view with you that may interest this groups and that
>>> is how I prefer to create meta models. Its the same principle Ive
used
>>> for BPSS and CoreComponents.
>>>
>>> I have a strong preference to create meta models based on MOF which
is
>>> the same meta meta model used to define UML. By using MOF I can
create
>>> java API's, XML Schema, reading writing source code automatically
>>> using standardized specifications. Kind of nifty since all I have to
>>> do is create one single file and the rest us generated
automatically.
>>> The manipilation java binary code is actually generated on te fly
when
>>> loading the metamodel.  The best is that all is open source !
>>> ........
>>
>>mm1: If you raise concerns, explanations such as these will be helpful
>>for the group to evaluate what formalisms they deem appropriate for
>>their area of interest.
>>
>>Thanks.



