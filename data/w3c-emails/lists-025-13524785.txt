docno="lists-025-13524785"
received="Wed Jun 25 15:34:33 2003"
isoreceived="20030625193433"
sent="Wed, 25 Jun 2003 14:31:25 -0500"
isosent="20030625193125"
name="Robert Haugen"
email="bob.haugen@choreology.com"
subject="RE: BurdettML comments"
id="003c01c33b50$5eba5c80$6601a8c0@PC1"
charset="iso-8859-1"
inreplyto="BurdettML comments"
expires="-1"


To:<public-ws-chor@w3.org>


David Burdett wrote:
<DB>
I think that the three states, NotLoggedIn, LoggedIn and LoggedOut are
states that belong only to the client.
[...]
The server has a
different set of states, for example: LoginRequestReceived and, once the
login request is checked either LoginRequestOk or LoginRequestFail.

The point I am trying to make is that I think that a state is *always*
associated with a role and not the choreography as a whole. I discussed
this
in an earlier email which described how the state of a choreography as a
whole is unknowable by any single role unless the choreography is
halted.
[...]
In [John Dart's] example
for "DoLogin" to succeed, you would need two messages the LoginRequest
from
the client to the server and the LoginResponse from the server to the
client. The result could be either succeed or fail.
[...]
</DB>

Isn't there a contradiction here?

If "the result could be either succeed or fail",
doesn't that imply a unit of work, at the end of which
there is some aligned state of some larger "something"?
(The "result"?)

Don't both client and server need to agree
whether the login attempt succeeded or failed?
(Even if they call it different names.
Which begs the question, how do they know
it's equivalent?)

So is 1 choreography = 1 unit of work in your scheme of things,
whether we call it a choreography or transaction or whatever?

If so, what do we call many units of work?
That is, what do we call the overall set of interactions
between client and server, or,
didn't the client login in order to do something?
.



