docno="lists-025-5760314"
received="Fri Dec  5 18:55:56 2003"
isoreceived="20031205235556"
sent="Fri, 05 Dec 2003 15:55:10 -0800"
isosent="20031205235510"
name="Assaf Arkin"
email="arkin@intalio.com"
subject="Re: Why workflow is NOT just a Pi-process"
id="3FD11ADE.8000800@intalio.com"
charset="us-ascii"
inreplyto="DKECLNDMLPCDENMPGCBIMEGICJAA.jcreddy&#64;bpmlabs.com"
expires="-1"


To:jcreddy@bpmlabs.com
Cc:public-ws-chor@w3.org


JC Reddy wrote:

>
>  
>
>>I can confirm this. The Intalio implementation of BPML/BPEL is quite
>>    
>>
>stunning in this respect.
>  
>
>>In fact, in many project models I have seen at CSC, many of the swimlanes
>>    
>>
>are users or imaginary
>  
>
>>white space processes. Change mgt processes are a great example.
>>    
>>
>
>Yes, you can do it, i.e., model users as processes. However, the "user"
>notion is not explcit, and hence applications  will need to build the
>semantics (in creating worklists, mapping to access control systems, and
>such). Different vendors may support this in their own ways, but it is not
>in the model.
>  
>
Now you've captured the essence of the problem. The product as it stands 
can satisfy all the requirements you are talking about (worklist, access 
control, delegation, etc). However, the definition that is produced by 
the design tool to instruct the engine how to do that is product 
specific. In other words, the definition created by product A cannot be 
shared with product B. This problem can easily be solved by defining a 
standardized schema for capturing all that information that can be 
interchanged across products.

If we can come up with such a standard specification, we will accomplish 
two interesting goals. First, we'll be able to exchange those 
definitions across products, so a user definition can be generated in 
product A and used to provide user functionality in product B. Second, 
being independent of the process definition language it could be used 
with languages like BPML, BPEL, WSDL, WS-Chor, insert your own name here.

There's already a hook that allows you to identify and reference the 
"user process" using its QName. What you need is a standardize user 
definition that could reference the user process using that QName. The 
user definition and user process could then be fed into the engine to 
configure the desired user experience (worklist, access control, etc). 
The interesting part here is that you can easily mix and match 
definitions from various places. You can have a user definition coming 
from one source (say, group manager) and user process definition coming 
from a different source (say, process designer) and mix and match them, 
including the ability to do multiple references (i.e. one user 
definition reused across many user processes, and vice versa).

Assaf



