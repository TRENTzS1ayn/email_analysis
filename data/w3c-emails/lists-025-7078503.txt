docno="lists-025-7078503"
received="Tue Feb 25 18:29:36 2003"
isoreceived="20030225232936"
sent="Tue, 25 Feb 2003 15:25:14 -0800"
isosent="20030225232514"
name="Jon Dart"
email="jdart@tibco.com"
subject="Dubray paper comments + questions"
id="3E5BFB5A.3030006@tibco.com"
charset="us-ascii"
expires="-1"


To:public-ws-chor@w3.org



I'd like to add some comments, and raise some questions, regarding
Jean-Jacques Dubray's paper (http://www.ebpml.org/ebpml2.2.doc), which
was discussed a bit in an earlier thread.

If I can attempt a summary: Dubray's paper advocates separating
message flow, data flow, and control flow definitions. This provides a
separation of layers, without precluding the ability to model both
interior and exterior flows. The control flow model is "pluggable", so
that in fact the same framework could support different kinds of
control flow modelling - the examples use BPSS, but this isn't
required.

A few comments:

Generally, this seems to be an interesting and valuable approach. It
leverages some of the work that has gone into ebXML, which is one of
the more sophisticated B2B frameworks.

The paper envisions that business transactions could involve an
exchange of multiple messages, that these could be asynchronous, and
that correlation between messages may therefore be necessary. I think
these are necessary features to support, but the examples don't really
demonstrate how to support them, as far as I can tell. Transactions
are also identified as being out of scope (p. 15).

The DataFlow example (p. 15) seems to me overly simple. It shows data
inputs and outputs connected by XSLT transformations. This is useful,
but it's only one example of what could be a complex transformation,
possibly involving iteration and other workflow concepts. This being
the case, is it useful to distinguish a data flow from a control flow?
(The diagram on p. 15 actually confuses the two, because there's a
comment indicating that a "Control flow" is starting, but the tag that
begins it is called "DataFlow", although its end tag is
"ControlFlow").

It would be interesting to see in more detail whether, and how,
something like BPEL4WS could be fit into this framework - I understand
that they're fundamentally different approaches, but to the extent
that they're attacking the same problem, it ought to be possible to
take a BPEL4WS model and re-express its essentials in this framework.

There is mention at the end of the paper of three planned followup
papers - are any of these available?

--Jon



