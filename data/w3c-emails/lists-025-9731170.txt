docno="lists-025-9731170"
received="Fri Jul 18 16:27:35 2003"
isoreceived="20030718202735"
sent="Fri, 18 Jul 2003 13:27:31 -0700"
isosent="20030718202731"
name="Jon Dart"
email="jdart@tibco.com"
subject="Re: what is the use case for a choreography language."
id="3F185833.2090706@tibco.com"
charset="us-ascii"
inreplyto="000001c34d66$1422be10$df807ad5&#64;corp.choreology.com"
expires="-1"


To: Tony Fletcher<tony_fletcher@btopenworld.com>
CC:public-ws-chor@w3.org


These are certainly valid questions. They were discussed a bit at the 
F2F, I think.

My assumption to date has been that a choreography description is a kind 
of superset of WSDL. WSDL tells you how to interact with web services 
individually. It tells you what messages the service produces and 
consumes, in what order (MEPs), and (at the concrete level) how to 
access the service.

WSDL says nothing about how you interact with multiple services, in 
terms of ordering and sequencing. That's the purpose of choreography, or 
at least one of the purposes.

So a participant in a choreography could use the description of the 
choreography to determine how to play a role in it, much as a client 
uses a WSDL description to know how to interact with a service. 
"Determine" can have various meanings and I don't think we want to be 
very precise about it. You could use the description to generate code or 
to build a workflow that would interact with the choreography, sending 
the right message(s) in the right order, and handling and reporting 
errors. I could also think of more dynamic kinds of application that 
adapt themselves to (for example) different partner's ideas of how a 
P.O. should be submitted, but that's a bit harder to do, IMO.

We also discussed possibly having some kind of monitor application that 
was driven off a choreography description and used the description to 
validate that the mesage flows followed the description and didn't 
violate any of its rules.

--Jon

Tony Fletcher wrote:

> What is the use case for having a Choreography language of the type that
> this group is trying to develop?  Who will use it or what will use it.  At
> what stage(s) of designing and running business processes will it be used?
> What will we be able to achieve when we have the language available that we
> can not achieve now?  (And what are the advantages of expressing the
> language in XML syntax (I can list some disadvantages already!) rather than
> just building the language ourselves (as Java, C#, Perl, etc., etc.)?
> 



