docno="lists-025-9811619"
received="Fri Jul 18 16:58:42 2003"
isoreceived="20030718205842"
sent="Fri, 18 Jul 2003 16:43:34 -0400"
isosent="20030718204334"
name="Champion, Mike"
email="Mike.Champion@SoftwareAG-USA.com"
subject="RE: what is the use case for a choreography language."
id="9A4FC925410C024792B85198DF1E97E4061E3538@usmsg03.sagus.com"
charset="iso-8859-1"
inreplyto="what is the use case for a choreography language."
expires="-1"


To:public-ws-chor@w3.org




> -----Original Message-----
> From: Jon Dart [mailto:jdart@tibco.com]
> Sent: Friday, July 18, 2003 4:28 PM
> To: Tony Fletcher
> Cc: public-ws-chor@w3.org
> Subject: Re: what is the use case for a choreography language.
> 
> 
> 

> WSDL says nothing about how you interact with multiple services, in 
> terms of ordering and sequencing. That's the purpose of 
> choreography, or at least one of the purposes.

Yes, that's a biggie.  Lots of people need WSDL++ for when multiple parties
are involved.

> You could use the description to 
> generate code or 
> to build a workflow that would interact with the 
> choreography, sending 
> the right message(s) in the right order, and handling and reporting 
> errors. 

That's another biggie for us. I think Yaron put it very clearly -- their
customers, like ours, just want to be able to use a tool to draw a
multi-party workflow and have that captured in standardized XML.  Lots of
applications need such a thing, but they don't necessarily want the standard
to specify the business level semantics of what that workflow / business
process means -- that's where some of us want to add value, either in
products or custom code.   But we do want the basic state machine captured
so that the network effect can do its magic to produce lower-level tools,
mindshare, etc.


 



