docno="lists-026-1720527"
received="Mon May  5 15:45:28 2003"
isoreceived="20030505194528"
sent="Mon, 05 May 2003 12:45:20 -0700"
isosent="20030505194520"
name="Jon Dart"
email="jdart@tibco.com"
subject="Re: internal vs external"
id="3EB6BF50.8030201@tibco.com"
charset="us-ascii"
inreplyto="3EB6BA25.2020709&#64;intalio.com"
expires="-1"


To: Assaf Arkin<arkin@intalio.com>
CC: Champion Mike<Mike.Champion@SoftwareAG-USA.com>,public-ws-chor@w3.org


Assaf Arkin wrote:


> The rule I stand by is "what you don't need to expose should not be 
> exposed. period". 

This is a good general design principle, but there are cases where you 
need to limit information and cases where you don't. If the choreography 
involves only internal, non-sensitive systems, then each can have 
complete information about the other, at least complete at the level of 
what interfaces are used and how they interact (not message contents, 
necessarily).

> I would not be interested in supporting a language 
> that forces me to expose to any party how I happen to do things when I 
> service their requests. Except in those case where I do need to expose 
> that information for the benefit of these parties as agreed upon by all 
> parties involves (in this case customer, rental agency, credit agency). 
> My question is therefore how do I deal with those cases that do require 
> some specific steps to be exposed in a controlled manner as dictated by 
> the business scenario?
 >
 > arkin

This is related to the "central"  vs. "participant-focused" modelling 
issue that has periodically been discussed in this group (and which has 
recently re-surfaced in ws-arch).

If I have to employ a centralized model that includes all participants, 
then IMO it becomes more difficult to "hide" interactions from some 
subset of those participants. (I say more difficult rather than 
impossible, because you could imagine a technology that combined a 
central modelling facility with views into the model).

--Jon



