docno="lists-027-6802704"
received="Thu Jul 17 11:31:41 2003"
isoreceived="20030717153141"
sent="Thu, 17 Jul 2003 11:28:41 -0400"
isosent="20030717152841"
name="Steve Graham"
email="sggraham@us.ibm.com"
subject="RE: attributes &amp; WSDL (was: Re: attributes in CORBA IDL)"
id="OF2B332FE4.990BC365-ON85256D66.0054D317@us.ibm.com"
charset="US-ASCII"
inreplyto="attributes &amp; WSDL (was: Re: attributes in CORBA IDL)"
expires="-1"

To:"Savas Parastatidis"<Savas.Parastatidis@newcastle.ac.uk>
Cc:"David Snelling"<d.snelling@fle.fujitsu.com>,"Jim Webber"<jim.webber@arjuna.com>,public-ws-desc-state@w3.org,public-ws-desc-state-request@w3.org







This is an on going debate.

I don't see SOA and Object Oriented at odds at all.  When I worked up SOA
within IBM three or so years ago, there was absolutely no notion of
statelessness being a pre condition of a SOA.  Furthermore, object
orientation was very much a part of the model, encapsulation, inheritance
etc.

sgg
++++++++
Steve Graham
sggraham@us.ibm.com
(919)254-0615 (T/L 444)
STSM, On Demand Architecture
++++++++



                                                                                                                                               
                      "Savas Parastatidis"                                                                                                     
                      <Savas.Parastatidis@newca        To:       Steve Graham/Raleigh/IBM@IBMUS, "Jim Webber" <jim.webber@arjuna.com>          
                      stle.ac.uk>                      cc:       "David Snelling" <d.snelling@fle.fujitsu.com>, <public-ws-desc-state@w3.org>, 
                      Sent by:                          <public-ws-desc-state-request@w3.org>                                                  
                      public-ws-desc-state-requ        Subject:  RE: attributes & WSDL (was: Re: attributes in CORBA IDL)                      
                      est@w3.org                                                                                                               
                                                                                                                                               
                                                                                                                                               
                      07/17/2003 10:18 AM                                                                                                      
                                                                                                                                               
                                                                                                                                               





Steve,

>
>
> FWIW, I do not agree with the statement that "these mechanisms" make
WSDL
> like a C++ header file, nor do I share Jim's concern that this is a
threat
> to encouraging innappropriate "granularity".  Designers will choose
> granularity to suit their problem needs and their personal design
styles.
> Designers will use WSDL 1.1, as it is, without "these mechanisms" to
> produce both fine grained interactions and coarse grained
interactions.
>
> I do not support the notion of moving WSDL away from the "idl for web
> services".
>
> Lastly, the notion of using context to "rehydrate state" is
appropriate
> for
> SOME interactions, but not all.  When there is significantly
sophisticated
> state that we are modelling, such as commonly found in "systems
> management"
> or "resource management" then using context to pass this around is NOT
> appropriate.  Stateful entities and stateful interactions both are
> legitimate approaches that we need to celebrate here.  Having only one
> approach or the other is NOT acceptable for all approaches.
>


As the WS-Arch document discusses, the Web Services architecture is
stateless. Obviously, there is a clear need to model "stateful
interactions" with a _service_ (a software component that according to
the architecture is stateless). In the Web services community this is
done through context exchange (WS-Coordination, WS-Transactions, OASIS
Business Transactions Protocol, or BPEL Correlations). A context does
not carry all the state with it. It's a way for the involved parties to
recreate their understanding of what that state is.

Now, what is a "stateful entity"? If by "stateful entity" you refer to a
service that encapsulates some state and provides an interface to that
state, then why not call it an "object"? If we start talking about
objects, though, then we are in O-O territory and we are diverging from
SOA. In object-orientation architectures, emphasis is on interface
design with no concern on the structure of state (usually private to the
object). I believe that SOA encourages document structure, message
definitions, message exchange patterns, and interface design to be
treated as being equally important. Also, SOA assumes software
components that are not stateful.

So, is it the case that you wish to expose this "sophisticated state"
through a service interface? Does this mean that each time that new
state is created a new service instance will have to be created as well?
(BTW, I believe this is the OGSI model). Again, this is too close to
object-orientation.

Could you, please, provide us with an example where existing Web
Services mechanisms are unable to model the "sophisticated state"?

Regards,
.savas.



