docno="lists-027-7063052"
received="Mon Jul 21 17:29:19 2003"
isoreceived="20030721212919"
sent="Mon, 21 Jul 2003 22:28:22 +0100"
isosent="20030721212822"
name="Savas Parastatidis"
email="Savas.Parastatidis@newcastle.ac.uk"
subject="RE: Attributes, yes. Set/Get operations, no."
id="BC28A9E979C56C44BCBC2DED313A447001EC32A4@bond.ncl.ac.uk"
charset="us-ascii"
inreplyto="Attributes, yes. Set/Get operations, no."
expires="-1"


To:"Tim Banks"<tim_banks@uk.ibm.com>
Cc:<public-ws-desc-state@w3.org>


Tim,

> > I get the feeling that in points 2 and 3 you make the assumption
that
> > the services are stateful. Unlike OGSI, Web services are not
stateful.
> 
> Sometimes they are; it's just hard to tell :-)  If I do a
SquareRoot(x)
> operation I get the same answer each time: Not stateful. If I do a
> getAttribute(x) twice, I expect the same answer: Stateful.
> 
> So, a service that has an 'attribute' has state. Why? it's a semantics
> that's implied by the use of the term in other architectures. If I've
> misunderstood the interpretation here, let me know.

Hmmm... In both cases you get the _same_ answer. Why is the web service
that offers SquareRoot stateless while the second one is stateful? What
about an interface that has an attribute called "currentTime". At each
request the returned value will be different. Would you consider a
service with this attribute stateless or stateful?

The existence or the lack of attributes from an interface says nothing
about the semantics of a web service (stateless or stateful).
Specifications like OGSI are required to add statefulness (and other
semantics) to a web service.

> 
> > There are no concurrency related concerns there.
> > Application domain specific infrastructures, like OGSI, can apply
> > semantics like statefulness to Web services and then they will have
to
> > deal with concurrency issues. However, such issues do not exist in
Web
> > services where message exchange is the only thing that is defined.
> 
> My comments about semantics were not all concurrency-related; that's
just
> one possible cause of complexity that we need to be wary of when
defining
> what the messages mean. At the moment I am wondering what is meant by
the
> proposal to define get/set messages for attributes.  How do they
behave?
> 

I believe that we should concentrate on specifying the syntax of
attributes in WSDL part 1 and their bindings to SOAP and HTTP in part 2.
We shouldn't talk about behaviours for web services.


.savas.



