docno="lists-027-7334753"
received="Thu Jun 12 03:22:27 2003"
isoreceived="20030612072227"
sent="Thu, 12 Jun 2003 08:22:18 +0100"
isosent="20030612072218"
name="Savas Parastatidis"
email="Savas.Parastatidis@newcastle.ac.uk"
subject="RE: Some requirements"
id="BC28A9E979C56C44BCBC2DED313A447001D75248@bond.ncl.ac.uk"
charset="us-ascii"
inreplyto="Some requirements"
expires="-1"


To:<public-ws-desc-state@w3c.org>
Cc:"Jim Webber"<jim.webber@arjuna.com>,"Paul Watson"<Paul.Watson@newcastle.ac.uk>


All,

Few comments/questions...
> 
> <requirements>
> 
> User should be able to know what their permissions are on attributes
> before
> trying
> 

Isn't permission (part of a security/policy infrastructure) orthogonal
to specifying an interface?
 
> Query across attributes (in one service): what query language?
> 
> Ability to know (partial?) list of attributes at design time
> 
> Ability to know type of attributes ahead of time
> 

Since attributes are going to be part of an interface, wouldn't be a
requirement that ALL are known at design time? If attributes can be
added/removed at runtime, the interface changes. Type-safety becomes a
runtime issue. Personally, I like implementation-time type safety.

> Input/output messages that manipulate attributes can be validated
against
> WSDL
> 
> Support for static attributes
> 

What does static mean? Does it mean that you can specify the value of an
attribute within the WSDL that will always be the same? If so, then
ignore this.

> Ability to restrict access on a per attribute basis.
> 

Again, I think this is part of a security/policy infrastructure. It's
similar to permitting/restricting access to a web service operation.

> Ability to restrict read vs. write access
> 
> Attributes can be inherited through WSDL 1.2 inheritance
> 
> Support metadata on attributes (creation date, type, description...)
> 

Should "type" be part of the metadata or a first-class characteristic of
the attribute?

> Allow bulk retrieval of several attributes in one operation
> 
> Attributes can be of any schema type (simple or complex)
> 
> </requirements>
> 

Apologies if my questions have already been discussed or don't make
sense.

--
Dr. Savas Parastatidis 
Chief Software Architect, North-East Regional e-Science Centre 
School of Computing Science, University of Newcastle upon Tyne, UK 
http://savas.parastatidis.name



