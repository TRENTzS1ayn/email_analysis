docno="lists-027-7557323"
received="Sun Jun 15 12:59:22 2003"
isoreceived="20030615165922"
sent="Sun, 15 Jun 2003 17:58:49 +0100"
isosent="20030615165849"
name="Savas Parastatidis"
email="Savas.Parastatidis@newcastle.ac.uk"
subject="RE: Some requirements"
id="BC28A9E979C56C44BCBC2DED313A447001D753C1@bond.ncl.ac.uk"
charset="us-ascii"
inreplyto="Some requirements"
expires="-1"


To:<ksankar@cisco.com>,"Steve Graham"<sggraham@us.ibm.com>
Cc:"David Snelling"<d.snelling@fle.fujitsu.com>,"Jim Webber"<jim.webber@arjuna.com>,"Paul Watson"<Paul.Watson@newcastle.ac.uk>,<public-ws-desc-state@w3c.org>,"Steve Tuecke"<tuecke@mcs.anl.gov>


> <KS>
> This is that specification ! If we define the serviceData
> concept here and expect another specification to explain the
operations
> on them, it will just add the proliferation of more WS-*
specifications.
> We already have too many :o(. Our goal should *not* be to develop max
> number of specifications, but a few cohesive and coherent
> specifications.
> 

As you probably know by now, I disagree with this statement :-)

Suggesting that the WSDL specification should talk about required or
optional operations is like saying that the C++ language specification
dictates the use of commit() and abort() methods because some
applications require transactional behaviour. 

> Point well taken on the independence from underlying
> implementations - may they be languages, OS platforms and such. But,
we
> still need to define the interfaces of the common operations. The
> platforms and languages are free to implement them as they wish,
> leveraging their own idiosyncrasies.
> 

If a set of common interfaces/operations is required for any kind of
functionality, the W3C WSA and WS-Interoperability groups are
responsible for adopting them or not.

> IMHO, as we are into the realm of stateful services (with state
> visibility thru the sericeData mechanism), we should *completely*
define
> what that means. In this regard we need to touch upon security as well
-
> I am thinking of visibility and access control of the
> serviceDataelements - how they can be expresses, exchanged,
queried,....
> 

I thought that attributes were about exposing access to state and not
about stateful web services. I see a subtle difference. The web
services-oriented architecture is stateless. Attributes could provide
the syntax for exposing state but the semantics of stateful services
should not be part of a WSDL specification (that's my personal view
anyway).

> 
> IMHO, it would be better if we address the security interfaces
> in this specification, leaving, of course, the implementations to
choose
> whatever mechanisms. I differentiate between mechanics and mechanisms
-
> we define the mechanics, the platforms do the mechanisms. In that
sense,
> these security aspects are NOT orthogonal to the serviceData
mechanics.
> 

I see transactions, coordination, orchestration, business processes as
very important in web services. They all require common interfaces.
Should we also include these in the specification of the language that
is used to describe those interfaces?


Best regards,
.savas.



