docno="lists-030-13195503"
received="Sat Nov 30 13:38:05 2002"
isoreceived="20021130183805"
sent="Sat, 30 Nov 2002 18:37:38 GMT"
isosent="20021130183738"
name="David Carlisle"
email="davidc@nag.co.uk"
subject="Re: html sections in compound documents."
id="200211301837.SAA17605@nag.co.uk"
inreplyto="DFF2AC9E3583D511A21F0008C7E621060453DE36&#64;daemsg02.software-ag.de"
expires="-1"


To:Michael.Kay@softwareag.com
CC:spec-prod@w3.org




  And while on the subject, wouldn't it be nice if we had a recursive <div>
  element so that sections could be more easily promoted or demoted?

Hmm Not sure. I don't really mind either the "named section" style or
the "nested div" style. However I don't really like mixing both in the
same document. (docbook has both styles but I usually try to use just
one or the other in any given document). I think it would be too big a
change to throw out div2 and friends, so I'm not sure I'd want to add a
nestable div.

Meanwhile another featurelet in slices-common.xsl that I'm overriding in
the mathml customisation...

David


<!-- SLICE CHECKING -->
<!--
  slices-common has
  <xsl:if test="$target != $slice">
  which repeatedly produces the string value of an entire chapter, or
the entire
  spec for every internal reference. saxon produces the mathml spec in
  a third of the time on my machine  if this is changed to
  <xsl:if test="generate-id($target) != generate-id($slice)">

  In addition  add the test for "this slice" so references in chapter 3 
  to other parts of the same file are of the form #foo rather than
  chapter3.html#foo
-->

<xsl:template name="href.target">
  <xsl:param name="target" select="."/>

  <xsl:variable name="slice"
                select="($target/ancestor-or-self::div1
                        |$target/ancestor-or-self::inform-div1
                        |$target/ancestor-or-self::spec)[last()]"/>

  <xsl:if test="generate-id($slice) !=
  generate-id((ancestor-or-self::div1
                        |ancestor-or-self::inform-div1
                        |ancestor-or-self::spec)[last()])">
    <xsl:apply-templates select="$slice" mode="slice-filename"/>
  </xsl:if>
  <xsl:if test="generate-id($target) != generate-id($slice)">
    <xsl:text>#</xsl:text>
    <xsl:choose>
      <xsl:when test="$target/@id">
        <xsl:value-of select="$target/@id"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="generate-id($target)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:if>
</xsl:template>

<!-- END OF SLICE CHECKING -->


_____________________________________________________________________
This message has been checked for all known viruses by Star Internet
delivered through the MessageLabs Virus Scanning Service. For further
information visit http://www.star.net.uk/stats.asp or alternatively call
Star Internet for details on the Virus Scanning Service.



