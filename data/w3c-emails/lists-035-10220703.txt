docno="lists-035-10220703"
received="Thu Aug  9 08:41:37 2001"
isoreceived="20010809124137"
sent="Wed, 8 Aug 2001 16:15:20 -0500"
isosent="20010808211520"
name="Aaron Swartz"
email="aswartz@upclink.com"
subject="URI Test Suite"
id="200108082117.f78LHhi01798@theinfo.org"
charset="us-ascii"
expires="-1"


Cc:connolly.1990@alumni.utexas.net
To:uri@w3.org,www-qa@w3.org

Below is a test suite for Python based on Appendix C of RFC2396. 
Python's built-in urlparse module fails the test suite in a 
number of instances. I used a similar test suite to validate my 
Tcl URI parser.

Enjoy,
--
[ "Aaron Swartz" ; <mailto:me@aaronsw.com> ; <http://www.aaronsw.com/> ]

import urlparse

base = 'http://a/b/c/d;p?q'

assert urlparse.urljoin(base, 'g:h') == 'g:h'
assert urlparse.urljoin(base, 'g') ==   'http://a/b/c/g'
assert urlparse.urljoin(base, './g') == 'http://a/b/c/g'
assert urlparse.urljoin(base, 'g/') ==  'http://a/b/c/g/'
assert urlparse.urljoin(base, '/g') ==  'http://a/g'
assert urlparse.urljoin(base, '//g') == 'http://g'
assert urlparse.urljoin(base, '?y') ==  'http://a/b/c/?y'
assert urlparse.urljoin(base, 'g?y') == 'http://a/b/c/g?y'
assert urlparse.urljoin(base, '#s') ==  'http://a/b/c/d;p?q#s'
assert urlparse.urljoin(base, 'g#s') == 'http://a/b/c/g#s'
assert urlparse.urljoin(base, 'g?y#s') == 'http://a/b/c/g?y#s'
assert urlparse.urljoin(base, ';x') == 'http://a/b/c/;x'
assert urlparse.urljoin(base, 'g;x') ==  'http://a/b/c/g;x'
assert urlparse.urljoin(base, 'g;x?y#s') == 'http://a/b/c/g;x?y#s'
assert urlparse.urljoin(base, '.') ==  'http://a/b/c/'
assert urlparse.urljoin(base, './') ==  'http://a/b/c/'
assert urlparse.urljoin(base, '..') ==  'http://a/b/'
assert urlparse.urljoin(base, '../') ==  'http://a/b/'
assert urlparse.urljoin(base, '../g') ==  'http://a/b/g'
assert urlparse.urljoin(base, '../..') ==  'http://a/'
assert urlparse.urljoin(base, '../../') ==  'http://a/'
assert urlparse.urljoin(base, '../../g') ==  'http://a/g'

assert urlparse.urljoin(base, '') == base

assert urlparse.urljoin(base, '../../../g')    ==  'http://a/../g'
assert urlparse.urljoin(base, '../../../../g') ==  'http://a/../../g'

assert urlparse.urljoin(base, '/./g') ==  'http://a/./g'
assert urlparse.urljoin(base, '/../g')         ==  'http://a/../g'
assert urlparse.urljoin(base, 'g.')            ==  'http://a/b/c/g.'
assert urlparse.urljoin(base, '.g')            ==  'http://a/b/c/.g'
assert urlparse.urljoin(base, 'g..')           == 'http://a/b/c/g..'
assert urlparse.urljoin(base, '..g')           == 'http://a/b/c/..g'

assert urlparse.urljoin(base, './../g')        ==  'http://a/b/g'
assert urlparse.urljoin(base, './g/.')         ==  'http://a/b/c/g/'
assert urlparse.urljoin(base, 'g/./h')         ==  'http://a/b/c/g/h'
assert urlparse.urljoin(base, 'g/../h')        ==  'http://a/b/c/h'
assert urlparse.urljoin(base, 'g;x=1/./y')     ==  
'http://a/b/c/g;x=1/y'
assert urlparse.urljoin(base, 'g;x=1/../y')    ==  'http://a/b/c/y'

assert urlparse.urljoin(base, 'g?y/./x')       ==  
'http://a/b/c/g?y/./x'
assert urlparse.urljoin(base, 'g?y/../x')      == 
'http://a/b/c/g?y/../x'
assert urlparse.urljoin(base, 'g#s/./x')       ==  
'http://a/b/c/g#s/./x'
assert urlparse.urljoin(base, 'g#s/../x')      ==  
'http://a/b/c/g#s/../x'



