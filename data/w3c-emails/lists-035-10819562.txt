docno="lists-035-10819562"
received="Tue Feb  6 11:30:19 2001"
isoreceived="20010206163019"
sent="Tue, 06 Feb 2001 11:31:25 -0500"
isosent="20010206163125"
name="Mark Baker"
email="mark.baker@canada.sun.com"
subject="Re: My 2c on scheme abuse"
id="3A8026DD.1D75E67D@canada.sun.com"
charset="us-ascii"
inreplyto="23CF4BF2C499D411907E00508BDC95E116FBF1&#64;ntmews_01.interx.com"
expires="-1"


To: Miles Sabin<MSabin@interx.com>
CC:uri@w3.org

Miles,

Miles Sabin wrote:
> What have requirements got to do with anything? There's no
> requirement that non-validating parsers retrieve DTDs, but some
> do (I believe that Suns/Crimson did at one time, maybe still
> does). Mutatis mutandis for namespace URIs and anything that
> might be hanging off the end of them.

It's one thing to make a programming mistake and unnecessarily resolve
an URL.  It's yet another to require it.  I don't see how a mistake made
by one or two programmers invalidates an architecture designed to
address the problems you describe.

> Huh? If my client isn't configured to use a proxy (either
> directly or transparently) then if I try to retrieve,
> 
>   http://www.example.com/blah.dtd
> 
> it goes off and hits www.example.com. What current, widely
> deployed, widely applicable, mechanism is there for redirecting
> that request elsewhere?  Even if my client is configured to use
> a proxy, the proxy might not have that resource cached.

Sure.  But what if that proxy uses another proxy that has it cached?

The Web is a bus; you need not know where resolution occurs, just that
what's resolved is what you asked for and is "fresh".

> By 'widely applicable', I mean a mechanism which can be applied
> to a 'hot' resource without the hosting site having to be
> radically rejigged (eg. wholesale delegation to a third party via
> DNS).

Even assuming that lots of software will be trying to resolve namespace
URLs, there are ways to manage this; hosting it, and changing your DNS
to their box.  Or configuring an HTTP redirect to a third party such as
Akamai.  Probably others too.

> > Just that URL resolution (including HTTP URLs) need not ever
> > reach the origin server.
> 
> More detail please ...

It's just the same point as above.

Anyhow, I'm finding that I'm repeating myself so it's probably time to
stop, at least on the list.  In summary;

- namespace URLs can be used to do useful things without being resolved
(they're locators, but also names)
- no existing software (AFAIK) needs to resolve a namespace URL
- some semantic web apps will need to resolve namespace URLs, but good
software will cache the result itself and reuse it until stale.
- HTTP proxy chains provide for resolving URLs via caching without ever
bothering the origin server

MB



