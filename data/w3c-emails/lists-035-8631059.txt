docno="lists-035-8631059"
received="Fri Oct 27 11:43:20 2000"
isoreceived="20001027154320"
sent="Fri, 27 Oct 2000 12:09:46 -0400"
isosent="20001027160946"
name="Al Gilman"
email="asgilman@iamdigex.net"
subject="Re: theory and practice (Re: URIs for Physical Items)"
id="200010271548.LAA1634649@smtp1.mail.iamworld.net"
charset="iso-8859-1"
inreplyto="200010271431.KAA29769&#64;hesketh.net"
expires="-1"


To:"'uri@w3.org'"<uri@w3.org>

At 10:34 AM 2000-10-27 -0400, Simon St.Laurent wrote:
>
>When I start talking with developers outside of this small group about
>URIs, I get eye-rolling, boredom, and general irritation.? Questions I get
>range from "why should we really care?" to "why would I use something
>without a real infrastructure?"? Even UUIDs get the raspberry on a regular
>basis.
>
>When I talk about URLs, and even the reasons why URLs aren't the answer to
>everything, I get solid questions, including tough questions about content
>negotiation and the like.
>
>I worry that some people see all that's come so far as a barrier to what
>they really want to do, without a whole lot of concern for what everyone
>else might want to do.? Top-down specification doesn't seem to be doing
>much to get developers excited and put URIs into the world.
>

You might be amused, or just more frustrated, to note as history my "Just call
me URL" speech
<<http://lists.w3.org/Archives/Public/uri/1997Oct/0006.html>http://lists.w3.
org/Archives/Public/uri/1997Oct/0006.html>.

There is a lot to what you say.  There is a point of diminishing returns for
structured namespaces.  Moore's law is increasing the market size for looking
things up by syndromes of multiple [known property type] properties, as
compared with the market for single-field unique 'identifiers.'  See the
Storage Resource Broker for a well-reasoned and running-code example of a
highly-rational, highly-effective practice that does not reduce to a
single-field identifier.

On the other hand, from an accessibility perspective I am bound to continually
lean on your developer friends to make some allowance, by means of the system
of primitives they build upon, for what others (their users) may need to do. 
It is not possible for the developers to think ahead about all the cases and
wrinkles that diverse personal capabilities will generate in usage scenario or
bottom-line interaction spaces at the point of use.  They need to build on
primitives that contain some built-in residual flexibility.

This is not primarily a matter of top-down design in identification schemes. 

But there is an element of top-down analysis in creating low-level flexibility
that integrates systematically into application flexibility for arbitrary aps
built on the foundation classes.  And URI-references are one of those
foundational classes, whatever we do or don't like about how they are defined
and implemented today.

And it illustrates that there are some legitimate (worth thinking about)
countervailing pressures to the "I oughta be able to do [only] what _I_
want to
do" idea.  Benchmarking what _I_ want to do against the top-down view of what
others want to do will often reveal there is a much larger opportunity/market
facing you than what you originally perceived.  You can only help yourself by
helping more of 'everybody' than you at first thought.



