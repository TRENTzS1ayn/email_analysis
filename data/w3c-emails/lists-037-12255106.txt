docno="lists-037-12255106"
received="Thu Mar 20 00:25:40 1997"
isoreceived="19970320052540"
sent="Wed, 19 Mar 1997 21:23:45 PST"
isosent="19970320052345"
name="Larry Masinter"
email="masinter@parc.xerox.com"
subject="Re: Distributed Authoring Proposals"
id="3330C9E1.161B@parc.xerox.com"
charset="us-ascii"
inreplyto="11352BDEEB92CF119F3F00805F14F485026B71F9&#64;RED-44-MSG.dns.microsoft.com"
expires="-1"


To: Yaron Goland<yarong@microsoft.com>
CC:w3c-dist-auth@w3.org

In a previous life, I used to work on another standard where my greatest
contribution to the standards effort, I claimed, was designing the form
you had to fill out in order to get a change to the language considered.

The form had several fields, and mainly what I did (as chair of one of
the working groups) was to get people to fill out the form correctly.

One of the most important features of the form is that it started with
the section

    "Problem Description"

and you were required to define "what problem are you solving" before
you could go on to the next section, which is


     "Proposal"

where you described what you were proposing.

Your recent mail on "Distributed Authoring Proposals" is missing
the "Problem Description" sections for each proposal, and it
is a little difficult to guess exactly what problem you're solving.

1. Content-Nature: The nature of this message is that the subject
is "Re: Distributed Authoring Proposals", but is it the true nature
of this message, or just another attribute?

2. I cannot guess what Dav.ResourceLinks means from your message.

3. COPY method

I suggest considering eliminating COPY and instead using
PUT, but when the value being PUT is Content-Type:
message/external-body, then the server can copy the data
from the original source.

Copying structures and other more complex objects can be
accomplished in the same way, or by PUTing other document
types (e.g., multipart/related where some of the parts
are message/external-body).

There's no point in inventing a new method when an old one
will do fine.

5. DELETE

The issue with Delete is exactly that of the referential
integrity constraints. If you delete a container, what happens
to the things contained? I think DELETE is the right vehicle
to explore this issue. "PropagateLevel" is really unsatisfactory,
since the required scope of deletion rarely corresponds to
"this level down 3 levels", even in file systems.

6. UNDELETE

I think this is so completely non-interoperable that it
doesn't belong in the standard.

The Atomic header, while looking nice, is voodoo. Is there an
interoperable client that would actually use this against
arbitrary servers?

Regards,

Larry



