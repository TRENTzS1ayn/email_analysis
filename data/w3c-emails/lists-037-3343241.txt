docno="lists-037-3343241"
received="Fri Sep  6 15:54:51 1996"
isoreceived="19960906195451"
sent="Fri, 6 Sep 1996 12:45:50 -0700"
isosent="19960906194550"
name="Yaron Goland"
email="yarong@microsoft.com"
subject="RE: v0.2 draft Distributed Editing Reqts."
id="c=US%a=_%p=msft%l=RED-44-MSG-960906194550Z-33343@INET-03-IMC.itg.microsoft.com"
inreplyto="v0.2 draft Distributed Editing Reqts."
expires="-1"


To:"'w3c-dist-auth@w3.org'"<w3c-dist-auth@w3.org>,"'Jim Whitehead'"<ejw@ics.uci.edu>

>Such higher level locking actions can be implemented using single-entity
>locks, and hence I'd prefer not to introduce the added complexity of
>multiple entity simultaneous locks.
>
>- Jim
>
If a user locks files A, B, & C with separate locks and performs a PUT
to A, there is no guarantee that the locks on B & C have not been
already been broken. Thus a mechanism is needed to perform actions on a
group of files in such a way that each individual action is guaranteed
to be atomic with respect to the lock on those files.

Your own paper includes a perfect example of this - A user wishes to
lock an entire web site so as to be able to guarantee global consistency
even if they are only interested in changing a single file. If they have
to lock every file individually, a bandwidth eating action I might add,
they still have no guarantee of global consistency as one or more locks
could be removed for any number of reasons. A multi-file lock will
guarantee that an action will only go through if all the relevant files
are still locked.

>Yaron
>



