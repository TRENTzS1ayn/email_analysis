docno="lists-038-11365014"
received="Tue Sep 15 13:52:43 1998"
isoreceived="19980915175243"
sent="Tue, 15 Sep 1998 10:45:53 PDT"
isosent="19980915174553"
name="Jim Davis"
email="jdavis@parc.xerox.com"
subject="RE: Namespace consistency"
id="3.0.5.32.19980915104553.007d8b30@mailback.parc.xerox.com"
charset="us-ascii"
inreplyto="000701bde05b$10ad98e0$15d0000d&#64;copper-208.parc.xerox.com"
expires="-1"


To:"WebDAV WG"<w3c-dist-auth@w3.org>

At 08:43 PM 9/14/98 PDT, Larry Masinter wrote:
>> Jim Whitehead wrote:
>> > I think we should require all collections below a DAV-compliant
>> >resource to also be DAV-compliant.  So, while it's OK to not be
>> >DAV-compliant looking up a hierarchy tree, looking down the tree from a
>> >DAV-compliant location should always be DAV-compliant. 

Hmm, I he did say all _collections_ below a DAV compliant resource, not all
resources of any kind.   But since 'collection' is a term defined by DAV,
what would it mean to be a 'collection' that is not 'DAV'.  Jim, did you
mean 'resource', or did you mean 'namespace' (in the HTTP sense, not XML).

I was assuming he meant 'namespace'.

On the other hand, what about the stronger claim (that all resources within
a collection must be DAV compliant).  It's not unreasonable.  What does it
mean to do PROPFIND on collection a/b/c, discover that it includes resource
a/b/c/d, but that one can't do PROPFIND on a/b/c/d?

>So a DAV-compliant resource can't be, say, a CGI script?

Of course it can be a CGI script.  That's one reason that DAV has source
links.  What do you see that would prohibit this?

>If I have http://a/b/c/ and I want to add a CGI such that
> http://a/b/c/d is indirectly http://a/b/c/d.cgi, where
>'d.cgi' computes a query, you might have http://a/b/c/d?e .
>Now, is http://a/b/c/d.cgi a 'member' of http://a/b/c/ ?

I don't understand what you mean by 'indirectly' enough to speak to that,
but if a PROPFIND on http://a/b/c/d includes http://a/b/c/d.cgi, then 
d.cgi is a member of a/b/c.  Otherwise, not, because there is no other DAV
way to traverse the URL namespace except by issuing PROPFINDs.  



