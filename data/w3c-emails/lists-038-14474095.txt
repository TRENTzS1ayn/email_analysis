docno="lists-038-14474095"
received="Tue Nov 17 17:00:45 1998"
isoreceived="19981117220045"
sent="Tue, 17 Nov 1998 14:00:56 -0800"
isosent="19981117220056"
name="Babich, Alan"
email="ABabich@filenet.com"
subject="RE: Does DASL need to support structured queries?"
id="C3AF5E329E21D2119C4C00805F6FF58F04AFDE@hq-expo2.filenet.com"
inreplyto="Does DASL need to support structured queries?"
expires="-1"


To:"'jamsden@us.ibm.com'"<jamsden@us.ibm.com>,w3c-dist-auth@w3.org

Jim Amsden wrote:
"... in order for DASL to be useful and effective, it must
support structured searches."

I disagree. It's obvious that that's not true.
For example, neither SQL nor SQL 92 support structured
data, let alone structured searches, and SQL is very widely
used. Years of experience have shown that SQL is both useful 
and effective for many applications without the ability to 
define or query structures. Similarly, DASL would be very useful 
for many queries (including the most common queries) without 
the ability to query structures. (Of course, that doesn't 
imply that we should not add that ability in the future. I 
think we should.)

"So the same mechanism can be use to search structure properties
since they are XML elements (on the wire) too."

I disagree with the implicit assumption behind this statement.
The assumption is that the serialization format (i.e., XML)
is somehow equivalent to the data model, or somehow forces 
the data model to be the same.
As far as searching, it is irrelevant what the serialization
format is. Multiple different protocols could be used to access
the same data source if that were desirable. A binary 
serialization format would be much more efficient than XML, 
as one example. What matters for query is the data model. 

XML all by itself is not a data model. Conventions would have
to be added, starting with data types. Then there is the
whole question of metadata, central definition of data
(as opposed to client program definition of data),
administration of database schemas (retrieving and updating
metadata), merging metadata when querying across multiple
data sources, etc., none which are issues that XML or any 
other serialization format was intended to address directly.

There are pros and cons for every design choice. For example,
XML is a very good format for certain types of text based documents,
and is a very poor format for others (e.g., image documents).
Similarly, XML plus extensions wouldn't be the best property 
model.

Alan Babich



