docno="lists-038-2325390"
received="Thu Dec  4 18:29:10 1997"
isoreceived="19971204232910"
sent="Thu, 4 Dec 1997 15:26:56 PST"
isosent="19971204232656"
name="Jim Davis"
email="jdavis@parc.xerox.com"
subject="RE: proposal for ordered collections"
id="3.0.3.32.19971204152656.00969100@mailback.parc.xerox.com"
charset="us-ascii"
inreplyto="01BD00BB.2683D420.ejw&#64;ics.uci.edu"
expires="-1"


To:"w3c-dist-auth@w3.org"<w3c-dist-auth@w3.org>

At 01:47 PM 12/4/97 PST, Jim Whitehead wrote:
>While at first read, this proposal appears to adequately provide for 
>ordered collections, I wonder about its hidden assumption: that one 
>ordering for a collection is all you need.  I wonder whether it might be 
>desirable to support multiple simultaneous orderings instead.

For the applications that I am aware of, one ordering is indeed all that is
needed.  One example is scanning, where the page images of a document have
a natural order.  The WebDAV protocol would be more useful to a scanner if
it could guarantee that the server would preserve the order of page images
within a document.

I can imagine that there are other applications that could use multiple
orderings, although they don't come to mind now.  On the other hand, I
would be wary of introducing multiple orderings into WebDAV, for fear that
it would lead down a slippery slope, because the next logical thing to ask
for is sorting (by name, size, etc) and then after that, sortings that are
induced by invoking an arbitrary sorting predicate (specified by Java).

As for your specific proposal, it's cool.  It has the advantage that since
it relies completely on the client, no modification to DAV protocol is
needed at all.   (One might want to register some well-known orderings in
the namespace, but that's it.)

But this is also its weakness.  It places the burden for the ordering on
clients, who would presumably have to do discovery to discover the set of
all currently available orderings, and would have to insert into all of
them.  While my proposal *allows* a client to be aware of ordering, it does
not *require* it, in that it RECOMMENDS that the server support a default
ordering (by order added).  So if a naive client adds or removes a member
of a collection, nothing breaks, whereas in your scheme, it would cause
some problems.  An ordering-aware client would fetch the  ordering
property, and discover that it was not corresponding to the actual list of
members.  Your proposal also places on each client the burden of doing the
sorted insertion for each ordering in the list.

For these reasons, I believe that ordered collections should support a single
ordering, maintained by the server, as in the original proposal.

Best regards

Jim


------------------------------------
http://www.parc.xerox.com/jdavis/
650-812-4301



