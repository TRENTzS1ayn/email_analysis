docno="lists-039-0828183"
received="Sat May  1 18:52:54 1999"
isoreceived="19990501225254"
sent="Sat, 1 May 1999 15:48:29 -0700"
isosent="19990501224829"
name="Jim Whitehead"
email="ejw@ics.uci.edu"
subject="RE: DELETE vs. UNBIND"
id="001301be9424$bb1b13c0$d115c380@ics.uci.edu"
charset="iso-8859-1"
inreplyto="9905011717.AA05516&#64;tantalum"
expires="-1"

To:"Geoffrey M. Clemm"<gclemm@tantalum.atria.com>,w3c-dist-auth@w3.org



> This proposal has the downside that instead of just issuing a DELETE
> request, an advanced-collection aware client must first issue an UNBIND
> request, and if that fails because the resource is not a member of an
> advanced collection, it then issues a DELETE request.
>
> But I don't see any upside ... a server that supports advanced collections
> must support UNBIND semantics, so how does it provide any benefit to
> say that an UNBIND request MUST have unbind semantics, while a DELETE
> request MAY have unbind semantics?  Perhaps I'm just missing what the
> upside is?

As discussed in the teleconference, the proposal was:

UNBIND: MUST remove binding, MUST NOT destroy any state on the server

DELETE: MUST remove binding, MAY destroy state on the server

DESTROY: MUST remove binding, MUST destroy state

So, the upside was that DELETE would "do the right thing" for downlevel HTTP
and DAV clients (like Office 2000), but that clients which understand the
advanced collections specification could do more precise operations by
selecting either UNBIND or DESTROY, where they'll know exactly what the
server will do.

- Jim



