docno="lists-039-12137580"
received="Fri Nov 26 14:12:45 1999"
isoreceived="19991126191245"
sent="Fri, 26 Nov 1999 11:12:38 -0800 (PST)"
isosent="19991126191238"
name="Greg Stein"
email="gstein@lyra.org"
subject="Re:  are depth 0 locks inherited by newly created children?"
id="Pine.LNX.4.10.9911261108250.18236-100000@nebula.lyra.org"
charset="US-ASCII"
inreplyto="4.1.19991125192837.00b04650&#64;pop.xs4all.nl"
expires="-1"

To: Jim Davis<jrd3@alum.mit.edu>
cc:w3c-dist-auth@w3.org


On Fri, 26 Nov 1999, Jim Davis wrote:
>...
> I read 7.5 as saying that even a depth zero lock is inherited, because it
> does not say "only depth infinity". You and others have asserted that this
> is bad.  When I asked why, you said it causes problems for BIND.

That's being a bit pedantic, don't you think? All right, so the RFC is
missing three words. Put them in and interpret it that way.

We know what the state of a Depth:0 lock on a collection is after one has
been applied (just the collection is locked), and we know the state after
a Depth:infinity has been applied (a bunch of stuff is locked). Your
"interpretation" would create situations that just don't match normal
behavior. With the simple insertion of three words, you get behavior that
matches for the PUT/MKCOL case and the LOCK case.

What I don't understand is how you could arrive at a reasonable
interpretation that the lock *should* be inherited. Could you explain?

Cheers,
-g

-- 
Greg Stein, http://www.lyra.org/



