docno="lists-039-6971937"
received="Thu Aug 19 19:48:59 1999"
isoreceived="19990819234859"
sent="Thu, 19 Aug 1999 19:47:24 -0400"
isosent="19990819234724"
name="ccjason@us.ibm.com"
email="ccjason@us.ibm.com"
subject="RE: LOCK NULL reserves what?"
id="852567D2.0082CD2A.00@D51MTA07.pok.ibm.com"
charset="us-ascii"
inreplyto="LOCK NULL reserves what?"
expires="-1"

To:"Yaron Goland (Exchange)"<yarong@Exchange.Microsoft.com>
cc:w3c-dist-auth@w3.org



>>
Step 1 - User A successfully take out an exclusive write lock on a/b, which
is a lock null resource.
Step 2 - User B tries to take out an exclusive write lock, depth = infinity
on a/. The write lock will fail because a/b is already locked.
>>

Perhaps I should have been clearer.  What if step two is a singleton, not a
depth lock request.  Can User A do a BIND/MOVE/and other operations
that we usually think of as modifying the state of /a/?

I'm asking for the original design philosophy and the what we'd actually
like to see now.  Two questions.

It does beg a second question.  Reverse the order of the steps.  Can the
lock null resource be created if the parent is locked?   I think the answer
to this is easier. :-)



