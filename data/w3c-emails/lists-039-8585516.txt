docno="lists-039-8585516"
received="Wed Sep 15 17:10:26 1999"
isoreceived="19990915211026"
sent="Wed, 15 Sep 1999 17:10:16 -0400"
isosent="19990915211016"
name="Geoffrey M. Clemm"
email="gclemm@tantalum.atria.com"
subject="Re: Bindings, Locks, and MOVE"
id="9909152110.AA03662@tantalum"
inreplyto="852567ED.00673430.00&#64;D51MTA07.pok.ibm.com"
expires="-1"


To:w3c-dist-auth@w3.org


   From: ccjason@us.ibm.com

   <js/>
   I do have trouble following your description of the fixup stage, though.  I
   take it you don't think we face the awkward situation Kevin described, where
   there end up being 2 resources where there used to be only one.  But how do
   you avoid this?

   <jlc/>
   I have to agree that I couldn't quite understand what GC meant by "fixup"
   since it seemed none was necessary.
   I also don't understand what you are saying about extra resources.

<gmc/> This thread was one where Judy was concerned that our
definition of MOVE was incompatible with being "logically equivalent
to COPY/fixup/DELETE".  So although an extra resource is what you
would expect (rightly so) after a COPY, an extra resource is *not*
what you would expect after a MOVE.  In an earlier posting, I pointed
out that the "fixup step" could be used to get rid of the extra resource.
But to emphasize, defining MOVE as COPY/fixup/DELETE is *bad* (as in
"bad dog, don't mess the carpet" :-)

   <jlc/> As for the MOVE, we start with two resources and end with two.
   No surprise once again.

<gmc/> But without a "fixup", if you just do COPY/DELETE to implement
your MOVE, Judy's example would end up with three
resources following the MOVE, rather than two, thus her concern.

Cheers,
Geoff



