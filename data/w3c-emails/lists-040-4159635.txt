docno="lists-040-4159635"
received="Wed Nov 22 12:13:17 2000"
isoreceived="20001122171317"
sent="Wed, 22 Nov 2000 17:58:26 +0100"
isosent="20001122165826"
name="Hartmut Warncke"
email="hwarncke@Adobe.COM"
subject="Re: [RFC2518 Issue] PROPFIND 'allprop' usage"
id="3A1BFB32.778D55BF@adobe.com"
charset="us-ascii"
inreplyto="B99BE740B488D311B4AA00805FBB776750A6F7&#64;gbrwgcms03.wgc.gbr.xerox.com"
expires="-1"


To:"Hall, Shaun"<Shaun.Hall@gbr.xerox.com>, WebDAV WG<w3c-dist-auth@w3.org>



> The implications of PROPFIND with an infinite depth affect both the server
> and/or the client. Supposing you have a large WebDAV enabled repository. The
> PROPFIND request (a few hundred bytes) could potentially mean that (tens of)
> GBs of data is to be returned. Even if the server could generate such a
> large response (which is a feat in its own right), it will load the network,
> and what will happen when the client receives it? Pity the poor user sitting
> there for a long time (hours?), only to be told "timed out" or "out of
> memory" or something similar.

Yes, of course, I completely understand your point of view. But as a matter of
fact we like this "depth infinity" feature very much because we can use it in a
very efficient way in some situations and therefore we are struggleing so hard
for keeping that feature.

> Changing the specification could break existing products, which is a bad
> thing. Backwards compatibilty should be maintained.

Good to hear that. But I am not quite sure how you will do that because if a
server has the possibility to refuse a depth infinity request GoLive 5 will not
be able to handle that situation (synchronization of client and server content
will not work anymore).

> We think the way forward for the WebDAV specification is to allow servers
> the ability to refuse such requests and inform the client. A mechanism
> should be defined for the client to understand this. If the client received
> a response which basically stated that the server was refusing to service an
> infinite depth request, it could issue multiple requests with a Depth:1.

If you have to synchronize a very large site with thousands of files, replacing
depth infinity requests by depth 1 requests would be a huge performance disaster
for us.

Best, Hartmut



