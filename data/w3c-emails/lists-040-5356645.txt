docno="lists-040-5356645"
received="Sat Dec 23 00:16:25 2000"
isoreceived="20001223051625"
sent="Sat, 23 Dec 2000 00:15:38 -0500 (EST)"
isosent="20001223051538"
name="Geoffrey M. Clemm"
email="geoffrey.clemm@rational.com"
subject="Re: Overwrite:T behavior for COPY"
id="200012230515.AAA09457@tantalum.atria.com"
inreplyto="20001222015339.D22947&#64;lyra.org"
expires="-1"


To:w3c-dist-auth@w3.org


   From: Greg Stein <gstein@lyra.org>

   On Thu, Dec 21, 2000 at 11:55:55AM -0500, Geoffrey M. Clemm wrote:

   > In particular, note that this does result in different behavior when a
   > collection is being copied.  In particular, the "delete" semantics
   > removes members that are currently in the destination but do not have
   > corresponding members in the source, while the "update" semantics does
   > not remove any members, but only updates existing members and adds new
   > members.

   Not at all. If I want directory DA to overwrite directory DB, then the
   result should look like directory DA. That means deleting the stuff that
   wasn't in DA.

That would be fine with me.  I'll make that change if nobody objects
(it has the *major* benefit that it then is virtually identical to
what 2518 says today, except you don't delete unless you have to).

   And to throw back some of your semantics :-) ...

Oh, please don't toss me into that briar patch Brer Fox! (:-)

   DA is a set of bindings.
   That set overwrites the set in DB. Bang! There goes the spurious stuff that
   was in DB. Theoretically, you don't even have to copy resources... just
   adjust the bindings to the resources. :-)

   [ yes, I tend to avoid the whole "directories are sets of bindings" view
     because it is a rather awkward viewpoint sometimes. but it is oh-so-fun to
     throw that back at people when they suggest a semantic that is
     non-intuitive :-) ]

Yes, I'd much rather go with the bindings-style semantics (for one
thing, that's how versioned collections and baseline UPDATE's are
defined, so this would make the versioning protocol more consistent).

Cheers,
Geoff



