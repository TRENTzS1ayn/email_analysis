docno="lists-040-6114341"
received="Fri Apr 13 16:44:34 2001"
isoreceived="20010413204434"
sent="Fri, 13 Apr 2001 13:46:24 -0700"
isosent="20010413204624"
name="Greg Stein"
email="gstein@lyra.org"
subject="Re: Issue: PROP_ATTR"
id="20010413134623.M31832@lyra.org"
charset="us-ascii"
inreplyto="3906C56A7BD1F54593344C05BD1374B1018E235C&#64;SUS-MA1IT01"
expires="-1"

To: WebDAV WG<w3c-dist-auth@w3.org>


The issue is that <theprop> provides the name. The stuff inside that is the
property value. Attributes on the root are associated with the name, not the
value.

Haven't we always tried to use element nesting as a means of structure?
Don't we tend to say that attributes are modifiers for the element they
occur on?

I'd rather not see attributes on the name supported. On the value, sure.

Maybe people are thinking that the name element is stored with the value. I
see it more as the name is a key, which then maps to the value. Further, the
name (key) is broken into a tuple of (localpart, namespace-uri, xml:lang),
so I don't see it as stored as XML with the rest of the value. And since it
isn't in XML format, it becomes very difficult to store things such as
attributes.

Let's say that you *do* choose to store the name with the XML value. How do
you manage the namespace and xml:lang. Does the property always have to
store a private namespace to ensure that you don't get prefix clashes? For
example:

  <P:myprop xmlns:P="private-namespace-prefix-marker">value</P:myprop>

(as opposed to collecting a union of all namespace prefixes and placing them
 on a higher element)

In the store-with-value approach, you're duplicating the data from the key
to the value. Maybe the word "normalization" is too loud in my head :-), but
I prefer not to do that.

Cheers,
-g

On Fri, Apr 13, 2001 at 02:34:36PM -0400, Clemm, Geoff wrote:
> For dead properties, I don't see the issue wrt storing attribute values
> for the root element.  If you are storing attributes on all the nested
> elements (as I believe everyone has agreed), it should be trivial 
> to store it on the root element as well.
> 
> For live properties, where the server can take advantage of its knowledge
> of the value space for the live property values, then I agree that it
> could be an issue.
> 
> So I still prefer saying MUST on all attributes of dead properties,
> and "as specified in the property definition" for live properties. 
> 
> Cheers,
> Geoff
> 
> -----Original Message-----
> From: Kevin Wiggen [mailto:wiggs@wiggenout.com]
> Sent: Friday, April 13, 2001 12:02 PM
> To: Greg Stein; WebDAV WG
> Subject: RE: Issue: PROP_ATTR
> 
> 
> 
> I agree with Greg et all that "attr2" needs to be stored.
> 
> I believe that allowing "attr1" could lead to some interop problems, or we
> need to spec this out a little better:
> 
> <D:prop>
>   <theprop attr1="foo"/>
>   <theprop attr1="bar"/>
>   <theprop attr2="fee"/>
> </D:prop>
> 
> Is that legal?  Does the attribute make the property unique?  Does simply
> the value of an attribute make it unique?  Or do we (like xmllang) simply
> store one set of attributes for a property?
> 
> Also how does one use Dasl with attributes on properties?
> 
> I would like to see attributes on the property name not be supported.
> 
> Kevin
> 
> -----Original Message-----
> From: w3c-dist-auth-request@w3.org
> [mailto:w3c-dist-auth-request@w3.org]On Behalf Of Greg Stein
> Sent: Wednesday, April 11, 2001 1:06 AM
> To: WebDAV WG
> Subject: Re: Issue: PROP_ATTR
> 
> 
> The question isn't about attributes in general, it is about *which*
> attributes. Consider the following:
> 
>   <D:prop>
>     <theprop attr1="foo">
>       thevalue
>       <subelem attr2="bar"/>
>     </myprop>
>   </D:prop>
> 
> I believe everybody would agree that attr2 gets stored. The real question is
> about attr1. I see that attribute as part of the element that *names* a
> property, but it isn't part of the property *value*.
> 
> IMO, PROP_ATTR is about defining the boundary between property naming, and a
> property's value.
> 
> Cheers,
> -g
> 
> On Tue, Apr 10, 2001 at 10:58:21PM -0700, Eric Sedlar wrote:
> > I agree.  There is no reason not to persist attributes.
> >
> > > -----Original Message-----
> > > From: w3c-dist-auth-request@w3.org
> > > [mailto:w3c-dist-auth-request@w3.org]On Behalf Of Mark A. Hale
> > > Sent: Tuesday, April 10, 2001 6:29 PM
> > > To: WebDAV WG
> > > Subject: RE: Issue: PROP_ATTR
> > >
> > >
> > > Jim:  Thanks for getting the issues list started.
> > >
> > > I believe that WebDAV must permit properties to have attributes.
> > > As you've
> > > pointed out, RDF and PRISM do use them extensively.  A server can
> reformat
> > > the attributes in a subsequent PROPFIND request.  Attrbiutes should be
> > > persistent.
> > >
> > > Thanks,
> > >
> > > Mark
> > >
> > >
> > >
> > >
> > > > -----Original Message-----
> > > > From: w3c-dist-auth-request@w3.org
> > > > [mailto:w3c-dist-auth-request@w3.org]On Behalf Of Jim Whitehead
> > > > Sent: Tuesday, April 10, 2001 5:54 PM
> > > > To: WebDAV WG
> > > > Subject: Issue: PROP_ATTR
> > > >
> > > >
> > > > As mentioned in a previous post, now is the time to start
> > > resolving issues
> > > > on the RFC 2518 issues list.  As fate would have it, the first
> > > > issue on the
> > > > list is one that has been contentious in the past. Can we come to
> > > > consensus
> > > > on it now?
> > > >
> > > > Issue: PROP_ATTR
> > > >
> > > > Description:
> > > >
> > > > What is a WebDAV server required to do with XML attributes other than
> > > > xml:lang submitted with a PROPPATCH?  This affects how well
> > > WebDAV will be
> > > > able to support RDF, since RDF uses attributes extensively.
> > > >
> > > > Greg Stein originally raised this issue:
> > > >
> > > > http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0089.html
> > > >
> > > > See also:
> > > >
> > > > http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0092.html
> > > > http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0094.html
> > > > http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0095.html
> > > >
> > > >
> > > >
> > > >
> > > >
> > >
> > >
> 
> --
> Greg Stein, http://www.lyra.org/

-- 
Greg Stein, http://www.lyra.org/



