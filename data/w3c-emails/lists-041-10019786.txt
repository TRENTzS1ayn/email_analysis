docno="lists-041-10019786"
received="Wed Sep  4 09:55:12 2002"
isoreceived="20020904135512"
sent="Wed, 4 Sep 2002 09:54:36 -0400 "
isosent="20020904135436"
name="Clemm, Geoff"
email="gclemm@rational.com"
subject="RE: What is left after LOCK/UNLOCK on null resource?"
id="3906C56A7BD1F54593344C05BD1374B10808D725@SUS-MA1IT01"
inreplyto="What is left after LOCK/UNLOCK on null resource?"
expires="-1"


To:w3c-dist-auth@w3.org


It is very reasonable/sensible behavior for a client to
refuse to unlock a resource if it wasn't the process that
took out the lock.  A client should never unlock such
a resource without getting explicit confirmation from the
user to do so, but a client can reasonably refuse to give
the user that choice, because a user is often not in a
position to make the right choice (i.e. forgets or is not
aware that something else being done on their behalf requires
that resource to be locked).

Such a client should of course set a timeout on any lock that
it takes out, so that the server can automatically expire a
lock when the client that took out the lock has dies or otherwise
failed to unlock.

Cheers,
Geoff

-----Original Message-----
From: Michael Leditschke [mailto:mike@ammd.com.au]

... It would appear
that the slide client can only delete a lock if it created
the lock in the *same* session. If I fire up the client,
create a lock, exit, fire it up again and attempt an unlock,
the operation fails. Nothing appears on the wire. A brief
troll through the code suggests the client won't even try if
it doesn't find the lock in its internal state structure, and
this structure only gets populated as part of a lock operation
- though I'm happy to be corrected.


Can anyone confirm whether this is the expected client behaviour,
or a bug? I would have thought you should be able to unlock a
resource independent of when the lock operation occurred.



