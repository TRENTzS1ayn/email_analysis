docno="lists-041-14186157"
received="Mon Oct 21 16:28:19 2002"
isoreceived="20021021202819"
sent="Mon, 21 Oct 2002 13:24:52 -0700"
isosent="20021021202452"
name="Jim Whitehead"
email="ejw@cse.ucsc.edu"
subject="RE: BIND vs. non-movable resources in RFC3253"
id="AMEPKEBLDJJCCDEJHAMIEEKGFKAA.ejw@cse.ucsc.edu"
charset="iso-8859-1"
inreplyto="E4F2D33B98DF7E4880884B9F0E6FDEE25ED4CC&#64;SUS-MA1IT01"
expires="-1"

To:"WebDAV"<w3c-dist-auth@w3.org>



Perhaps what's lying at the core of this issue is a difference in assumption
over who controls the namespace. The binding specification assumes that in
WebDAV-compliant portions of the namespace, the client has a large degree of
control over naming and deletion. Resources are created at locations the
client specifies, can be moved to places the client wants, and rebound to
new names at will.

The non-movable resources in DeltaV are typically created by the server, at
names the server chooses. Often these resources won't be represented the
same way as "file-like" resources, and will instead be acting as the handle
for a computational process that queries the versioned repository to return
property data. That is, they act more like a servlet or a CGI. In this case,
it's important for the server to have these resources at the place where it
created them, since that's where its software expects queries against those
resources to be directed. (It's additionally important that they stay in the
same place for the indentification usability issues Geoff outlined).

IMO, accommodating this difference requires explicitly acknowledging the two
different classes of resource binding behavior (fixed vs. free) and then
explicitly adding language describing the behavior of fixed types to the
binding specification (something similar to Stephan's language would
probably work). Revisions to DeltaV can indicate, for all DeltaV resource
types, what kind of binding behavior they exhibit.

As for why we should add this language -- the idea is to make it so that a
client, when encountering resources of both types, can behave intelligently,
without having to perform trial and error to accomplish useful tasks.

- Jim



