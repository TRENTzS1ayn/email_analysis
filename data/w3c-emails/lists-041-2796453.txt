docno="lists-041-2796453"
received="Tue May 28 03:11:31 2002"
isoreceived="20020528071131"
sent="Tue, 28 May 2002 09:10:57 +0200"
isosent="20020528071057"
name="Julian Reschke"
email="julian.reschke@gmx.de"
subject="RE: Issue: SOURCE_PROPERTY_UNDERSPECIFIED"
id="JIEGINCHMLABHJBIGKBCAEKMEKAA.julian.reschke@gmx.de"
charset="iso-8859-1"
inreplyto="3906C56A7BD1F54593344C05BD1374B106EEC1DD&#64;SUS-MA1IT01"
expires="-1"

To:"Clemm, Geoff"<gclemm@rational.com>,"Webdav WG \(E-mail\)"<w3c-dist-auth@w3c.org>


> From: w3c-dist-auth-request@w3.org
> [mailto:w3c-dist-auth-request@w3.org]On Behalf Of Clemm, Geoff
> Sent: Tuesday, May 28, 2002 2:44 AM
> To: Webdav WG (E-mail)
> Subject: RE: Issue: SOURCE_PROPERTY_UNDERSPECIFIED
>
>
> I agree with the addition of the DAV:sourcelabel element.
>
> But I object to the use of the xlink:href attribute, instead of the
> standard WebDAV DAV:href element.  I believe it is significantly more
> important to maintain consistency within the WebDAV standard than it
> is to be consistent with some non-WebDAV standard such as xlink.  In
> particular, this breaks functionality such as is provided by the
> DAV:expand-property report defined in RFC-3253, which is based on the
> existence of DAV:href nodes in property values.

Geoff,

I expected this one :-)

Pros for DAV:href syntax:

h1 - consistent with other WebDAV specs
h2 - can take advantage of DAV:expand-property report

Pros for XLink syntax:

x1 - consistent with W3C recommendations
x2 - can be processed using standard XLink aware code (for instance, in
browsers / xml based user interfaces)
x3 - provides a standard framework for the definition of rules as URIs

Thoughts:

h2: isn't really a problem. We just define a new REPORT (or extend the
existing one) to work on xlink:href elements as well. Note that xlink:href
elements may appear in other people's dead (and live) properties anyway, so
it makes sense to have a standard way to resolve them anyway. If there's
some interest in this, I'll make a proposal.

x3: I think any solution using non-XLink based syntax must define a way how
to express the role of the link. One way would be to reuse XLinks link role
URIs *without* using their syntax (which I'd consider lame :-).



