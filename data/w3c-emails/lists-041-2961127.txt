docno="lists-041-2961127"
received="Wed May 29 19:00:26 2002"
isoreceived="20020529230026"
sent="Thu, 30 May 2002 08:59:19 +1000"
isosent="20020529225919"
name="Alan Kent"
email="ajk@mds.rmit.edu.au"
subject="What is DASL for?"
id="20020530085919.B28975@io.mds.rmit.edu.au"
charset="us-ascii"
expires="-1"

To: WebDAV<w3c-dist-auth@w3.org>



This might sound like a very naive question, but I am trying to understand
the use cases for DASL. That is, what sorts of problems are people trying
to solve? Being an open framework to drop any sort of query you like into
it to me does not improve interoperability in the long term.

Then basicsearch - is it intended for searching the content of resources
or their properties? Or both? As a search engine implementor, the
combination of both is hard. Many properties are computed values, not
stored. This makes them harder to index. So half the query evaluator
has to ask the resource objects for computed information, then the other
half can look up indexes. This gets hard to integrate nicely.

Using a naive example: Google will crawl the content of a web site
then index it. For WebDAV searching I can see the logic in trying
to keep the index in sync with the online content. I am just trying
to work out an architecture for integrating a search engine with a
WebDAV file system. Our WebDAV library is a toolkit that developers
can plug in their own underlying implementation (we have a text database
product, so the WebDAV toolkit is to allow editing of that content).
But with the mix of live and dead properties, I currently have no
idea of the best model for implementing a query engine.

Hence my question of what is the goal:

* To enable searching of content? (Similar goals to say google)

* To enable searching through a file system to find files that match
  certain properties (more like "Find Files" under windows") in a
  way that is faster than the client doing PROPFIND etc on each
  individual file.

If the latter, I would implement the query engine without using indexes,
and just do the file system walk at the server end and check the various
conditions to find matching resources.

Thanks
Alan
-- 
Alan Kent (mailto:ajk@mds.rmit.edu.au, http://www.mds.rmit.edu.au/~ajk/)
Project: TeraText Technical Director, InQuirion Pty Ltd (www.inquirion.com)
Postal: Multimedia Database Systems, RMIT, GPO Box 2476V, Melbourne 3001.
Where: RMIT MDS, Bld 91, Level 3, 110 Victoria St, Carlton 3053, VIC Australia.
Phone: +61 3 9925 4114  Reception: +61 3 9925 4099  Fax: +61 3 9925 4098 



