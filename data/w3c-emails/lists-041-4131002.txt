docno="lists-041-4131002"
received="Wed Jan  9 03:34:29 2002"
isoreceived="20020109083429"
sent="Wed, 9 Jan 2002 09:33:54 +0100"
isosent="20020109083354"
name="Julian Reschke"
email="julian.reschke@gmx.de"
subject="RE: Interest in standardizing Batch methods?"
id="JIEGINCHMLABHJBIGKBCKEDIDMAA.julian.reschke@gmx.de"
charset="us-ascii"
inreplyto="HPELJFCBPHIPBEJDHKGKCENLDDAA.lisa&#64;xythos.com"
expires="-1"

To:"Lisa Dusseault"<lisa@xythos.com>,"Greg Stein"<gstein@lyra.org>,"Jim Whitehead"<ejw@cse.ucsc.edu>
Cc:"WebDAV"<w3c-dist-auth@w3.org>


Looking at RFC2616:

"8.1.2.2 Pipelining
A client that supports persistent connections MAY "pipeline" its requests
(i.e., send multiple requests without
waiting for each response). A server MUST send its responses to those
requests in the same order that the requests
were received.
Clients which assume persistent connections and pipeline immediately after
connection establishment SHOULD be
prepared to retry their connection if the first pipelined attempt fails. If
a client does such a retry, it MUST NOT
pipeline before it knows the connection is persistent. Clients MUST also be
prepared to resend their requests if the
server closes the connection before sending all of the corresponding
responses.
Clients SHOULD NOT pipeline requests using non-idempotent methods or
non-idempotent sequences of methods
(see section 9.1.2). Otherwise, a premature termination of the transport
connection could lead to indeterminate
results. A client wishing to send a non-idempotent request SHOULD wait to
send that request until it has received
the response status for the previous request."

So it seems that pipelining wouldn't be allowed for anything except PROPFIND
(MOVE/DELETE/PROPPATCH aren't idempotent), right?

> -----Original Message-----
> From: w3c-dist-auth-request@w3.org
> [mailto:w3c-dist-auth-request@w3.org]On Behalf Of Lisa Dusseault
> Sent: Wednesday, January 09, 2002 6:30 AM
> To: Greg Stein; Jim Whitehead
> Cc: WebDAV
> Subject: RE: Interest in standardizing Batch methods?
>
>
>
> > Personally, I'm going to guess they didn't pipeline requests, so a batch
> > mechanism was a must to get around deficiencies in their protocol stack.
>
> There's potentially a little more to it than that.
> (1) Imagine a client selects a bunch of resources and drags to
> move them all
> to a different folder.  A batch MOVE operation can do those in one
> transaction, so that the whole request fails if not all can be
> moved.  This
> becomes rather more important if the client is actually using an API
> (MSDAIPP??) that offers large-scope operations, yet how can it guarantee
> that operation will work or won't work if it can only send it piecemeal to
> the server?
>
> (2) See Yaron's email
> (http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0303.html)
> about why pipelining doesn't always work (can't always be used even when
> available).  I don't know to what extent pipelining is realistically
> unavailable/unworkable.
>
> That said, it's still not clear batch methods are so necessary they'd
> preempt other work we've got to do.
>
> Lisa
>



