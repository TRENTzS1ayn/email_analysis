docno="lists-042-6243430"
received="Thu Jul 17 15:17:03 2003"
isoreceived="20030717191703"
sent="Thu, 17 Jul 2003 15:17:09 -0400"
isosent="20030717191709"
name="Geoffrey M Clemm"
email="geoffrey.clemm@us.ibm.com"
subject="Re: Interest in standardizing Batch methods?"
id="OF1961D97D.F007B4BE-ON85256D66.0069A426-85256D66.0069F116@us.ibm.com"
charset="US-ASCII"
inreplyto="3F16EA8F.40904&#64;nasa.gov"
expires="-1"

To: WebDAV<w3c-dist-auth@w3.org>



I agree with Chris.  The easy things aren't worth doing (you get virtually
all of the benefit by streaming your requests and not blocking waiting for
the response to each request), and the hard things are very complex and
any given approach is unlikely to be a good basis for interoperation.

Cheers,
Geoff

Chris wrote on 07/17/2003 02:27:27 PM:

> And boy, the semantics of batch requests are pretty hairy. At the end of 

> the day is there much benefit? Is each request in a batch atomic and/or 
> is the entire batch? (Do you have multiple levels of transactions?) How 
> do you cache a batch? (Boy, there's a long topic...)
> 
> The HTTP overhead for multiple requests (made over the same TCP 
> connection, mind you) is small (arguably, couldn't be much smaller) and 
> if you want atomic batches, locks do an ok job of it.
> 
> I've certainly considered something like a PUT/PROPPATCH combination 
> (for example if you had "required dead properties") but it's probably 
> just easier to do a null lock and the two requests separately.
> 



