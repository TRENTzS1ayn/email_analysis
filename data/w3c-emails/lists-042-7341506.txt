docno="lists-042-7341506"
received="Sun Aug 17 08:58:15 2003"
isoreceived="20030817125815"
sent="Sun, 17 Aug 2003 14:57:46 +0200"
isosent="20030817125746"
name="Nevermann, Dr., Peter"
email="Peter.Nevermann@softwareag.com"
subject="COPY and bindings II"
id="DFF2AC9E3583D511A21F0008C7E6210605C48010@daemsg02.software-ag.de"
charset="iso-8859-1"
expires="-1"


To:"'w3c-dist-auth@w3c.org'"<w3c-dist-auth@w3c.org>

A while ago I asked, whether - assuming no resource at destination to
overwrite - COPY should preserve bindings, i.e. should COPY yield 1) or 2)
(see below):

1)
      |u1     --COPY-->    |u2
      C                    C'  
    a/  \b               a/  \b 
    C1  C2               Ca  Cb 
    x\  /y              x|    |y
      R                  Rx  Ry

2)
      |u1     --COPY-->    |u2    
      C                    C'  
    a/  \b               a/  \b 
    C1  C2               Ca  Cb 
    x\  /y               x\  /y
      R                    R'

Most of you voted for 2).

Now, assuming there *were* resources at destination to overwrite - take
diagram 1) for visualization, where C', Ca, Cb, Rx, Ry all existed
beforehand - I assume that COPY u1->u2 would result in Rx and Ry both being
updated with content + dead-properties from R.

And, again using diagram 1) and assuming all shown resources existed
beforehand, what happens if we do the COPY the other way round, i.e. COPY
u2->u1? The Binding spec states in section 2.3, last paragraph:
"If a COPY causes one or more existing resources to be updated, the bindings
to those resources MUST be unaffected by the COPY."
Is it then correct, that while copying the C'-tree over the C-tree, resource
R is first updated by Rx and then again by Ry (or the other way round)? That
is, one of Rx or Ry "wins" in updating R? Hm???

Regards,
Peter



