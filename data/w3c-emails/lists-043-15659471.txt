docno="lists-043-15659471"
received="Thu Oct 14 14:09:44 1999"
isoreceived="19991014180944"
sent="Thu, 14 Oct 1999 14:11:04 -0400"
isosent="19991014181104"
name="Phillip M Hallam-Baker"
email="pbaker@verisign.com"
subject="RE: minimal canonicalization"
id="004c01bf166f$7a8b6580$6e07a8c0@pbaker-pc.verisign.com"
charset="iso-8859-1"
inreplyto="6B962A1EE646D31193270008C7A4BAB50933A3&#64;mail.paymentnet.com"
expires="-1"

To:"Greg Whitehead"<gwhitehead@signio.com>,<w3c-ietf-xmldsig@w3.org>



> We can't dictate a transport encoding, since we are expected to 
> sign content
> by reference.  In theory, HTTP should probably require the 
> rfc2049 canonical
> encoding for text/*, but it doesn't seem to.

It doesn't and shouldn't. In fact HTTP requires that the server not 
meddle with the text it is transporting.

HTTP adopted the novel idea that canonical encoding was part of the
problem and not the solution.


> Keep in mind that we're not modifying the content on disk (or on 
> its way to
> disk).  This is just part of the digest computation.

Actually this is what we should do. The signed bits should be the
bits delivered. I accept however that the bits that are sent may not
be the bits that arrive :-(


The CRLF -> LF, CR->LF convention can at least be formally described
as a FSM:-


Tokens
CR[Carriage Return]
LF[Line Feed]
NULL[The terminal token]
*[everything else]

Start
CRReturn[]
LFStart[LF]
*Start[*]
NULLEnd

Return
CRReturn[LF]
LFStart[LF]
*Start[LF *]
NULLEnd[LF]

Where the transitions from each state are described as:
Recieved Token, Next State, [Emitted Tokens]


The only problem with this approach is that we require the object
signed to use the LF convention when the IETF adopts the CRLF
convention. 

With a formal construction such as the above I can construct 
a formal proof that the cannonicalization has the fixed point 
property [I can show that for any given initial state and 
sequence of input tokens I can prove that f(x) and f((x))
shall arrive at the same state having emitted the same tokens]


Phill



