docno="lists-044-0184406"
received="Thu Oct 28 18:06:15 1999"
isoreceived="19991028220615"
sent="Thu, 28 Oct 1999 15:06:14 -0700"
isosent="19991028220614"
name="John Boyer"
email="jboyer@uwi.com"
subject="Parameterization of Transforms"
id="NDBBLAOMJKOFPMBCHJOIIEODCBAA.jboyer@uwi.com"
charset="iso-8859-1"
expires="-1"

To:"DSig Group"<w3c-ietf-xmldsig@w3.org>


Joseph asked for a brief description of the difference between parameterized
and unparameterized transforms.

The easiest example is a simple barename xpointer.  Suppose I want to
address an element named foo in some document.  It can be by one of the two
methods below.

<ObjectReference Location="http://.../somedocument">
<Transforms>
<Transform
Algorithm="http://www.w3.org/1999/07/WD-xptr-19990709">foo</Transform>
</Transforms>
</ObjectReference>

or

<ObjectReference Location="http://.../somedocument">
<Transforms>
<Transform Algorithm="http://www.w3.org/1999/07/WD-xptr-19990709">
<Parameter>foo</Parameter>
</Transform>
</Transforms>
</ObjectReference>

The parameter is unnecessary to xpointer.  I'd be amenable to it for the
sake of consistency except that no other defined transform seemed to need it
either. Finally, anyone defining an application specific transform can put
whatever internal structure they'd like inside the tranform element content.
For example, if you want to do a canonicalization algorithm, you can put the
CanonicalizationAlgorithm element into the Transform directly (as opposed to
putting the Canonicalization element into a Parameter that you then put into
the Transform).

John Boyer
Software Development Manager
UWI.Com -- The Internet Forms Company



