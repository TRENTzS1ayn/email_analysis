docno="lists-044-12846045"
received="Wed Jul 26 13:57:07 2000"
isoreceived="20000726175707"
sent="Wed, 26 Jul 2000 13:54:37 -0400"
isosent="20000726175437"
name="Ed Simon"
email="ed.simon@entrust.com"
subject="RE: XSL Transform"
id="ED026032A3FCD211AEDA00105A9C46960177B6FF@sothmxs05.entrust.com"
charset="iso-8859-1"
inreplyto="XSL Transform"
expires="-1"


To:"'w3c-ietf-xmldsig@w3.org'"<w3c-ietf-xmldsig@w3.org>,"'ht@cogsci.ed.ac.uk'"<ht@cogsci.ed.ac.uk>

I think we need input from someone like Henry T. who deeply 
understands schemas.  

The question that needs answering is this.  Suppose I have
Recommendation A has a schema and namespace.
Now, I'm creating schema B, "schemaB", and for schema B's element
<includeInstanceOfRecommendationA>, I want to indicate that the 
direct child  element of <includeInstanceOfRecommendationA> can only be 
schema A's root element.  Can I do it using XML Schema?

Now if Recommendation A does not have a schema but has a namespace,
I would at least like to indicate that the direct child  element of 
<includeInstanceOfRecommendationA> can only be Recommendation A's 
root element. Can I do it using XML Schema?

If XML Schema does not allow one to achieve either of these scenarios,
then much of this discussion is moot and we'll have to go with the
<any> option.  However it seems to me that sections 5.4 and 5.6 in
"http://www.w3.org/TR/xmlschema-0" means you can achieve at least the
second scenario.  I would like a schema expert to confirm this though.

Ed
-----Original Message-----
From: Joseph M. Reagle Jr. [mailto:reagle@w3.org]
Sent: Wednesday, July 26, 2000 1:24 PM
To: Ed Simon
Cc: 'w3c-ietf-xmldsig@w3.org'; 'ht@cogsci.ed.ac.uk'
Subject: RE: XSL Transform


At 12:28 7/26/2000 -0400, Ed Simon wrote:
 >Ed responds:
 >If we can enforce, to a reasonable degree, that XSLT <Transform>s indeed
 >have
 >a <stylesheet> root element, then I think the derived benefits of 
 >interoperability more than outweigh the cost of two or three more lines in
 >the schema. 

I'm not sure how to. I was thinking we could define our own XSLT root and
pretend its of the XSLT namespace, or even create our own schema stub with
the root node defined and everything else open (so we don't have to recreate
a whole schema). But, I'd be happier with some prose in that section stating
a recommendation over the content. So if you want to propose some prose or
clever schema tricks, please do so. <smile>

 > (It would certainly be nice is XSLT did provide a schema and
 >I hope they do in their next Recommendation version.)
 
The XSLT spec is littered with comments saying they plan to next time
around.

_________________________________________________________
Joseph Reagle Jr.   
W3C Policy Analyst                mailto:reagle@w3.org
IETF/W3C XML-Signature Co-Chair   http://www.w3.org/People/Reagle/



