docno="lists-044-2749629"
received="Mon Dec  6 11:36:31 1999"
isoreceived="19991206163631"
sent="Mon, 6 Dec 1999 08:35:11 -0800"
isosent="19991206163511"
name="John Boyer"
email="jboyer@uwi.com"
subject="RE: Comments for Transform"
id="NDBBLAOMJKOFPMBCHJOIAEIJCCAA.jboyer@uwi.com"
charset="iso-8859-1"
inreplyto="199912030450.NAA13834&#64;ns.trl.ibm.com"
expires="-1"

To:"TAMURA Kent"<kent@trl.ibm.co.jp>,<w3c-ietf-xmldsig@w3.org>
Cc:"Dave Solo"<dsolo@alum.mit.edu>


The phrase "the output of this transform is a new XML document" should be
changed to "the output of this transform is a document containing XML
markup".

As you will note from the five steps immediately below the comment you've
isolated, the encoding and XML declaration issues you mentioned are covered.

Further, you will notice in the recommendation immediately below those five
steps that we RECOMMEND that the output should be well-formed.  The intent
of that statement is that we recognize that it is possible for a node-set to
be a forest rather than a tree, and we recommend against that (although core
behavior will be to generate precisely what is specified by the XPath and
the five processing steps given).

So, I believe the spec covers the problems you address, but for clarity, the
simple wording change described above is required.

John Boyer
Software Development Manager
UWI.Com -- The Internet Forms Company


-----Original Message-----
From: w3c-ietf-xmldsig-request@w3.org
[mailto:w3c-ietf-xmldsig-request@w3.org]On Behalf Of TAMURA Kent
Sent: Thursday, December 02, 1999 8:51 PM
To: w3c-ietf-xmldsig@w3.org
Subject: Comments for Transform



I have comments for Transform(s) in the 19991116 draft.

There are some types of information passed from/to Transform.  A
handling of `node-set' type, which is output of XPath, is not
defined neatly in the draft.  It seems that the draft says in
`5.6.3 XPath Filtering' that a node-set always can be treated as
an XML document.  But it is not true because an XML document
must have just one element, and a node-set may consist of more
than one element, or attributes, or character data.  We can not
implement the first characteristics in 5.6.3 based on XML
Infoset, that is, an XML processor does not provide information
of an XML declaration, a character encoding, and existence of
BOM in a document.


I propose to define types of information as the following.

................................................................
There are three types:
o Octet stream
o Character stream
o XML document (or single XML element)

o Transforms
IN: octet stream (for external resource), or
    XML document (an Object element, for embeded resource)
OUT: octet stream

o Encoding
IN: octet sequence
OUT: octet sequence

o C14n
IN: XML document
OUT: octet sequence

o XPath/XPointer
IN: XML document
OUT: XML document (if a node-set is single element), or
     character stream (if a node-set is single text node)
     Error (otherwise)

o XSLT
IN: XML document
OUT: XML document (if <xsl:output method="XML"/>)
     character stream (if <xsl:output method="TEXT"/>)

(Octet sequences generated by XSLT are implementation-dependent.
For instance, XSLT document can not control order of attributes.
So, a C14n is needed after XSLT Transfroms.)


If a Transform expects an XML document as the input but the
output of previous Transform is a octet sequence or a character
sequence, the sequence is parsed as an XML document.

If a Transform expects an octet sequence as the input but the
output of previous Transform is a character sequence, the
sequence is encoded with UTF-8.

We must use a C14n or an Encoding as the last Transform.
................................................................

--
TAMURA Kent @ Tokyo Research Laboratory, IBM



