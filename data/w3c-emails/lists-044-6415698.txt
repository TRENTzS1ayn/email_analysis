docno="lists-044-6415698"
received="Thu Jun  8 14:11:20 2000"
isoreceived="20000608181120"
sent="Thu, 8 Jun 2000 11:11:18 -0700"
isosent="20000608181118"
name="John Boyer"
email="jboyer@PureEdge.com"
subject="RE: XPTr bare names and XPATH id()"
id="BFEDKCINEPLBDLODCODKOEDBCDAA.jboyer@PureEdge.com"
charset="us-ascii"
inreplyto="393FDB3F.F6EF8591&#64;w3.org"
expires="-1"

To:<connolly@w3.org>
Cc:"Henry S. Thompson"<ht@cogsci.ed.ac.uk>,"Joseph M. Reagle Jr."<reagle@w3.org>,"Daniel Veillard"<veillard@w3.org>,<w3t-tech@w3.org>,<w3c-ietf-xmldsig@w3.org>


Oops, yes I used incorrect terminology.  This replacement should be
satisfactory:

Furthermore, as I pointed out to the dsig group yesterday, and with which
you indicate agreement below, we are free to process an Xpath node-set or
XPointer location-set in any manner necessary.  Therefore, the XPointer
URI="#E" can
be processed by XPath serialization (or by the new c14n) by processing
E plus all nodes that have E as an ancestor.  In other words,
subtree(id("E")).
=================================

For the sake of ensuring that there is a resolution whether or not a
subtree() function exists, let me reiterate that, without the subtree()
function, we can still define the processing of the XPointer URI="#E" in
terms of Xpath serialization (or by the new c14n) by using the following
expression:

(//. | //@ | //namespace::*)[count(ancestor-or-self::* | id("E")) =
count(ancestor-or-self::*)]

(The Xpath transform processes nodes on the node-set and omits nodes not in
the node-set).

John Boyer
Software Development Manager
PureEdge Solutions Inc. (formerly UWI.Com)
Creating Binding E-Commerce
jboyer@PureEdge.com



-----Original Message-----
From: connolly@w3.org [mailto:connolly@w3.org]
Sent: Thursday, June 08, 2000 10:43 AM
To: John Boyer
Cc: Henry S. Thompson; Joseph M. Reagle Jr.; Daniel Veillard;
w3t-tech@w3.org; w3c-ietf-xmldsig@w3.org
Subject: Re: XPTr bare names and XPATH id()


John Boyer wrote:
>
[... lots of stuff that I agree with deleted ...]

> Furthermore, as I pointed out to the dsig group yesterday, and with which
> you indicate agreement below, we are free to define the XPointer URI="#E"
as
> indicating E plus all nodes that have E as an ancestor.  In other words,
> subtree(id("E")).

Not so. The XPointer spec says what #E means for XML, and it
says that it means the same thing that #xpointer(id("E")) means.
http://www.w3.org/TR/2000/CR-xptr-20000607#bare-names

You can't change the relationship between #E and
#xpointer(id("E")) without changing the XPointer spec.


--
Dan Connolly, W3C http://www.w3.org/People/Connolly/



