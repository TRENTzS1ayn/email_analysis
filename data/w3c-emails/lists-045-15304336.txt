docno="lists-045-15304336"
received="Mon Apr  8 21:59:22 2002"
isoreceived="20020409015922"
sent="Tue, 09 Apr 2002 06:58:59 -0700"
isosent="20020409135859"
name="Aleksey Sanin"
email="aleksey@aleksey.com"
subject="Re: New Version of XPath Filter"
id="3CB2F3A3.3040008@aleksey.com"
charset="KOI8-R"
inreplyto="20020408230512.1AA9143BEA&#64;yog-sothoth.ie.baltimore.com"
expires="-1"


To: merlin<merlin@baltimore.ie>
Cc: John Boyer<JBoyer@PureEdge.com>,reagle@w3.org,w3c-ietf-xmldsig@w3.org

Merlin,

I also did few "non-representative tests" and found that performing subtree
expansion externally gives 10-15% speedup in my case (LibXML2). However,
if the application *do not* want to expand subtrees then the performance is
much worse (5-6 times in the same tests but it significantly depends on
the expression and the number of direct childs you need to exclude).

It looks like the best solution would be to have an additional parameter 
that will
control whether childs expansion is done or not. For example, we could add
"#noChildsExpansion" to the transform href. In this case, the node set 
S' is set to S
and everything else is done as you've described in the proposal. What do 
you think?


Aleksey Sanin <aleksey@aleksey.com>
http://www.aleksey.com/xmlsec


BTW, the test program I used and few results are available for download:
        http://www.aleksey.com/xmlsec/download/misc/xpath-test.tar.gz
It requires recent LibXML2 library:
        http://xmlsoft.org/downloads.html




>In terms of performance, it is my experience that selecting nodes by XPath
>and performing the subtree expansion externally gives between 1.5x and 2x
>speedup (in two nonrepresentative tests). Not huge, but bear in mind that
>performance _was_ the reason we designed this transform. It's a free win,
>and it would seem a practical impossibility for an implementation to do
>this more slowly than a general XPath processor.
>



