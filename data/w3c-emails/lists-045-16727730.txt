docno="lists-045-16727730"
received="Tue May 21 16:07:28 2002"
isoreceived="20020521200728"
sent="Tue, 21 May 2002 22:12:32 +0200"
isosent="20020521201232"
name="Christian Geuer-Pollmann"
email="geuer-pollmann@nue.et-inf.uni-siegen.de"
subject="Latest benchmarks on xfilter2"
id="55216627.1022019152@pinkpanther"
charset="us-ascii"
inreplyto="54870679.1022018806&#64;pinkpanther"
expires="-1"

To:w3c-ietf-xmldsig@w3.org
Cc:reagle@w3c.org


Hi all,

I knew that my implementation is kind of slow, but I did not HOW much ;-) I 
rewrote my complete c14n code and now this babe is a little bit faster.. 
Remark: I did not optimize the transform algorithms, but only my c14n.

Well, anyhow, I again tested the performance of the official xfilter2 and 
on my own idea, both on three different samples (John's form, the xfilter2 
sample and my arbitrary sample). Here are the results:

>From what I see in these example:

- both transforms depend on the complexity of the
  selected "shape"

- xfilter2 consumes a monoton increasing processing power

- my approach is a little bit faster; it does only
  include nodes in the output node set of the transform
  which have also been in the input node set.


---------------------------

Signing a simple GIF image on my harddisk

300 * simple_gif_detached                 took 144,267 seconds

---------------------------

Signing John's form

300 * pureedge_xfilter2                   took 394,087 seconds
300 * pureedge_apachefilter               took 384,613 seconds

---------------------------

Signing the sample from the xfilter2 spec.

300 * xfilter2spec_xfilter2_1             took  50,112 seconds
300 * xfilter2spec_xfilter2_2             took  59,366 seconds
300 * xfilter2spec_xfilter2_3             took  64,853 seconds

300 * xfilter2spec_apachefilter_1         took  43,703 seconds
300 * xfilter2spec_apachefilter_2         took  53,357 seconds
300 * xfilter2spec_apachefilter_3         took  52,585 seconds

---------------------------

300 * apachesample_xfilter2_1             took  59,515 seconds
300 * apachesample_xfilter2_2             took  75,289 seconds
300 * apachesample_xfilter2_3             took  84,040 seconds
300 * apachesample_xfilter2_4             took  98,492 seconds
300 * apachesample_xfilter2_5             took 108,516 seconds
300 * apachesample_xfilter2_6             took 129,456 seconds
300 * apachesample_xfilter2_7             took 136,086 seconds

300 * apachesample_apachefilter_1         took  60,878 seconds
300 * apachesample_apachefilter_2         took  63,281 seconds
300 * apachesample_apachefilter_3         took  64,432 seconds
300 * apachesample_apachefilter_4         took  61,419 seconds
300 * apachesample_apachefilter_5         took  61,608 seconds
300 * apachesample_apachefilter_6         took  65,845 seconds
300 * apachesample_apachefilter_7         took  65,044 seconds
300 * apachesample_apachefilter_7_optimal took  62,961 seconds

The ..._apachefilter_7_optimal test is a transform where I excluded a 
complete subtree which is a little bit faster that apachefilter_7 but 
produces the same node set.

Hope I don't bother you all too much with my ideas.


Regards,
Christian



