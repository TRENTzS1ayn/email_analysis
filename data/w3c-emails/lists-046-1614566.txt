docno="lists-046-1614566"
received="Fri Jun 14 04:07:30 2002"
isoreceived="20020614080730"
sent="Fri, 14 Jun 2002 10:07:47 +0200"
isosent="20020614080747"
name="Christian Geuer-Pollmann"
email="geuer-pollmann@nue.et-inf.uni-siegen.de"
subject="Re: POLL: Fwd: Re: XPath filter 2.0"
id="6365112.1024049267@crypto"
charset="us-ascii"
inreplyto="20020612134002.8134B8623E&#64;aeon.w3.org"
expires="-1"

To:reagle@w3.org, merlin<merlin@baltimore.ie>
cc: John Boyer<JBoyer@PureEdge.com>,w3c-ietf-xmldsig@w3.org





--On Mittwoch, 12. Juni 2002 09:40 -0400 Joseph Reagle <reagle@w3.org> 
wrote:

> On Tuesday 11 June 2002 07:38 pm, Christian Geuer-Pollmann wrote:
>> Apache test against merlin-xpath-filter2-three.tar.gz:
>>
>> 1: xpath-filter2 It verifies.
>> 2: performance: The pure transform takes 470 milli-seconds on my 350 MHz
>> notebook.
>
> Cool: updated! Even though these benchmarks are far from scientific it'd
> be  nice to keep the units relatively close. Could you report the
> sign/verify  (as John specified) or sign (as Merlin reported)? (A 350MHz
> machine is  about half the bogomips of the specified target.)

This value was verification like Merlin did.

I made some tests on well, our (three) transforms:

1: The OLD xfilter2 where union could re-include
   previously omitted nodes and a Transform could
   only carry no multiple XPathes and where I did
   NO optimization.

2: My own tree labeling transform.

3: The NEW xfilter2 where multiple XPath ops can be
   grouped and where I made an optimization similar
   to the one proposed by Merlin.

------------------

On the pureedge example, the times look like this:

50 * pureedge_xfilter2 took          135,695 seconds
50 * pureedge_apachefilter took      131,449 seconds
50 * pureedge_xfilter2_new took      142,715 seconds

I'm not sure why, but the NEW xfilter2 takes more time than the OLD 
xfilter2, maybe the optimization can't help for only a single subtract 
operation. My alternative approach is faster here.

------------------

Using the example from the spec

50 * xfilter2spec_xfilter2_3 took     20,359 seconds
50 * xfilter2spec_apachefilter_3 took 13,840 seconds
50 * xfilter2spec_xfilter2_3_new took 13,669 seconds

For three ops grouped in a single transform, the optimization can show what 
it does and shoes the same performance as my own approach does.

------------------

Regards,
Christian



