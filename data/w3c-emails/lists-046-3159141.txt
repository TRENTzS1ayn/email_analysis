docno="lists-046-3159141"
received="Sat Feb  2 15:32:39 2002"
isoreceived="20020202203239"
sent="Sat, 2 Feb 2002 15:37:51 -0500"
isosent="20020202203751"
name="Eugene Kuznetsov"
email="eugene@datapower.com"
subject="RE: History: Question on C14N list of nodes instead of subtrees"
id="NDBBLGLOJMHANDPKJOCOCEJNFEAA.eugene@datapower.com"
charset="iso-8859-1"
inreplyto="200202011723.MAA25616&#64;tux.w3.org"
expires="-1"

To:<reagle@w3.org>,"John Boyer"<JBoyer@PureEdge.com>,"merlin"<merlin@baltimore.ie>
Cc:<w3c-ietf-xmldsig@w3.org>


> from the datapower XSLTMark tests [1]. I'm not sure how much it tells us 
> other than there's a large difference in performance between the 
> implementations. 

Exactly, that is probably the most important conclusion. Also, some
of the published XSLTMark results out there are starting to get a 
little out of date with current XSLT engine versions, but you can 
always download it and run tests yourself. 

On the topic of nodes vs. subtrees and XPath directly, XPath itself
is not the problem. It *is* possible to make those operations 
extremely efficient (that's part of what DataPower does). I really
doubt that having a different selection approach with a more 
obscure specification will help either interoperability or efficiency
in the long run -- it's good to keep reusing XPath and XSLT whenever
possible, since at least there are folks working on buidling wirespeed
engines for those specifications. Who's got XPointer optimization
experience? ;-)



\\ Eugene Kuznetsov
\\ eugene@datapower.com
\\ DataPower Technology, Inc.
 



