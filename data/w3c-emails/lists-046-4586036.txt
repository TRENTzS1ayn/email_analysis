docno="lists-046-4586036"
received="Tue Mar 19 19:59:27 2002"
isoreceived="20020320005927"
sent="Tue, 19 Mar 2002 16:58:53 -0800"
isosent="20020320005853"
name="John Boyer"
email="JBoyer@PureEdge.com"
subject="RE: Should I organize a call on the XPath Filter?"
id="7874BFCCD289A645B5CE3935769F0B5232848E@tigger.PureEdge.com"
inreplyto="Should I organize a call on the XPath Filter?"
expires="-1"


To:<reagle@w3.org>,"Christian Geuer-Pollmann"<geuer-pollmann@nue.et-inf.uni-siegen.de>,"TAMURA Kent"<kent@trl.ibm.co.jp>,"merlin"<merlin@baltimore.ie>
Cc:<w3c-ietf-xmldsig@w3.org>



Hi Joseph, Merlin, Gregor and Christian,

I'm happy to do a conference call, but one may not be necessary because
I feel inclined to acquiesce on this point in favor of set intersection
and subtraction as long as we change the keywords and define a couple of
specific optimizations, as Merlin has proposed.

The first reason is that we have numerous people who have walked down
the wrong implementation path.  This is one of the indicators I use to
detect the need for improvement in a software architecture.

The second reason is that I have always liked these operations better
from an elegance standpoint (my principal concern is not wanting to be
burned again on speed issues).

The third reason is that I think Merlin's approach of defining the
specific optimizations will work out for the very simple cases I'm
concerned about; as long as those optimizations are RECOMMENDED to
implement, I think that is strong enough language for me.

From a change standpoint, defining set intersection and subtraction is a
relatively small change to the spec.  I think the optimizations will
also be easy to define and not hard on the programmer because we
basically only want to account for the current include/exclude cases.
Given the optimizations, I would certainly agree that the set operations
represent a preferable architecture.

Finally, I remain convinced that we should do set intersect and
subtract, not those in Christian's proposal (no offense; it was a good
strawman, but I still don't see how it's faster except in some really
esoteric scenarios).

As our fearless leader, Joseph, I think the question is to take a yes/no
vote on change from include/exclude to (intersect/subtract + recommended
simple optimizations).

Thanks,
John Boyer

-----Original Message-----
From: Joseph Reagle [mailto:reagle@w3.org]
Sent: Tuesday, March 19, 2002 1:38 PM
To: John Boyer; Christian Geuer-Pollmann; TAMURA Kent; merlin
Cc: w3c-ietf-xmldsig@w3.org
Subject: Should I organize a call on the XPath Filter?



If I organized a teleconference bridge so we could discuss this issue, 
would that be useful to folks? The reason I ask is because I can't yet 
formulate a simple question to pose to the list. Presently, I have four 
issues in mind:

1. What we call the operations -- easy once we settle on the other
issues.
2. The type of operation: as specified, Merlin's intersections [2], and 
Christian's include/search [3].
3. The input node set (see my question in the previous email).
4. The optimized speed of whatever we decide on.

The discussion on the list is very instructive and we can let it
percolate 
a bit more, but if desired, I'll organize a call.

[2] 
http://lists.w3.org/Archives/Public/w3c-ietf-xmldsig/2002JanMar/0197.htm
l
[3] 
http://lists.w3.org/Archives/Public/w3c-ietf-xmldsig/2002JanMar/0223.htm
l


-- 

Joseph Reagle Jr.                 http://www.w3.org/People/Reagle/
W3C Policy Analyst                mailto:reagle@w3.org
IETF/W3C XML-Signature Co-Chair   http://www.w3.org/Signature/
W3C XML Encryption Chair          http://www.w3.org/Encryption/2001/



