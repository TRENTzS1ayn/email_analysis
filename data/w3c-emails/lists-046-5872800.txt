docno="lists-046-5872800"
received="Fri Jul 26 10:27:47 2002"
isoreceived="20020726142747"
sent="Fri, 26 Jul 2002 07:27:08 -0700"
isosent="20020726142708"
name="Carl Ellison"
email="cme@jf.intel.com"
subject="C14N-Hash implementations???"
id="3.0.5.32.20020726072708.01f4f9f8@mailbox.jf.intel.com"
charset="us-ascii"
inreplyto="000501c233e4$a0dccc20$f2a0fea9&#64;DJQC7111"
expires="-1"


To:"XML Signature \(W3C/IETF\)"<w3c-ietf-xmldsig@w3.org>
Cc: Carl Ellison<cme@jf.intel.com>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I am very curious whether anyone has done what I call C14N-Hash. 
That is, all C14N implementations I have heard of run exorbitantly
long times.  I suspect that that runtime is due mostly to string
concatenation operations.  If instead of building a single canonical
XML string you walk a DOM and only send substrings to a hash
accumulator, in the C14N order, you should be able to produce the
C14N hash of a DOM structure in almost the time it takes to walk that
structure for printing without canonicalization.

So, has anyone done that experiment?  If so, how did it perform?

 - Carl

-----BEGIN PGP SIGNATURE-----
Version: PGP 7.1

iQA/AwUBPUFcPMxqBGb+WvJAEQL+RQCghVlf5vzCFs83Q+ZTWkzrpkiMVskAniQ1
n5js1Ib2uWVbf5Lg0uhgPlH0
=i4GR
-----END PGP SIGNATURE-----


+--------------------------------------------------------+
|Carl Ellison      Intel Labs        E: cme@jf.intel.com |
|2111 NE 25th Ave                    T: +1-503-264-2900  |
|Hillsboro OR 97124                  F: +1-503-264-6225  |
|PGP Key ID: 0xFE5AF240              C: +1-503-819-6618  |
|  1FDB 2770 08D7 8540 E157  AAB4 CC6A 0466 FE5A F240    |
+--------------------------------------------------------+



