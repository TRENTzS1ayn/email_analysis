docno="lists-046-8298573"
received="Tue Jan 28 17:59:34 2003"
isoreceived="20030128225934"
sent="Tue, 28 Jan 2003 17:59:30 -0500"
isosent="20030128225930"
name="Joseph Reagle"
email="reagle@w3.org"
subject="Re: Please review RDF Last Call"
id="200301281759.30341.reagle@w3.org"
charset="iso-8859-1"
inreplyto="200301280800.13258.jjc&#64;hpl.hp.com"
expires="-1"

To: Jeremy Carroll<jjc@hpl.hp.com>,w3c-ietf-xmldsig@w3.org
Cc:www-rdf-comments@w3.org,n-shiraishi@w3.org



On Tuesday 28 January 2003 02:00, Jeremy Carroll wrote:
> This is a formal request from RDF Core to I18N WG to review
> the six RDF Last Call Working Drafts listed at:
>   http://www.w3.org/2001/sw/RDFCore/#documents

Assuming you mean xmldsig WG (not I18N): <smile/>

> We are particularly interested in your thoughts on our use of XML
> Canonicalization to assist with defining the meaning of embedding
> fragments of XML within RDF.

Comments follow.

> ...
> RDF Semantics
> http://www.w3.org/TR/rdf-mt/
> #rdfinterp
> #dtype_interp

As an aside, do you intend to actually "require" a particular QName prefix 
when it says, "which we will refer to as XSD and use the Qname prefix xsd:. 
"? That seems rather brittle.

> RDF Test Cases
> http://www.w3.org/TR/rdf-testcases/
> #ntriples  is probably worth reading.
> Search for /xml-literal/   (2 tests)
>
> A specific point is to do with the use of exclusive canonicalization in
> RDF Syntax. 

I'm confused by this because most of the specifications are citing Canonical 
XML (c14n), not Exclusive Canonicalization (exc-c14n). For example, the RDF 
Syntax is very specific and cites exc-c14n, but the semantics specification 
cites c14n. (I recommend you use exc-c14n).

> We have chosen to leave it as implementation dependent
> whether or not XML comments are significant, and also which
> not-visibly-used namespaces are preserved (your InclusiveNamespaces
> PrefixList). 

I presume that the reason you even care how the xml-literal is represented 
is that you will want to compare RDF instances (which might contain 
xml-literals) to see if they are identical at some point? If that's the 
case, then won't you want the character/octet representation of XML within 
a RDF representation to be equivalent as well? For example, if you are 
comparing two RDF blobs for identity, you wouldn't want the two 
xml-literals to be different because one implementation cared about 
comments and the other didn't...?

> For instance, my own implementation treats any namespace
> that is explicitly redeclared (or declared for the first time) on an XML
> element as significant, even though such redeclaration information is not
> available in the XPath Nodeset.

First, again, what purpose is a canonicalization even serving if you are 
likely to get implementation variances? Second, not sure if I followed the 
above, but my understanding would improve with additional information about 
the construction of the xml-literal. When you say that the xml-literal is 
in canonical form, does that mean that the XML/RDF instance in which it 
appears is in canonical form, or that the content of the RDF element with a 
parseType of "Literal" is in exc-c14n form as if it had first been 
selected/excerpted (via XPath) from its surrounding context?

> This behaviour is conformant but not required.

Conformant to what? Some understanding of the canonicalization algorithms 
above, or the RDF specifications?



