docno="lists-046-9288695"
received="Mon Aug 25 06:00:02 2003"
isoreceived="20030825100002"
sent="Mon, 25 Aug 2003 11:59:25 +0200"
isosent="20030825095925"
name="james anderson"
email="james.anderson@setf.de"
subject="xml-exc-c14n [Re: [xml-dev] RelaxNG question"
id="CED51CCE-D6E2-11D7-A07A-000393BB8814@setf.de"
charset="US-ASCII"
inreplyto="Pine.LNX.4.44L0.0308241301150.10280-100000&#64;smtp.datapower.com"
expires="-1"

Cc:w3c-ietf-xmldsig@w3.org
To:xml-dev@lists.xml.org




On Sunday, Aug 24, 2003, at 19:05 Europe/Berlin, Rich Salz wrote:

>> My current favourite example is Exclusive XML Canonicalisation
>> (http://www.w3.org/TR/xml-exc-c14n/).
>>
>> The complexity created by namespace inheritance oozes out of every 
>> paragraph.
>
when one reads passages like the one which defines the terms "apex" and 
"orphan", one may be led to consider whether the apparent complexity is 
inherent in the subject matter.

is there a collection of normative test cases for exclusive 
canonicalization beyond the few examples in the recommendation document?

> Indeed; EXC-C14N is all about handling namespace inheritance,

? is it about handling inheritance or about undoing the effects of 
model transformations which purport to eliminate inheritance.

> and
> what happens when you embed one piece of XML inside another, such as
> carrying a message in SOAP.
>
> I like namespaces.  I really dislike canonicalization; I've done two
> implementations (including a free one in Python that is part of PyXML)
> of both C14N and EXC-C14N, and I try to leave the room if anyone finds
> a bug in the code. :(

? canonicalization is not that hard if one does not have to undo the 
effects of  "flattening" the namespace context.
>
> Folks proposing alternatives to namespaces might find it worthwhile to
> look at the XML C14N spec and figure out how their alternatives can be
> made to meet the same requirements.  (A global index of prefixes is
> pretty easy, of course.)
>

note to the editors:  i am surprised that xmlns="" is not handled 
differently in the apex element. it would be nice to be able to test 
this on normative examples. are there any?

...



