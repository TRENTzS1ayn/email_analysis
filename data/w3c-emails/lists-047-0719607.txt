docno="lists-047-0719607"
received="Thu Aug 16 16:36:49 2001"
isoreceived="20010816203649"
sent="Thu, 16 Aug 2001 13:37:31 -0700"
isosent="20010816203731"
name="pat hayes"
email="phayes@ai.uwf.edu"
subject="Re: layering RDFS in the MT [was: New RDF model theory]"
id="v0421010bb7a1dd10d875@[130.107.66.237]"
charset="us-ascii"
inreplyto="3B7B2D48.323EDA5F&#64;w3.org"
expires="-1"


To: Dan Connolly<connolly@w3.org>
Cc:w3c-rdfcore-wg@w3.org

>pat hayes wrote:
>[...]
> > I will try to get the damn thing completely done, except for the
> > Proofs appendix, by the end of the week, at which point it should be
> > puttable on a website. (Also I could re-do the powerpoint slides to
> > fit this new version if y'all think that would be useful.)
> >
> > Any feedback welcome.
>
>[...]
>
> >                                     Name: RDF_Model_Theory_postF2F.html
>
>| <comment> When considering RDFS  we will require interpretations
>| to have extra structure. </comment>
>
>I'd rather not take that approach. I'd rather that the model
>theory were a model theory for all of RDF, no more, and no less.
>I don't want to give the impression that folks should tinker
>with the core model theory when they introduce new vocabulary.
>
>New vocabularies should just be specified as constraints
>on the core interpretation structure, not changes to it.

Well, OK, but what IS the 'new' vocabulary? RDF and RDFS seem to be 
so entwined together that I think of them as one language. Without 
RDFS, RDF is really *very* simple.

>| in particujlar, the notion of a 'class', so we will need to
>| assume that the universe of
>| interpretations contains classes as elements.
>
>Why? It seems to me that IEXT(rdf:type) completely captures
>the notion of 'class'. Anything we want to say about 'class'
>can be said by way of IEXT(rdf:type), no?
>| 5. A subset IC of IR, containing classes
>
>| 6.  A mapping ICEXT  from IC to  the powerset of (IR union LV) ,
>| ie the set of subsets of elements
>| of IR or  XL.
>
>ICEXT(c) is just the set { x: <x,c> \in IEXT(rdf:type) }, no?
>an IC is (at least) the set { y: exists x where <x,y> \in IEXT(rdf:type)
>}
>right?
>
>yup... you say as much later in the document:
>
>| >> <x,y> is in IEXT(I(rdf:type)) iff x is in ICEXT(y)

Indeed. I thought of this as a semantic constraint on the meaning of 
'type', but you could regard it as defining classes in terms of 
rdf:type, I guess.  This is really only a stylistic difference.  OK, 
give me a couple of days and I'll do a variant that defines ICEXT 
this way.

Pat

---------------------------------------------------------------------
(650)859 6569 w
(650)494 3973 h (until September)
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



