docno="lists-047-1025799"
received="Tue Aug 21 12:00:54 2001"
isoreceived="20010821160054"
sent="Tue, 21 Aug 2001 16:51:06 +0100 (BST)"
isosent="20010821155106"
name="Jan Grant"
email="Jan.Grant@bristol.ac.uk"
subject="Re: F2F action point 2001-08-02#10 and issue                     rdfs-constraining-containers"
id="Pine.GSO.4.31.0108211638420.15130-100000@mail.ilrt.bris.ac.uk"
charset="US-ASCII"
inreplyto="3B827EFD.2AF55CFF&#64;hplb.hpl.hp.com"
expires="-1"

To: Brian McBride<bwm@hplb.hpl.hp.com>
cc: RDFCore Working Group<w3c-rdfcore-wg@w3.org>


Whoops, wrong thing, sorry. I'll try again. (Had a different AP in mind,
or at least one that I recalled differently - namely, to demonstrate how
to do strong typing and subclassing of collections; the conversation
encompassed multiple things at the same time.)



To answer the original AP...


This action point is referring to a workaround for people using
disjunctive range and/or domain.

I've mentioned this before, but here goes for posterity:


I've seen some people say that they were using a disjunctive
range/domain interpretation in their applications.

Opponents of this pointed out that it doesn't give you much (ie, you
can't do any type inference) unless you accept a closed-world notion of
your schema.

The users responded that that's exactly what they _were_ doing, and that
they were prepared to do so because of the wins that it gave them in
their application domain.


Given the same assumptions, there is a construction available that uses
"standard" conjunctive semantics for domain (resp, range).

To say "the domain of foo:bar can be foo:Baz or foo:Shmoo":

<foo:Baz> <rdfs:subClassOf> _:c1 .
<foo:Shmoo> <rdfs:subClassOf> _:c1 .
<foo:bar> <rdfs:domain> _:c1 .

(you can give a URI to _:c1 if it makes you feel better, it's not
vital.)


I've  heard two objections to this:

1. It doesn't let you infer anything. This is the same complaint as was
originally levelled at the disjunctive interpretation, and the response
is the same: "I'm prepared to make some assumptions in this application
domain"*.

2. Some stylistic objections from OO programmers who're unused to
building a class hierarchy from the bottom up. This is a trick that'll
appeal more to mathmos than Java hackers; otherwise it's a non-issue I
think.


Hopefully that completes the requirements of the AP 2001-08-02#10.


jan

* I don't use this; it's a workaround for people who do.

-- 
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
Tel +44(0)117 9287088 Fax +44 (0)117 9287112 RFC822 jan.grant@bris.ac.uk
Usenet: The separation of content AND presentation - simultaneously.



