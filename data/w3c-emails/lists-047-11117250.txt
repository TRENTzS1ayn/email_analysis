docno="lists-047-11117250"
received="Fri Jun 15 15:22:57 2001"
isoreceived="20010615192257"
sent="Fri, 15 Jun 2001 15:22:19 -0400"
isosent="20010615192219"
name="Frank Manola"
email="fmanola@mitre.org"
subject="Re: Draft Partitioning"
id="3B2A606B.8C359724@mitre.org"
charset="us-ascii"
inreplyto="3B2A4078.4DD82150&#64;hplb.hpl.hp.com"
expires="-1"


CC: rdf core<w3c-rdfcore-wg@w3.org>

Brian McBride wrote:
> 
> I took an action to draft a partioning of our problem space.
> 
> RDFCore: A base abstract syntax and a semantics for it.  The abstract syntax
> is equivalent to n-triple (can n-triple be that abstract syntax).  Nothing
> more - does not include type, containers, reification.

Am I correct in thinking this means that the Core includes the content
of the curent P158 to P176 in the formal spec?  Is type then introduced
under vocabularies (as a standard property used to indicate type
information)?

This starts to get into the basis of my comment at the telecon, that we
might want to include some stuff currently in Schema in these
descriptions.  I was specifically thinking of some of the ideas
discussed in Section 2.1, and the core classes described in Section 2.2,
of Schema.  Section 2.1 (correctly) notes the similarity of the RDF
schema type system to that of object-oriented programming languages,
starting off with some built-in types (or classes) like "resource",
"class", "property", and their relationships, and then allowing for
user-defined types/classes.  Those built-in types and their
relationships (I claim) ought to be part of the model (or abstract
syntax) specifications (I don't insist on subclasses or subproperties; 
just the basics).

--Frank


-- 
Frank Manola                   The MITRE Corporation
202 Burlington Road, MS A345   Bedford, MA 01730-1420
mailto:fmanola@mitre.org       voice: 781-271-8147   FAX: 781-271-8752



