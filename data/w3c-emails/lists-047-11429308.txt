docno="lists-047-11429308"
received="Sun Jun 17 04:32:09 2001"
isoreceived="20010617083209"
sent="Sun, 17 Jun 2001 09:30:19 +0100"
isosent="20010617083019"
name="Brian McBride"
email="bwm@hplb.hpl.hp.com"
subject="Re: Draft Partitioning"
id="3B2C6A9B.51E9D947@hplb.hpl.hp.com"
charset="us-ascii"
inreplyto="5.0.2.1.2.20010616213643.033e64b0&#64;joy.songbird.com"
expires="-1"


To: Graham Klyne<Graham.Klyne@Baltimore.com>
CC: rdf core<w3c-rdfcore-wg@w3.org>

Hi Graham,

Graham Klyne wrote:

> That (and other similar things), without asserting the statement whose
> provenance is provided.

Yup.

> But also, it has been suggested (by TimBL and others) that reification can
> be a basis for defining extensions to the basic RDF semantics, such as
> extension to full FOL.

Yes, I've been trying to follow those discussions.  Would you say that
consensus has been reached in that forum?

>  Based on discussions in RDF-logic, I understand
> this can only work if these new extensions have clear syntax extensions
> w.r.t. the RDF core.  Which I think means that reification, if it is to be
> used as a "hook" for such extensions, must itself have a distinguished
> place in the syntax of RDF.

When you say syntax extensions what are we talking about here?  There is an
issue:

  http://www.w3.org/2000/03/rdf-tracking/#rdfms-quoting

which is about an extension to the RDF/XML syntax.  That is not something
that affects the abstract syntax, yes?

Reification can be represented as triples.  If that is all you are adding
then the 'hook' you refer to is mere syntactic sugar.  I don't understand
why syntactic sugar must have a distinguished place.

> Otherwise, I think that any of these "extensions" to RDF must be completely
> different languages that happen to have a passing resemblance with RDF
> (i.e. we cannot be sure that expressions conforming to the core RDF syntax
> still have the same meaning).

That is what I call 'the Janet Argument'.  Actually, I'm quite confident
that, given we do a good job of clarifying RDF 1.0, further work on RDF 2.0
can extend RDF 1.0 is sensible way.

> 
> ...
> 
> All this is predicated on the idea that reification is retained in
> approximately its current form.

There seems to be mixed views on that.  If we move it out of the core
to a vocabulary, essentially we are letting the market decide.  Those
folks who find it useful will use it.  Those who don't will not.  If
it turns out that it is a good mechanism for building FOL expressions,
then it can be used for that.  If, as frankly I think is much more
likely, folks would rather have something akin to S-expressions, e.g.
nested statements, for that purpose, then the RDF 2.0 team won't have
reification getting in the way.

>  It may be that this group decides that a
> different approach is called for (there have been numerous suggestions that
> there are more elegant ways to achieve the same ends).

Quite, but we do have to remember our charter here.  Our job is to 
tidy up rdf 1.0 and prepare the way for rdf 2.0.  We are not doing
rdf 2.0 yet :(  I think both you and I and quite a few others are
kinda keen to get to that.  So lets clean up 1.0 as quickly as 
we can, and then move on.
 
> In any case, I think the RDF core should try to anticipate some ways in
> which richer semantics can be introduced.

We might be really agreeing here, or we might feel very differently.
We are cleaning up the definition of 1.0.  I strongly agree we should
have an eye to the future and how RDF might evolve.  I wouldn't however
want to get bogged down in discussions about FOL and delay getting the
cleaned up rdf 1.0 out.  After all this is one of the reason for
tackling this particular pie in two bites.  Lets get a cleaned up
spec out quickly, then move on to sort out those other issues.

If we keep the core of RDF lean, mean and simple, we create
maximum flexibility for the future.

Brian



