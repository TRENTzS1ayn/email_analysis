docno="lists-047-11605052"
received="Mon Jun 18 09:04:01 2001"
isoreceived="20010618130401"
sent="Mon, 18 Jun 2001 14:02:11 +0100"
isosent="20010618130211"
name="Brian McBride"
email="bwm@hplb.hpl.hp.com"
subject="Re: Draft Partitioning"
id="3B2DFBD3.7E9811EB@hplb.hpl.hp.com"
charset="us-ascii"
inreplyto="3B2A606B.8C359724&#64;mitre.org"
expires="-1"


To:fmanola@mitre.org
CC:w3c-rdfcore-wg@w3.org



Frank Manola wrote:
[...]
> Am I correct in thinking this means that the Core includes the content
> of the curent P158 to P176 in the formal spec?

Yes, I think so.

>  Is type then introduced
> under vocabularies (as a standard property used to indicate type
> information)?

That is what I had in mind.  The current situation where type, and
some vocabularies (reification and containers) are introduced in m&s
before schema defines the typing mechanism seems awkward.  This
paritioning groups the definition of type along with the rest of
schema.
 
> This starts to get into the basis of my comment at the telecon, that we
> might want to include some stuff currently in Schema in these
> descriptions.  I was specifically thinking of some of the ideas
> discussed in Section 2.1, and the core classes described in Section 2.2,
> of Schema.  

Is the motivation for this suggestion to get a better modularization?

> Section 2.1 (correctly) notes the similarity of the RDF
> schema type system to that of object-oriented programming languages,
> starting off with some built-in types (or classes) like "resource",
> "class", "property", and their relationships, and then allowing for
> user-defined types/classes.  Those built-in types and their
> relationships (I claim) ought to be part of the model (or abstract
> syntax) specifications (I don't insist on subclasses or subproperties;
> just the basics).

Are you suggesting that the Abstract Syntax and Semantics [need to be
careful about that acronym] as suggested in the draft partition CANNOT
stand alone without notions of type, Class etc?  

If you are suggesting that the step all the way from ASS as in the 
draft partition proposal to schema is too big and to break that up
into two layers - built in typing and then user defined typing, I
wouldn't disagree with you.

I suggest there is value in identifying a base layer which is
minimal on which everything else could be built.  Right now I don't
expect that MUST include concepts of type, Class etc, but I could
be proved wrong.

Brian



