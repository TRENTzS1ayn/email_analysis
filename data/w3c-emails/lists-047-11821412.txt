docno="lists-047-11821412"
received="Tue Jun 19 09:09:40 2001"
isoreceived="20010619130940"
sent="Tue, 19 Jun 2001 09:04:28 -0400"
isosent="20010619130428"
name="Frank Manola"
email="fmanola@mitre.org"
subject="Re: Draft Partitioning"
id="3B2F4DDC.493C5B68@mitre.org"
charset="us-ascii"
inreplyto="3B2E7647.6DEF9AEB&#64;hplb.hpl.hp.com"
expires="-1"


To: Brian McBride<bwm@hplb.hpl.hp.com>
CC:w3c-rdfcore-wg@w3.org

Brian McBride wrote:
> 
> Frank Manola wrote:
> [...]
> > I agree.  It's just that I think the concepts of type (or Class), and
> > specific classes like Statements, are in the base layer already.
> 
> Does n-triple have a notion of type or class?

[Is there an actual definition of n-triple you can point me to?  If so,
maybe I could be more definitive about these answers;  but maybe not!]

I guess the answer is in two parts.  First, I assume we have to define
"n-triple" itself (that is, the thing that corresponds to a
"statement"), along with its components "resource", "predicate", and so
on.  Aren't those built-in types or classes?  If they are, then it seems
to me we ought to account for those ideas in the base layer (more
clearly than is currently done in the M&S formal model by merely saying
they are "sets").  In other words, I think that the base layer (and the
current formal model) ought to be reasonably closed, without appealing
to other specifications to complete the definition of its basic ideas.

The second part is, aren't we (at least implicitly) assuming that RDF is
used to develop typed data models?  This is certainly true of all the
examples I've seen.  If that is true, then once again it seems to me we
need to say that in the base layer. I imagine we could define the notion
of types in the base layer without necessarily assuming that every
schema language would also define subtypes and inheritance.  We could
also assume there are types in the base layer without necessarily
assuming a schema language that allowed user-defined types (certainly
lots of older programming languages did that).  Mind you, I'm not
necessarily advocating these latter things.  But if we're going to
define a principled set of layers, we ought to be clear about the amount
and types of variability we intend to allow in the upper layers, based
on the lower layers.  If, for example, we assume RDF is essentially a
typed data model, it seems to me that moving basic types to the base
layer has no potential adverse effects, and helps clarify the definition
of the base layer concepts.  (I think that even if someone is thinking
of using RDF in an "untyped" fashion, all that really means is that they
won't be specifying user-defined types;  we would still expect them to
use "resource" and "predicate" wouldn't we?)  

--Frank

-- 
Frank Manola                   The MITRE Corporation
202 Burlington Road, MS A345   Bedford, MA 01730-1420
mailto:fmanola@mitre.org       voice: 781-271-8147   FAX: 781-271-8752



