docno="lists-047-11944852"
received="Wed Jun 20 16:43:24 2001"
isoreceived="20010620204324"
sent="Wed, 20 Jun 2001 15:43:15 -0500"
isosent="20010620204315"
name="pat hayes"
email="phayes@ai.uwf.edu"
subject="Re: (tentative) container model proposal"
id="v0421010ab756b9d44bd4@[205.160.76.183]"
charset="us-ascii"
inreplyto="B74BDA96.DCBE%aswartz&#64;upclink.com"
expires="-1"


To: Aaron Swartz<aswartz@upclink.com>
Cc:w3c-rdfcore-wg@w3.org

Aaron Swartz <aswartz@upclink.com>:
>Dan Brickley <danbri@w3.org> wrote:
>
> > Containers are also, as you point out, syntactically privileged in the RDF
> > syntax specification. But then, so is the rdf:type construct: we can write
> > <wn:Person foaf:name="dan"/> instead of a more verbose piece of XML,
> > because the RDF syntax provides sugar for common idioms. The container
> > machinery in the syntax is in the same category...
>
>I disagree, I do not see them in the same category. The typedNode construct
>is clearly very useful for a number of purposes. It makes things clearer and
>less labor-intensive. Furthermore, there is unlikely to be need for an
>alternate version of "type" so providing one in the spec is a reasonably
>safe bet. Last of all, the typedNode syntax is difficult to confuse with
>other syntaxes, where as the rdf:li construct appears like just another
>propertyElt (in fact, it seems as if Mozilla treats it this way).
>
>My goal is to reduce the complication and number of "exceptions to the
>rules" in the RDF spec. I feel this is important for wide adoption of the
>spec, and best benefits the HTML authors I represent on behalf of the HWG.
>And I do not feel that:
>
><rdf:Seq>
>    <rdf:li>a</rdf:li>
>    <rdf:li>b</rdf:li>
>    <rdf:li>c</rdf:li>
></rdf:Seq>
>
>is simpler or more intuitive than:
>
><rdf:Seq>
>    <rdf:_1>a</rdf:_1>
>    <rdf:_2>b</rdf:_2>
>    <rdf:_3>c</rdf:_3>
></rdf:Seq>

Surely the point is not simplicity or intuitiveness, but saying less. 
The second one specifies the ordering of the elements; the first does 
not. (Goodness knows why anyone would want to not specify the 
ordering of an ordered container, but it is meaningful to do so.)

>Nor do I feel that it is intuitive for:
>
><rdf:Bag>
>    <rdf:li>a</rdf:li>
>    <rdf:li>b</rdf:li>
>    <rdf:li>c</rdf:li>
></rdf:Bag>
>
>to generate:
>
>  _:genid rdf:type rdf:Bag .
>  _:genid rdf:_1 "a" .
>  _:genid rdf:_2 "b" .
>  _:genid rdf:_3 "c" .

As far as that goes, what do rdf:_n's mean when applied to a bag? 
Bags are UNordered, right? So it isnt even meaningful to talk about 
the 2nd item in a bag.

Seems to me that it would be rational to only use rdf:li on bags and 
only use rdf:_n's on seqs, but this may not be an available option at 
this stage.

Pat Hayes

---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



