docno="lists-047-12761709"
received="Mon Jun 25 10:43:39 2001"
isoreceived="20010625144339"
sent="Sat, 23 Jun 2001 23:22:15 -0500"
isosent="20010624042215"
name="pat hayes"
email="phayes@ai.uwf.edu"
subject="Re: Draft Partitioning"
id="v04210113b75b1511e815@[205.160.76.176]"
charset="us-ascii"
inreplyto="3B2FA205.1EDBDA4B&#64;mitre.org"
expires="-1"


To:fmanola@mitre.org
Cc:w3c-rdfcore-wg@w3.org

>Brian McBride wrote:
> >
> > Frank Manola wrote:
> >
> > [...]
> >
> > > [Is there an actual definition of n-triple you can point me to?  If so,
> > > maybe I could be more definitive about these answers;  but maybe not!]
> >
> > There are the original proposal from Dan Connolly and more recently Art's
> > proposed grammar:
> >
> >   http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2001Jun/0285.html
>
>Thanks.
>
> > >
> > > I guess the answer is in two parts.  First, I assume we have to define
> > > "n-triple" itself (that is, the thing that corresponds to a
> > > "statement"), along with its components "resource", "predicate", and so
> > > on.  Aren't those built-in types or classes?
> >
> > No - a triple in n-triple is a character string.  Rather 
>different from m&s.
>
>I agree that the *syntax* is a character string (as defined by the BNF),
>but I don't think that quite captures the *semantics*!  And I thought in
>the base layer we were defining an abstract syntax *and semantics*.

I wonder, could I ask what people in this group mean by 'abstract 
syntax'? In the usage I am familiar with, an abstract syntax is 
essentially an algebraic theory of syntax which does not specify any 
kind of textual or character string rendering, but treats each 
syntactic category as a class of abstract entities formed by 
construction operators. Propositional logic for example might have an 
abstract syntax in which the classes are base propositions, 
conjunctions, disjunctions and negations, all subclasses of 
expressions; and a disjunction (for example) might be constrained to 
have a list or bag of immediate subcomponents which are required to 
be base propositions, conjunctions or negations, and so on. A 
different abstract syntax would define a disjunction to have 
precisely two subcomponents but allow them to be any proposition. 
Clausal syntax would allow disjunctions of base propositions and 
negated base propositions only; and so on. Note that nothing in this 
says whether disjunction is written as 'OR' or 'V' or '+', whether it 
is prefixed, infixed, postfixed or not fixed at all, whether 
disjunctions are enclosed in parentheses, written as XML, etc. ; all 
those would be alternative concrete syntaxes which all correspond to 
the same abstract syntax. (So, BTW, would things like Sowa's 
conceptual graphs; concrete syntax doenst have to be a character 
string.)  The abstract syntax says just enough about the syntax to 
enable one to attach a model-theoretic semantics to it, but no more.

My understanding was that the RDF triples were to be thought of as 
the abstract syntax in roughly this sense, and that the semantics of 
RDF would be something like a simple model theory for this abstract 
syntax. N-triples and the XML lexicalisation would then be two 
different concrete syntaxes corresponding to this abstract syntax. If 
so, I don't quite see what we have to do, since the abstract syntax 
is already well-defined.

If this picture is wrong, please someone put me right as fast as possible!

> >
> > >  In other words, I think that the base layer (and the
> > > current formal model) ought to be reasonably closed, without appealing
> > > to other specifications to complete the definition of its basic ideas.
> >
> > I completely agree with that principle.  I think that we can define
> > n-triple without a notion of type.  You think that's not possible.
> > How about we try, and if I'm wrong, I'll buy you a beer in Sebastapol?
>
>That's fine (right or wrong, I expect to have a few beers in Sebastapol
>and maybe buy a few for other people too)!  I just want to make sure
>(see above) that any "definition" adequately covers the semantics too.
>I'd be interested in seeing what you have in mind;  my ideas about how a
>type system would work aren't all that well worked out anyway.
>(Actually, I can imagine a model-theoretic semantics that uses subsets
>of the domain of discourse rather than actual types, so if that's the
>sort of thing you have in mind that could work for me, depending on some
>of the details about what goes in higher levels).

Hmm. In my world, 'actual types' ARE subsets of the universe of 
discourse, so I wonder what you mean by a type?

Pat

---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



