docno="lists-047-14959392"
received="Fri May 11 13:32:43 2001"
isoreceived="20010511173243"
sent="Fri, 11 May 2001 16:06:38 +0100"
isosent="20010511150638"
name="Graham Klyne"
email="Graham.Klyne@Baltimore.com"
subject="Re: A shot at       http://www.w3.org/2000/03/rdf-tracking/Overview.html#rdfms-resource-sem  antics"
id="5.0.2.1.2.20010511155742.03ed3430@joy.songbird.com"
charset="us-ascii"
inreplyto="3AF7E9D8.B4BDAD19&#64;hplb.hpl.hp.com"
expires="-1"


To: Brian McBride<bwm@hplb.hpl.hp.com>
Cc: Martyn Horner<martyn.horner@profium.com>,w3c-rdfcore-wg@w3.org

I kind of like this general approach, but there's one thing I would pick up 
on at this point...

At 01:43 PM 5/8/01 +0100, Brian McBride wrote:
>What I'm hoping for here is something pretty simple that can serve as a
>foundation on which we can build.
>
>I recently tried to articulate the working model that I use and it came
>out something like this:
>
>   There is a set of resources R.
>
>   Each member of R is identified by a URI by which I mean:
>
>     r1.uri == r2.uri <=> r1 == r2
>
>   i.e. two resources are identical if they have the same URI.
>   two resources with different URI's are different resources.
>
>   There is a set E of entities.  Entities are things like web pages,
>   numbers and trees in the park.
>
>   There is a mapping D : R -> E.  i.e. there is mapping which maps resources
>   to entities.

I would say there is a mapping D : (RxP) -> E,  where "P" is some arbitrary 
set of parameter data.  I think something like this is needed to capture 
the idea that there may be an arbitrary number of entities associated with 
a resource, varying over time, content negotiation, location, identity of 
enquirer, etc., etc.

Then there's the matter of "stateful" resources (or how to model HTTP PUT 
and "out of band" changes).

>   There is a notion of equivalence.
>
>   Two resources r1 and r2 can be mapped by D to the same entity.  In that 
> case
>   we say they are equivalent.
>
>     equiv(r1,r2) <=> D(r1) = D(r2)
>
>   and finally:
>
>     D((p,s,o)) <=> D(p)(D(s),D(o))

I don't follow this last bit.

>I present this, not because I claim it is correct, it doesn't deal with frag
>id's
>for example, but to suggest a language in which we can be clearer about
>what we mean.

Amen!  It would be great if we could define a proper model theory for this 
stuff, because that would damp a lot of the circular discussions that seem 
to be happening.

#g



------------------------------------------------------------
Graham Klyne                    Baltimore Technologies
Strategic Research              Content Security Group
<Graham.Klyne@Baltimore.com>    <http://www.mimesweeper.com>
                                 <http://www.baltimore.com>
------------------------------------------------------------



