docno="lists-047-16496550"
received="Sun May 27 09:04:51 2001"
isoreceived="20010527130451"
sent="Sun, 27 May 2001 15:04:22 +0100"
isosent="20010527140422"
name="jos.deroo.jd@belgium.agfa.com"
email="jos.deroo.jd@belgium.agfa.com"
subject="Re: action item on reification"
id="OFC12CA9D0.5EB8F06C-ON41256A59.0045505D@bayer-ag.com"
charset="us-ascii"
inreplyto="action item on reification"
expires="-1"

To:aswartz@upclink.com
Cc:jos.deroo.jd@belgium.agfa.com,danbri@w3.org,fmanola@mitre.org,w3c-rdfcore-wg@w3.org





aswartz@upclink.com wrote:
>jos.deroo.jd@belgium.agfa.com <jos.deroo.jd@belgium.agfa.com> wrote:
>
>>> "Are members of the class rdf:Statement uniquely picked out by their
>>> predicate/subject/object properties?"
>>
>> [while enjoying holiday/family time]
>> to me this is axiomatic when talking about a function such as
>> statement = triple(s,p,o)
>
>Well if this is true than we're going to need another class to undo this
>effect. The same triple can be asserted by multiple people and often we'll
>want to talk about the stating. Hmm, perhaps:
>
>    [ a :Stating ; rdf:value { :TestCases :utility :high } ]
>
>would work.
>
>(To DaveB, the {} in this example should resolve to a single reified
>triple.)

Well if you write in "an-aaron-uri"
  :TestCases :utility :high. (1)
then you (with "an-aaron-uri" as your representative)
have asserted statement (1).
Also if Dan Connolly writes in "a-danc-uri"
  :TestCases :utility :high.
then he (with "a-danc-uri" as his representative)
is asserting that *same* statement (1).
Now if DanBri writes in "a-danb-uri"
  { :TestCases :utility :high } :targetOf :sw. (2)
he's asserting a statement (2) with statement (1)
as subject (but he's not asserting (1)) and his {} is
acting as a representative for statement (1).
Of course (1) could be generalized to formulae
(having an identity which is strictly their content).

--
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/



