docno="lists-047-2127777"
received="Thu Aug 30 14:19:39 2001"
isoreceived="20010830181939"
sent="Thu, 30 Aug 2001 14:18:33 -0400"
isosent="20010830181833"
name="Frank Manola"
email="fmanola@mitre.org"
subject="Re: ACTION 2001-08-24#9 : issues with containers"
id="3B8E8379.6FF37DA0@mitre.org"
charset="us-ascii"
inreplyto="v04210114b7b334f8a7a9&#64;[130.107.66.237]"
expires="-1"


To: pat hayes<phayes@ai.uwf.edu>
CC:w3c-rdfcore-wg@w3.org

All--

I think I need some clarification on this subject (said need is *not*
due to any lack of clarity in Pat's summary;  these issues have been
fuzzy to me for some time).  Unfortunately, most of the discussion I
remember was couched in terms of the "whether there can be gaps in the
property sequence" issue, and I have trouble translating that decision
into a clear decision on the matter of partial vs. complete
descriptions.  In particular, I need a clearer understanding of what is
meant by saying (or not saying) that a set of container contents is
*all* that is in a container (e.g. "all as far as I'm concerned" vs.
"all anywhere in the Universe").  Here's my "understanding" (to use the
term loosely) of the situation, (mostly) independently of how we label
the container members:

1)  In general, a (perhaps *the*) basic reason we say we can't constrain
the members of containers is that "anyone can say anything about
anything".  That means that if a container is specified in some
collection of RDF, someone somewhere else might assert that there are
additional items in the collection.  Right?

2)  However, in the specific examples used in Sections 3.1 and 3.2, the
containers are all anonymous.  So, e.g., in Figure 4 (p95), the model
that defines the container says that the container has 5 members.  How
can anyone else assert that there are additional members, since the
container is anonymous?  Even if there were a gap in the sequence of
property sequence items, if the container is anonymous, how could you
assume there were any additional members?  

3)  Suppose that the containers are assigned actual URIs, and so even
though I may define a container with 5 members, someone else could
assert the existence of additional members.  I hope, even in that case,
that we're assuming that there is some way to distinguish the members I
asserted from the ones asserted by someone somewhere else (and possibly
also to identify who created the container in the first place)?  That
is, if I assert that I have two children, while it may be possible for
someone else to say that I in fact have one additional child, normally
my assertion would be taken as that of a "closed" (having only the
members I specified) set *as far as I'm concerned*.  Perhaps that
ability to distinguish who said what is all we need;  Frank said the
members are a, b, c;  Joe said the members are x, y, z.  The receiver
gets to decide who the members really are.  

4)  On the other hand, we might want to explicitly say whether, when I
defined the container, I *intended* the container to be "closed" (having
only the members I specified) or "open" (having possibly other
members).  Note that even if my intention was for the container to be
closed, that may not (and it probably won't) prevent others from
asserting additional members (maybe I was wrong);  but it is an
expression of my intent, and would at least indicate (if any more
indication was necessary) that I'm not responsible for those other
members.  

5)  It seems to me that if "anyone can say anything about anything", and
we interpret this to allow anyone to add additional members to
containers I define which I intended to consider "closed", there ought
to also be a way for me to express that "closed" intent;  otherwise,
there's something I can't say about my own container!

--Frank


pat hayes wrote:
> 
> Re: ACTION 2001-08-24#9 Pat: Write up a summary of the issues with containers
> 
snip
> 
> 1. There is no way to say that some set of container contents is
> *all* that is in a container. So it does not follow that all the
> things that are mentioned as being in a container are all the things
> there are in the container. Making that assumption might indeed be a
> Bad Thing as it would be non-monotonic, but allowing an *explicit*
> way of saying that some things are precisely the things in a
> container would make the language much more useful and wouldn't
> create any obvious problems (and is what the XML examples in the M&S
> strongly seem to suggest, BTW.).  One way would be to provide a way
> of saying that a container has a certain number of members, but that
> would require the use of numbers. Or we could introduce a special
> 'last thing in container' thingie so that if
> 
> xxx rdf:_n rdf:lastThing
> 
> then it would follow that
> 
> xxx rdf:_m yyy
> 
> would be false for any m>n.
> 
> It seems to me that in order to be really useful, containers need
> some such device. Without it they are really only orderings.
> 

-- 
Frank Manola                   The MITRE Corporation
202 Burlington Road, MS A345   Bedford, MA 01730-1420
mailto:fmanola@mitre.org       voice: 781-271-8147   FAX: 781-271-8752



