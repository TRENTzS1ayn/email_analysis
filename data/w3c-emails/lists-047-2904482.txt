docno="lists-047-2904482"
received="Thu Dec  6 18:05:27 2001"
isoreceived="20011206230527"
sent="Thu, 06 Dec 2001 17:05:25 -0600"
isosent="20011206230525"
name="Dan Connolly"
email="connolly@w3.org"
subject="Re: how a perl programmer might do datatypes in RDF"
id="3C0FF9B5.2C25E30A@w3.org"
charset="us-ascii"
inreplyto="p05101010b835a2aa067a&#64;[65.212.118.193]"
expires="-1"


To: Pat Hayes<phayes@ai.uwf.edu>
CC:w3c-rdfcore-wg@w3.org

Pat Hayes wrote:
> 
[...]
> >I understand the P/P++ proposal to actually muck
> >with that level of interpretation; they actually
> >allow model-theoretic interpretaions where the objects of
> >       <rdfs:label>10</rdfs:label>
> >and
> >       <ex:shoeSize>10</ex:shoeSize>
> >denote different things.
> >
> >The S/DC/PL proposals don't muck with things at that level.
> 
> I'm not sure to what intuitions you are appealing when you use the
> term 'muck with'.

I'm appealing to all the complications where, in order to
figure out what the 10 in <rdfs:label>10</rdfs:label> denotes,
you might have to get/trust other files, do inference,
etc. to find a range for rdfs:label.

I'm appealing to the fact that simple RDF documents don't
even entail themselves.

> Leaving aside the rhetoric, it is true that the
> P-style proposals allow different occurrences of the same lexical
> literal to denote different values. But isn't that exactly what XML
> datatyping does,

No. XML datatyping has no notion of propositional content,
model theory, entailment, or any of that sort of stuff.

And it certainly doesn't have the requirement that is
so central to RDF: that the meaning of an RDF document,
as a logical formula, is self-evident. To put it
in black-and-white, testable terms: that every
RDF document entails itself.

The XML Schema design accepts all the wishy-washiness where
if you start with document X, depending on
whether you choose to pair it with schema S1 or S2, the ...>10<...
might denote an integer or a string.


> and aren't we under a mandated requirement to
> respect that?

No; we have mandate to make the datatypes in XML Schemas
(date, integer, float, ...) available in the RDF world.

We don't have to mess up RDF's self-evident-ness to do it,
as proposals S/P/DC show.

> More generally, isn't that what ANY datatyping scheme
> does?

No, as perl and BCPL programmers know... and logicians, evidently...

> If all literals were unambiguous then there would be no need to
> even use datatyping schemes. Traditional logical notations for
> example have felt no need for datatyping schemes for exactly this
> reason: they fix the meanings of things like numerals, and use other
> syntactic constructions to denote things like character strings.

Bingo! Then we'll be in good company.

> If a
> literal always denotes the same value, then there really is no
> datatyping in the language at all, seems to me. I'm not averse to
> that idea; it makes for a cleaner model theory , for one thing.

Amen.

>  But
> I would like us to call a spade a spade, and if we decide to go with
> one of the S/DC/PL proposals, to say loud and clear that we have
> simply eliminated data-typing from RDF and do not plan to support XML
> datatypes.

Datatyping was never in RDF, to my mind.
But we certainly plan to support XML datatypes, in the same
way that the logic folks support character strings
built out of integers.

-- 
Dan Connolly, W3C http://www.w3.org/People/Connolly/



