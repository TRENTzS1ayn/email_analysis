docno="lists-047-3899676"
received="Mon Dec 17 04:21:31 2001"
isoreceived="20011217092131"
sent="Mon, 17 Dec 2001 10:20:16 +0100"
isosent="20011217092016"
name="Martyn Horner"
email="martyn.horner@profium.com"
subject="Re: Action 2001-11-16#9 (datatypes)"
id="3C1DB8D0.CF659888@profium.com"
charset="us-ascii"
inreplyto="A03E60B17132A84F9B4BB5EEDE57957B160B3C&#64;trebe006.NOE.Nokia.com"
expires="-1"


To:Patrick.Stickler@nokia.com
CC:w3c-rdfcore-wg@w3.org

Patrick.Stickler@nokia.com wrote:

> A very good point. Obviously, comparison of values is as important as
> validation of values.
> 
> I may be terribly naive and ignorant here, but it seems to me
> that this is really straightforward, taking the PDU view of pairings
> denoting the values. A given application that needs to compare any
> values must know about the data typing schemes being used, map the
> literal/type pairs to internal representations of their values, per
> the system/platform of the application, perform any necessary coercions,
> and make the comparison. The key to this is simply knowing what the
> values are, obviously, and communicating that identity to the
> application. RDF simply provides the pairings (defined via one or more
> idioms) and the application takes it from there.
> 
> Or am I really missing something here? (I don't think I am, though)
> 

Patrick,

I don't think you're missing the point either... but there again,
perhaps I am.

I agree that Frank's summary covers the case. My (our) experience has
been that the separation of the duties of the application from those of
the parser (while clear pilosophically) present problems mainly in
validation and tests for equality. Our solution is to restrict the
equality question pragmatically to the domain of the application (by
using specific handlers for various types). In reality, of course, the
datatyping question comes down to the validation and equality mechanisms
of the platform on which the application runs: you can't afford to care
about what you can't recall - buts that's far too pragmatic!

Validation comes down to a matter of product design. One wants to
diagnose ambiguities and malformations by a consistent mechanism and
present the user with a complete diagnosis. The division of
RDF-syntactic validation from a more (shall we say) tolerant analysis by
the application leads sometimes to potential conflict.

At times, it seems we would want no validation at the RDF level above
the basic well-=formed test and let the application take over all
datatype conversion, mapping and interpretation but that leads
inevitably to non-standard data and the horrible lock-in of data to
application (which we are all trying to fight).

-- 
Martyn Horner <martyn.horner@profium.com>
Profium, Les Espaces de Sophia,
Immeuble Delta, B.P. 037, F-06901 Sophia-Antipolis, France
Tel. +33 (0)4.93.95.31.44 Fax. +33 (0)4.93.95.52.58
Mob. +33 (0)6.21.01.54.56 Internet: http://www.profium.com



