docno="lists-047-7589359"
received="Tue Jul 24 06:26:32 2001"
isoreceived="20010724102632"
sent="Tue, 24 Jul 2001 11:26:31 +0100"
isosent="20010724102631"
name="Dave Beckett"
email="dave.beckett@bristol.ac.uk"
subject="Re: Implementing &quot;aboutEach&quot; (ACTION JUN-01-01-#9)"
id="20049.995970391@tatooine.ilrt.bris.ac.uk"
inreplyto="daml&#64;lassila.org"
expires="-1"

To:w3c-rdfcore-wg@w3.org
CC:daml@lassila.org


>>>Ora Lassila said:
> Here's how Nokia's "Wilbur" RDF Toolkit implements "rdf:aboutEach":

<snip/>

> This still does not take into account situations where the "aboutEach"
> is encountered *before* the corresponding container, in which case we
> still have to keep the temporary node and its triples around until the
> container is parsed. It seems that depending on ordering of the
> "aboutEach" vs. the container, triples resulting from one or the other
> have to kept around for awhile to produce the correct result. We have
> discussed adding a flag to Wilbur which would generate an error if
> "aboutEach" is encountered, making sure you can run the parser in a
> truly stream-based fashion.

This is exactly the case that I wanted to elaborate when I said in
one meeting that aboutEach was difficult to implement.  Take a large
RDF/XML document with many containers - say the dmoz.org data dump -
and put an aboutEach at the start.  Easy, you can expand the
aboutEach as you go.  Now move it to the end.  Difficult, since you
have to store every container node and properties until you reach the
end, then go back and apply the aboutEach.

aboutEach always felt to me like a higher-level construct that didn't
fit easily into RDF.  You show implementation evidence that
implementing it fully is hard.  I think SiRPAC has a big streaming /
not-streaming code switch and pervasive different code paths because
of this.

I would like to throw aboutEach out of RDF however I would like to
know if there are other deployed uses of it (not *potential* uses!)

Dave



