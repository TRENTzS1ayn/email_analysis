docno="lists-047-9248729"
received="Thu Jun  7 18:48:54 2001"
isoreceived="20010607224854"
sent="Thu, 7 Jun 2001 18:48:52 -0400 (EDT)"
isosent="20010607224852"
name="Dan Brickley"
email="danbri@w3.org"
subject="Re: (tentative) container model proposal"
id="Pine.LNX.4.30.0106071835180.29416-100000@tux.w3.org"
charset="US-ASCII"
inreplyto="Pine.GSO.4.31.0106070946110.2880-100000&#64;mail.ilrt.bris.ac.uk"
expires="-1"

To: Jan Grant<Jan.Grant@bristol.ac.uk>
cc: w3c-rdfcore-wg<w3c-rdfcore-wg@w3.org>


On Thu, 7 Jun 2001, Jan Grant wrote:

> On Wed, 6 Jun 2001, Dan Brickley wrote:
>
> > (Tentative) Proposed Simplification
>
> >    The alternative to this reading is to take the paragraph about
> >    sequential numbering to apply to instances of RDF data, not just when
> >    serialised as XML/RDF but also in the context of databases, APIs etc.
> >    To the authors knowledge (@@refs to the contrary welcome), there are
>
> http://ioctl.org/rdf/java/RDF.tar.gz

Thanks! To clarify: if I create a sequence with 10 elements, then remove
say the 7th, does the database do something like renumber the 8th to 7th,
9th to become 8th etc etc., so as to preserve the continuity of numbers?

Does the database reject assertions such as

[c1] -type-> [rdf:Seq]
[c1] -rdf_23-> foo

Is it impossible to use RDF.tar.gz to store 'gappy' descriptions of
containers using the RDF built in container constructs?

> >    no implementations of RDF that take this view, since it makes exchange
> >    of partial information about containers highly problematic.
>
> It's a work-in-progress and the framework for experimental stuff I'm
> interested in (query engines, anonymous resources, etc.)
>
> I've yet to see a real use of the exchange of "partial information about
> containers".

Imagine some useful information represented using containers, where the
numbering has been used to carry meaning (eg. search results). Imagine I
send you some subset of that data serialised as XML/RDF. That's it.
Actually, you might have a chat to Jasper and Nikki (ILRTers) about their
representation of Z39.50 stateful searches in RDF; they may be doing just
this. Z39.50 bibliographic search results can be represented as a
(possible very large) RDF:Seq. Bits of that RDF:Seq get described in
RDF/XML in response to queries by a client application.

It might be helpful to think about this by analogy with schema
language constraints you might learn (eg. using RDFS / DAML+OIL etc) about
other data structures. For example, while a Person might always have two
parents, that constraint doesn't require all representations of that
person to always describe both their parents. Same goes for containers and
the things in them.

Dan

>Which is to say, I'm not knocking the idea; in fact I
> agree in principle - I just haven't seen the summary of "real-world uses
> of RDF features".
>
>
>



