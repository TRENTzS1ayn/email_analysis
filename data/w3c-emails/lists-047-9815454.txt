docno="lists-047-9815454"
received="Tue Jun 12 15:41:54 2001"
isoreceived="20010612194154"
sent="Tue, 12 Jun 2001 14:41:27 -0500"
isosent="20010612194127"
name="Aaron Swartz"
email="aswartz@upclink.com"
subject="Re: (tentative) container model proposal"
id="B74BDA96.DCBE%aswartz@upclink.com"
charset="US-ASCII"
inreplyto="Pine.LNX.4.30.0106121050320.3051-100000&#64;tux.w3.org"
expires="-1"

To: Dan Brickley<danbri@w3.org>
CC: Graham Klyne<Graham.Klyne@baltimore.com>,<w3c-rdfcore-wg@w3.org>


Dan Brickley <danbri@w3.org> wrote:

> Containers are also, as you point out, syntactically privileged in the RDF
> syntax specification. But then, so is the rdf:type construct: we can write
> <wn:Person foaf:name="dan"/> instead of a more verbose piece of XML,
> because the RDF syntax provides sugar for common idioms. The container
> machinery in the syntax is in the same category...

I disagree, I do not see them in the same category. The typedNode construct
is clearly very useful for a number of purposes. It makes things clearer and
less labor-intensive. Furthermore, there is unlikely to be need for an
alternate version of "type" so providing one in the spec is a reasonably
safe bet. Last of all, the typedNode syntax is difficult to confuse with
other syntaxes, where as the rdf:li construct appears like just another
propertyElt (in fact, it seems as if Mozilla treats it this way).

My goal is to reduce the complication and number of "exceptions to the
rules" in the RDF spec. I feel this is important for wide adoption of the
spec, and best benefits the HTML authors I represent on behalf of the HWG.
And I do not feel that:

<rdf:Seq>
    <rdf:li>a</rdf:li>
    <rdf:li>b</rdf:li>
    <rdf:li>c</rdf:li>
</rdf:Seq>

is simpler or more intuitive than:

<rdf:Seq>
    <rdf:_1>a</rdf:_1>
    <rdf:_2>b</rdf:_2>
    <rdf:_3>c</rdf:_3>
</rdf:Seq>

Nor do I feel that it is intuitive for:

<rdf:Bag>
    <rdf:li>a</rdf:li>
    <rdf:li>b</rdf:li>
    <rdf:li>c</rdf:li>
</rdf:Bag>

to generate:

  _:genid rdf:type rdf:Bag .
  _:genid rdf:_1 "a" .
  _:genid rdf:_2 "b" .
  _:genid rdf:_3 "c" .

Now, as a WG bound by backwards compatibility as we are, I don't think
there's much that we can do about this. However, I think that it's important
to make my feelings on this subject clear.

-- 
[ "Aaron Swartz" ; <mailto:me@aaronsw.com> ; <http://www.aaronsw.com> ]



