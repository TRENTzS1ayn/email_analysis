docno="lists-047-9855712"
received="Tue Jun 12 16:01:21 2001"
isoreceived="20010612200121"
sent="Tue, 12 Jun 2001 12:59:42 -0700"
isosent="20010612195942"
name="R.V.Guha"
email="guha@guha.com"
subject="Re: (tentative) container model proposal"
id="3B2674AE.5D128C3B@guha.com"
charset="us-ascii"
inreplyto="Pine.LNX.4.30.0106121548020.20596-100000&#64;tux.w3.org"
expires="-1"


To: Dan Brickley<danbri@w3.org>
CC: Aaron Swartz<aswartz@upclink.com>, Graham Klyne<Graham.Klyne@baltimore.com>,w3c-rdfcore-wg@w3.org

Amen. Stated differently, everything not in the first box
in section 5 of the M&S spec should go away from the spec

guha

Dan Brickley wrote:

> hi Aaron,
>
> On Tue, 12 Jun 2001, Aaron Swartz wrote:
>
> > Dan Brickley <danbri@w3.org> wrote:
> >
> > > Containers are also, as you point out, syntactically privileged in the RDF
> > > syntax specification. But then, so is the rdf:type construct: we can write
> > > <wn:Person foaf:name="dan"/> instead of a more verbose piece of XML,
> > > because the RDF syntax provides sugar for common idioms. The container
> > > machinery in the syntax is in the same category...
> >
> > I disagree, I do not see them in the same category. The typedNode construct
> > is clearly very useful for a number of purposes. It makes things clearer and
> > less labor-intensive. Furthermore, there is unlikely to be need for an
> > alternate version of "type" so providing one in the spec is a reasonably
> > safe bet. Last of all, the typedNode syntax is difficult to confuse with
> > other syntaxes, where as the rdf:li construct appears like just another
> > propertyElt (in fact, it seems as if Mozilla treats it this way).
> >
> > My goal is to reduce the complication and number of "exceptions to the
> > rules" in the RDF spec. I feel this is important for wide adoption of the
> > spec, and best benefits the HTML authors I represent on behalf of the HWG.
> > And I do not feel that:
> >
> > <rdf:Seq>
> >     <rdf:li>a</rdf:li>
> >     <rdf:li>b</rdf:li>
> >     <rdf:li>c</rdf:li>
> > </rdf:Seq>
> >
> > is simpler or more intuitive than:
> >
> > <rdf:Seq>
> >     <rdf:_1>a</rdf:_1>
> >     <rdf:_2>b</rdf:_2>
> >     <rdf:_3>c</rdf:_3>
> > </rdf:Seq>
> >
> > Nor do I feel that it is intuitive for:
> >
> > <rdf:Bag>
> >     <rdf:li>a</rdf:li>
> >     <rdf:li>b</rdf:li>
> >     <rdf:li>c</rdf:li>
> > </rdf:Bag>
> >
> > to generate:
> >
> >   _:genid rdf:type rdf:Bag .
> >   _:genid rdf:_1 "a" .
> >   _:genid rdf:_2 "b" .
> >   _:genid rdf:_3 "c" .
> >
> > Now, as a WG bound by backwards compatibility as we are, I don't think
> > there's much that we can do about this. However, I think that it's important
> > to make my feelings on this subject clear.
>
> your feelings are noted!
>
> I don't really think we disagree much. When you say...
>
> > I disagree, I do not see them in the same category. The typedNode construct
>
> ...I take you as making a claim about the relative merits of the
> special container syntax, auto-numbering mechanism etc. contrasted with
> the (rather handy) rdf:type / typedNode mechanism.
>
> My claim was pretty modest: just that both rdf:type and rdf:_n constructs
> are similarly privileged in RDF's XML syntax, but that neither deserve
> any special architectural privilege w.r.t. the basic formalities of the
> triples model. Whether we feel the one is more/less useful, intuitive etc
> is a separate issue, and one that you're right to postone to future work
> on syntax beautification.
>
> Dan



