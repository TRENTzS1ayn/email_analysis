docno="lists-048-10404277"
received="Wed Oct 24 08:38:09 2001"
isoreceived="20011024123809"
sent="Wed, 24 Oct 2001 08:37:58 -0400"
isosent="20011024123758"
name="Peter F. Patel-Schneider"
email="pfps@research.bell-labs.com"
subject="Re: PRIMER: PrimerReificationSection"
id="20011024083758O.pfps@research.bell-labs.com"
charset="us-ascii"
inreplyto="PRIMER: PrimerReificationSection"
expires="-1"

To:w3c-rdfcore-wg@w3.org


[This note is stated in rather blunt language.  I am doing this on purpose,
as I feel that it may be the only way for the RDF Core WG to see what is
going wrong here.]


I have a whole ton of comments on the reification section, but first I'll
get straight to the point:

    It's terrible.

Why?  Because it contains many of the same old fallacies about RDF
reification that have been spouted ever since RDF came into being.


Let's consider some of the fallacies in the section:

- In (p2) the section states that reification lets us ``make a statement
  the subject of another statement''.  It does no such thing.  At best, it
  lets us make a resource that has some relationship to a statment the
  subject of another statement.  This fallacy is repeated in (p22).

- In (p7) the section indicates that the reification of a statement is
  supposed to denote a statement.  However, there is no denotation
  relationship between the reification of a statement and the statement
  itself.  (Further, denotation is a formal relationship between a piece of
  syntax and a semantic entity.  The reification of a statement is not a
  piece of syntax, so it doesn't denote anything.)

- The subject, predicate, and object properties of a resource are just
  properties.  They don't have any connection to any (pre-existing)
  statement (p8).

- The section talks about THE reification of a statement (p10), but there
  is no restriction that I can see that requires that there be only one
  reification of a statment.

- Statement reification does not help RDF to be self-describing (p14).

- There is no distinction between having "eric" as the object of 
<rdfprimer> <editor> "eric".
  and as the object of
_:stmt <object> "eric".
  Both use "eric" in exactly the same way.  Thus the distinction between
  ``use'' and ``mention'' in (p16-22) is just not present in RDF
  reification.  (I've used "eric" above instead of <rdfprimer> to make the
  point clearer.)

- It is not illegal in predicate logic to have effective(editor,eric)
  (p24), just illegal in some predicate logics (such as the first-order
  predicate calculus).

- There is no way that RDF quantifies anything, so saying that ``RDF
  reification allows one to quantify over expressions (statments) and stay
  inside RDF'' is just plain wrong (p26).


The section also has other severe problems:

- The section mixes formal notions and intuitive notions to the detriment
  of both.  For example, in (p7) it talks about denotation (a formal
  notion) and association (an informal notion).   A formalist (like myself)
  cringes when association is used to ``define'' denotation.  A
  non-formalist reader would probably not understand what denote means and
  become confused as to what the association is supposed to be doing.

- How can there be a ``new resource'' (p8)?  When does this new resource
  ``come into existence''?


Perhaps one way to see what RDF reification is not is to take an RDF
document that uses reification (and doesn't use ID for resources or bagID)
and change Statement to STATEMENT in the document.   Has anything about the
document really changed?  If you think that something important has
changed, what is it?  If you think that nothing has really changed, then
what role was reification playing in the document?


Peter F. Patel-Schneider
Bell Labs Research
Lucent Technologies



