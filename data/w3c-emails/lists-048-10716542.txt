docno="lists-048-10716542"
received="Wed Oct 24 18:55:05 2001"
isoreceived="20011024225505"
sent="Wed, 24 Oct 2001 23:46:37 +0100"
isosent="20011024224637"
name="Graham Klyne"
email="Graham.Klyne@MIMEsweeper.com"
subject="Musing about &quot;reification&quot;"
id="5.1.0.14.2.20011024233333.04c10e50@joy.songbird.com"
charset="us-ascii"
inreplyto="p05101070b7fce82504e0&#64;[205.160.76.193]"
expires="-1"


To: Pat Hayes<phayes@ai.uwf.edu>
Cc:w3c-rdfcore-wg@w3.org

At 04:56 PM 10/24/01 -0500, Pat Hayes wrote:
>This all works fine until we get to reification, at which point it all 
>goes horribly wrong, because the only useful sense of reification would be 
>about tokens (triples) , but the only one we have actually got is about 
>statements.

Since reification is creeping out of the closet again, some musings...

The structure of triples we call reification, as it stands, has no special 
interpretation -- it's just more RDF statements.  Right?

But suppose we also had another feature, let's call it reif:Truth, such 
that we can say:

     reif:Truth rdf:type rdfs:Class .
     _:stmt rdf:type rdf:Statement .
     _:stmt rdf:subject ex:subj .
     _:stmt rdf:property ex:prop .
     _:stmt rdf:object ex:obj .
and
     _:stmt rdf:type reif:Truth .

Still, there's nothing special about this, just regular RDF statements.

Now suppose we introduce some new semantics, along the same lines that you 
used for RDF schema, in the form of closure rules:

   { _:stmt rdf:type rdf:Statement .
     _:stmt rdf:subject _:s .
     _:stmt rdf:property _:p .
     _:stmt rdf:object _:p .
     _:stmt rdf:type reif:Truth . }

|-
     _:s _:p _:o .

(hoping you'll follow my mixed notations).  Does this provide us with a 
basis for making sense of reification?

#g


------------------------------------------------------------
Graham Klyne                    MIMEsweeper Group
Strategic Research              <http://www.mimesweeper.com>
<Graham.Klyne@MIMEsweeper.com>
------------------------------------------------------------



