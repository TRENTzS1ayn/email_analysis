docno="lists-048-11471023"
received="Mon Oct 29 12:42:09 2001"
isoreceived="20011029174209"
sent="Mon, 29 Oct 2001 10:08:40 -0800"
isosent="20011029180840"
name="Sergey Melnik"
email="melnik@db.stanford.edu"
subject="Re: suggestions for datatyping (long)"
id="3BDD9B28.9AE669AA@db.stanford.edu"
charset="us-ascii"
inreplyto="OFF86F3977.D06F3B9D-ON41256AF2.00410474&#64;bayer-ag.com"
expires="-1"


To:jos.deroo.jd@belgium.agfa.com
CC:phayes@ai.uwf.edu,w3c-rdfcore-wg@w3.org

jos.deroo.jd@belgium.agfa.com wrote:
> [...]
> let's take another testcase
> ####
>     :Animal a rdfs:Class;
>          <http://www.daml.org/2000/12/daml+oil#restrictedBy>  [
>              a <http://www.daml.org/2000/12/daml+oil#Restriction>;
>              <http://www.daml.org/2000/12/daml+oil#onProperty> :parent;
>              <http://www.daml.org/2000/12/daml+oil#cardinality> "2" ];
>          rdfs:label "Animal" .
> ####
> what is that "2" denoting? the number 2, isn't it?
> I can't imagine that the range of
>   <http://www.daml.org/2000/12/daml+oil#cardinality>
> is a subclass of rdfs:Literal

You are right, according to the DAML/OIL schema, "2" is supposed to be a
nonNegativeInteger. Following Pat's proposal, "2" could denote many
different things like numbers, shoe sizes and weights in pounds
depending on the context. In my opinion, this ambiguity is
counterproductive and is a heavy burden for interoperability.

If literals may denote everything you like (and many things at once), I
don't see why we need resources/URIs any more. We could do just fine
with literals. For example, literal "Peter" could denote a person,
sometimes Peter Pan, another time Peter The Great (even in the same
graph!). Literal "2" in the above example could well denote Peter The
Great, too.

I strongly believe that each symbol (node in a graph, Ntriple token,
literal string) must map to exactly one thing in the domain of
discourse. Otherwise RDF does not give us any advantages over XML at
all, since practically everything we write may be given some contrived
meaning.

For your example above I'd rather suggest

     :Animal a rdfs:Class;
          <http://www.daml.org/2000/12/daml+oil#restrictedBy>  [
              a <http://www.daml.org/2000/12/daml+oil#Restriction>;
              <http://www.daml.org/2000/12/daml+oil#onProperty> :parent;
              <http://www.daml.org/2000/12/daml+oil#cardinality> [
xsd:int "2" ];
          ];
         rdfs:label "Animal" .

if xsd:int is a relationship that maps the lexical space of integers to
the value space of integers, or

     :Animal a rdfs:Class;
          <http://www.daml.org/2000/12/daml+oil#restrictedBy>  [
              a <http://www.daml.org/2000/12/daml+oil#Restriction>;
              <http://www.daml.org/2000/12/daml+oil#onProperty> :parent;
              <http://www.daml.org/2000/12/daml+oil#cardinality> [
                 a xsd:int;
                 rdf:value "2" ];
          ];
         rdfs:label "Animal" .

if xsd:int is a class (rdf:value could denote a "default" relationships
between integers and literals).

Sergey



