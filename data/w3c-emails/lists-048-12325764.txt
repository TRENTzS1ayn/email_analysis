docno="lists-048-12325764"
received="Tue Sep  4 16:12:39 2001"
isoreceived="20010904201239"
sent="Tue, 04 Sep 2001 16:12:02 -0400"
isosent="20010904201202"
name="Frank Manola"
email="fmanola@mitre.org"
subject="Re: Need a decision (was: Re: namedNode? in predicate position?)"
id="3B953592.62F82F3@mitre.org"
charset="us-ascii"
inreplyto="v04210104b7bad8d1f211&#64;[130.107.66.237]"
expires="-1"


To: pat hayes<phayes@ai.uwf.edu>
CC:w3c-rdfcore-wg@w3.org

I'd like to second Pat's motion(s).  I'd also like to see some further
discussion on use cases in which people want to use this.  For instance,
Dan Brickley cited an example:

> Representing partial knowledge: for example, one might know that persons A
> and B were related biologically, without knowing whether that was
> brother/sister/father etc. Being able to represent claims about a
> relationship that holds between A and B (without URI-naming that relation)
> could be useful. You could say, for example, that there is a relationship
> that holds between A and B, and that the relationship was of rdf:type
> misc:BiologicalRelativeRelation. Where misc:brother, misc:sister etc were
> members of that class.

What is the signficance of the use of an anonymous name, but an explicit
rdf:type (misc:BiologicalRelativeRelation), for the predicate (rather,
e.g., than having an explicit predicate "BiologicalRelativeRelation"
that you use if that's all you know about the relationship, and of which
other predicates like "brother" are subclasses)?  

Mind you, I can see how we can have, in a straightforward fashion,
existentially quantified variables for predicates, just as we have for
subjects, but we haven't had a whole lot of discussion about usage (as
we did for subjects).  I assume we're going to have princeNodes as
objects too, right?

--Frank 

pat hayes wrote:
> 
> Dave Beckett <dave.beckett@bristol.ac.uk>
> > >>>Art Barstow said:
> >
> ><snip/>
> >
> > > I like the idea of allowing predicates to be princeNodes
> > > because it would eliminate special casing predicates (and simplify
> > > N-Triples a little).  However, I agree with Dave's position (although
> > > M&S is not explicit on this) and thus have written some apps that
> > > assume predicates will be URI-refs and not princeNodes.
> >
> >I don't have any problem with the change - just to note it *is* a
> >change and we should take care that if we do this, we have good
> >reasons and consider what the change causes deployed applications.
> >
> >The current RDF/XML syntax cannot generate any model with non-URI-ref
> >predicates (unless you reify) thus that means some models can be
> >created that can not be transfered in the standard RDF/XML syntax
> >(although this is true for other models too).
> >
> >For evidence on implementation: my Redland system has no problem
> >handling princeNode predicates.
> 
> Please let us get this decided as quickly as possible, as if we allow
> anonymous properties then I should change the MT back to apply
> directly to N-triples rather than to RDF graphs, since not all
> N-triples documents will be graphs, and in any case (as outlined in
> my reply to Aaron), the advantages of the graph syntax would be lost
> if we make this change, so it would be better to return to a more
> conventional notion of syntax.
> 
> In fact if we do make this change, I would urge that we decide that
> some kind of N-triplish syntax be adopted as the primary RDF syntax
> (though preferably with an explicit notion of syntactic scope), and
> abandon the 'RDF graph' idea as simply misleading, largely for the
> reasons Aaron suggests.
> 
> I will put off further work on the MT document until this issue is decided.
> 
> Pat Hayes
> 

-- 
Frank Manola                   The MITRE Corporation
202 Burlington Road, MS A345   Bedford, MA 01730-1420
mailto:fmanola@mitre.org       voice: 781-271-8147   FAX: 781-271-8752



