docno="lists-048-13018317"
received="Fri Sep  7 12:57:13 2001"
isoreceived="20010907165713"
sent="Fri, 07 Sep 2001 13:05:11 +0100"
isosent="20010907120511"
name="Graham Klyne"
email="Graham.Klyne@Baltimore.com"
subject="RDF and applications (was: About Refactoring RDF/XML Syntax   Rivision 1.43)"
id="5.1.0.14.2.20010907123240.036404f0@joy.songbird.com"
charset="us-ascii"
inreplyto="JAEBJCLMIFLKLOJGMELDKEBNCCAA.jjc&#64;hplb.hpl.hp.com"
expires="-1"


To:"Jeremy Carroll"<jjc@hplb.hpl.hp.com>
Cc:<w3c-rdfcore-wg@w3.org>

At 10:56 AM 9/7/01 +0100, Jeremy Carroll wrote:
>Para 54 that you reference commits us to RDF infrastructure that is not
>general purpose but each application having its own version of RDF
>processing. Not a good idea in my view.

 From a purely technical standpoint, I'd be inclined to agree that a single 
form is best.

But it seems that anything that makes RDF easier to deploy has to be of 
considerable value.

And I think a big part of the value of RDF is (will be) that it allows the 
information from a range of existing and emerging applications to be 
combined -- sort of doing for information and data what the Internet did 
for computing and communication.  (Think of a variant of Metcalfe's 
law:  the value of RDF will be exponentially proportional to the number of 
applications that use it.)  I think it is inevitable that there will be 
many special purpose applications on the Internet that deal only with a 
specific data format.  But if it's cheap to design these specific data 
formats to be also accessible to general purpose RDF applications, I think 
that's a big win.

If all application designers are prepared to commit to using RDF, then this 
debate is moot.  But I think there are many (and some of the W3C advisory 
committee debates about the Semantic Web activity illustrate this) who are 
still digesting and stabilizing application designs based on XML.  My goal 
is to make it as easy as possible for these folks to adopt XML formats that 
are also RDF compliant.  (I regard this as an area where the original RDF 
M&S actually did a pretty good job, even if it wasn't communicated very 
effectively.)

Thus, my position is trying to make it easy for application designers to 
take baby steps on the way to using RDF without having to chew the whole 
elephant at once.

And finally, I have an implemented code example:  last year, we were 
implementing a mail message archive product, and I persuaded the developers 
to adapt their web-accessible XML message-metadata format to be RDF 
compliant, so that we would be able to suck it in to a generic RDF 
processing engine.  Because this could be presented simply as a small 
change to the XML structure, it was not hard to persuade them to do this 
(i.e. it was cheap to do, and did not involve any further commitment to RDF 
at that time).  (BTW, the general idea can be seen in 
<http://public.research.mimesweeper.com/IETF/Messaging/draft-klyne-message-rfc822-xml-01c.txt> 
-- this was issued as an Internet draft but has expired.  I do plan to 
re-issue it.)

#g


------------------------------------------------------------
Graham Klyne                    Baltimore Technologies
Strategic Research              Content Security Group
<Graham.Klyne@Baltimore.com>    <http://www.mimesweeper.com>
                                 <http://www.baltimore.com>
------------------------------------------------------------



