docno="lists-048-14879363"
received="Thu Sep 20 17:07:16 2001"
isoreceived="20010920210716"
sent="Thu, 20 Sep 2001 16:07:12 -0500"
isosent="20010920210712"
name="Dan Connolly"
email="connolly@w3.org"
subject="Re: model theory publication draft"
id="3BAA5A80.EFE0AC08@w3.org"
charset="us-ascii"
inreplyto="OF3719C999.9229B165-ON41256ACD.00770837&#64;bayer-ag.com"
expires="-1"


To:jos.deroo.jd@belgium.agfa.com
CC:phayes@ai.uwf.edu,w3c-rdfcore-wg@w3.org

jos.deroo.jd@belgium.agfa.com wrote:
> 
> Pat,
> 
> I've been testing the 12 rules in
> http://www.coginst.uwf.edu/~phayes/RDF%20MT-currentdraft.html#rdfsentail
> (we actually have 14 rules because of the 2 rules with 2 statements in
> their conclusions) and I think it all goes very well except for rule 1.
> I currently don't see how to implement that with a back-chaining reasoner.
> Any hint?

Hmm... I don't see why that one is any more difficult than the
others. If I were going to use pre-existing inference
mechanisms with RDF, I'd use something like
the (holds ...) thingy in section "2.1. Comparison with formal logic".

In prolog:

holds(rdf_type, A, rdf_Property) :- holds(A, X, Y).

Of course, transliteration of these rules into prolog will
probably be mostly useless because of infinite loops...
but that's where your Euler magic comes in, yes? (I still
hope to understand how that Euler path stuff works some day...)


-- 
Dan Connolly, W3C http://www.w3.org/People/Connolly/



