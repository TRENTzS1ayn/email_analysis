docno="lists-048-14962185"
received="Thu Sep 20 19:23:46 2001"
isoreceived="20010920232346"
sent="Fri, 21 Sep 2001 01:23:19 +0100"
isosent="20010921002319"
name="jos.deroo.jd@belgium.agfa.com"
email="jos.deroo.jd@belgium.agfa.com"
subject="Re: model theory publication draft"
id="OF1150424E.5D0AC747-ON41256ACE.0000601F@bayer-ag.com"
charset="us-ascii"
inreplyto="model theory publication draft"
expires="-1"

To:connolly@w3.org
Cc:phayes@ai.uwf.edu,w3c-rdfcore-wg@w3.org



connolly@w3.org wrote:
>jos.deroo.jd@belgium.agfa.com wrote:
>>
>> Pat,
>>
>> I've been testing the 12 rules in
>> http://www.coginst.uwf.edu/~phayes/RDF%20MT-currentdraft.html#rdfsentail
>> (we actually have 14 rules because of the 2 rules with 2 statements in
>> their conclusions) and I think it all goes very well except for rule 1.
>> I currently don't see how to implement that with a back-chaining reasoner.
>> Any hint?
>
> Hmm... I don't see why that one is any more difficult than the
> others. If I were going to use pre-existing inference
> mechanisms with RDF, I'd use something like
> the (holds ...) thingy in section "2.1. Comparison with formal logic".
>
> In prolog:
>
> holds(rdf_type, A, rdf_Property) :- holds(A, X, Y).

True, but I'm afraid that holds is in a way just
shifting the problem...
at least that's my experience so far with it
and I believe there must be other possibilities...

> Of course, transliteration of these rules into prolog will
> probably be mostly useless because of infinite loops...
> but that's where your Euler magic comes in, yes? (I still
> hope to understand how that Euler path stuff works some day...)

MT + test cases backed-up with running code :-)
Thanks!

Jos



