docno="lists-048-15276319"
received="Mon Sep 24 11:30:52 2001"
isoreceived="20010924153052"
sent="Mon, 24 Sep 2001 16:30:42 +0100"
isosent="20010924153042"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="Re: A proposal for entailment tests"
id="JAEBJCLMIFLKLOJGMELDEEDCCCAA.jjc@hplb.hpl.hp.com"
charset="iso-8859-1"
inreplyto="A proposal for entailment tests"
expires="-1"

To:<w3c-rdfcore-wg@w3.org>



I like the outline of Jos's proposal very much.

[I am neutral about Aaron's suggested modification.]

As I see it, this allows a test application to:

  read one or more manifest files that describe

  + tests using rdf-entailment or rdfs-entailment

It can then scan through these looking for tests that are relevant to the
sort of application it tries to be.

The manifest file makes no assumptions as to the implementation of the
application (other than it is able to read rdf/xml files!).

As an example, I understand Jos's implementation uses a reasoner of some
sort, so that his test suite might check the rdfs-entailment by checking
that each statement in the rhs does follow from the lhs.
A different implementation of rdfs might be a Jena inferencing model, which
is automatically closed using Pat's model theory (call for
implementations!). Such an implementation would read the LHS files and check
that the RHS files were sub-graphs.

Also Jos's proposal includes the current tests, despite somewhat hiding
their intent. It also encompasses my proposal to have tests where two RDF
files with the same graph are given.


One note: the current "equality" tests are computational less expensive than
an rdf entailment test. Technically it is the difference between Graph
Isomorphism and SubGraph Isomorphism. GI is thought to be strictly between P
and NP where SubGraph Iso is known to be NP. For these reason it may be
desirable to either:
+ add rdfEquivalent and rdfsEqualivalent predicates
or make sure we use cycles, and suggest that users of the test cases should
search for such cycles if they have a GI algorithm available.

Another advantage of Jos's propsoal is that it is extensible. If we come up
with new tests that don't fit the framework we can extend the framework.

+1

Jeremy



