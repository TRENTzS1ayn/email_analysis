docno="lists-048-15728716"
received="Wed Sep 26 15:39:00 2001"
isoreceived="20010926193900"
sent="Wed, 26 Sep 2001 14:38:55 -0500"
isosent="20010926193855"
name="Aaron Swartz"
email="aswartz@upclink.com"
subject="PRIMER: regrets, comments on draft"
id="200109261942.f8QJgmv03090@theinfo.org"
charset="us-ascii"
expires="-1"


Cc: Eric Miller<em@w3.org>
To: RDF Core<w3c-rdfcore-wg@w3.org>

My regrets for the upcoming telecon. I just realized that 
tomorrow is Yom Kippur and I won't be able to attend. :-( I'm 
quite disappointed. Please take good notes, and I hope that this 
message will represent my position to everyone.

Also, someone will need to remember to dial SeanPalmer into the telecon:
   http://www.w3.org/1998/12/bridge/dialout.php3

Thanks.

 > http://www.w3.org/2001/09/rdfprimer/

> RDF Primer is a non-normative document intended to provide an 
> easily readable description of the facilities defined by the 
> RDF Specifications...

Blah, blah, blah. Not a good start. Key things to keep in mind: 
keep the tone upbeat and friendly, while not being misleading.

> Scope and Goals
>
> *To explain RDF to the end user in such a way they in turn 
> can explain it to others

Who's the end-user? Perhaps some of this document should explain 
the RDF/Semantic Web concepts to general people (like how folks 
run a web browser, but don't need to know the details of 
HTTP/HTML), but I was thinking that it'd generally be aimed at 
folks who are doing real work with RDF: building schemas, tools, 
documentation on RDF.

> *To explain the benifits of a common model

Yep, we want to make it clear thru this how the unifying model 
of RDF does more than just plain old XML. But perhaps this 
should go at the end...

> *To provide clear guidence to an end user how to use a 
> vocabulary in RDF
> *To provide clear guidence to an end user how to create to 
> create instance data based on supporting vocabularies

Yep, yep.

> *To clearly demonstrate to the end user the benifits of this approach

Again, who's the end user?

> *To highlight example applications that benifit from these 
> methodologies... we're asking people to do extra work, we need 
> to give clear indications of what the benifits of this extra 
> work provides.

Yep.

> *To provide a general definitions of terms and shared 
> semantics that are common across RDF Core specifications

Always good.

> 1) Introduction
>
>   - Overview of SW (the what, why) / Overview of RDF (the how)
>   - Self Describing Web
>   - Web of Trust

Sounds good to me. I'd expect this section to be separable and 
easy to give to _real_ end users. Like folks who want a basic 
look inside the magic that powers these RDF tools, and the 
long-term goals of the Semantic Web Activity.

> 2) Basic Concepts: @@ e.g. The Card Catalog @@
>
>  2.1) The @@ e.g. Card Catalog @@ Schema
>
> Note: Note sure of the specific example, but I find it nice to start
> out with examples to grab the attention of the reader (the who)

Your librarianship is showing. ;-) I'm not sure exactly how this 
fits in here... But I think it'd definitely be good to tell a 
simple story to illustrate the above points, something similar 
to the Scientific American article. Perhaps show how the 
Semantic Web can take a regular piece of software and make it 
more powerful. We're still not getting in too deep.

> 3) Identification: Uniform Resource Identifiers (URI)

Here's where it gets started. Let's build the foundations of the 
layer cake, using things the reader is already familiar with 
("Oh, I know these, they're just Web addresses"), but providing 
details that most people probably aren't aware of. ("You mean I 
can do more with URIs than type them into my browser?")

Also explain about good practices for identification on the 
Semantic Web (are there any?).

The whole way thru, let's tell our story. We can use the simple 
story from section 2, and expand on it, filling it in with the 
nitty-gritty details about all this magic actually gets done. We 
need a character -- a hero -- that the reader can identify 
with -- someone trying to get their job done but looking for 
assistance from the tools we're building -- and follow him/her 
thru the whole process. But let's not make him a boring office 
worker, please? Give him something exciting to do.

First our hero things that URIs are the answer, and so he fixes 
his system to be built around them.

> 4) Extensible Markup Language (XML)

Yep, but be clear to show how XML is designed for creating 
"documents", like web pages or images (SVG).

Now our hero understands that he needs to ditch his proprietary 
data formats and go with XML, with its benefits for 
self-describing documents, etc.

> 5) Resource Description Framework (RDF)

And the real juicy bit.

Our hero realizes find out about this new RDF thing and decides 
to investigate.

> 5.1) Goals
>
> - Self Describing Web
> - Data Aggregation
> - etc.

He's now convinced that his data needs the equivalent of XML for 
data, and that is RDF. He dives right in.

> 5.2)
>
> Note: The thought here is to partition up RDF in terms of managable
> modules the reader would be able to understand and describe each
> modules, their capabilities, and examples.  @@ show how they can be
> mixed and matched (e.g. lego's @@)

Yep, the partitioning is very good, especially showing how you 
the W3C doesn't standardize all RDF vocabs.

>     - Basic Data Model

Our hero discovers the genericity of the RDF data model, and how 
it can unite all the disparate systems he uses into one 
universal format. He discovers mappings from the relational data 
model, etc.

Probably about here we should sneak in a note about some basic 
syntax that we'll be using for the examples (I suggest an 
N3-subset). Provide connections to N-Triples, and an 
easily-skippable section on RDF/XML. (emphasis on the 
skippable ;))

>     - Typing System

OK, pretty basic. Throughout the following sections, our hero 
works on his RDF data, adding the new things he's learned into 
his file.

>     - Collections

Now we've got a problem here... what kind of collections do we 
explain? There are many known problems with RDF 1.0 collections, 
but DAML collections aren't exactly official. Then there are 
also TimBL's format for collections...

>     - Reification

I pity whoever gets this section.

>     - Light Weight Ontology Support

Yep, now that he's created a bunch of instance data, he needs to 
learn how to create a schema for it all. Be sure to insert tips 
on RDF conventions for schemas.

>     - @@ Ontology Language (Web Ont?) @@

This should be an extention of the previous section

>     - @@ Roll your own (DAML?) @@

I don't follow.

> 6) Examples
>
> Note: Goal here is to step to 2 differnet individuals through the
> creation of schema and instance data. And then in example 3, show how
> these can be combined/aggregated to provide something that is much
> than the sum of the parts.

Oh? You don't want to bring the examples in to the end? I don't 
think that's a very good idea since it'll make the story harder 
to follow because it won't have consistent examples. Plus, a 
good story (if we follow thru) will be much more fun to read.

I definitely agree we need an ending where our hero's schema 
meets up with another person who implemented the same thing, but 
differently, as well as someone else whose work provides a 
complimentary extension to our hero's schema. (Even better if 
these other two are real-life examples of RDF applications.)

> 7) Conclusion
>
> Note: future of the web, how RDF provides the basis for this, etc. etc.

This section should go back to the high-level language of the 
introduction, explaining the next big steps in RDF: Web of 
Trust, Proof, Rules, Query, etc. and invite the reader to join 
up with all of us to help create what's necessary to realize 
these dreams. While the vision is laid out (somewhat), we still 
need all the help we can get for the next stages. End on a happy 
note: There's a ton of possibilities out there -- help us make 
them reality.

(-: ** Warm and Fuzzy Feeling Break ** :-)

> Open Issues
> *Take on the explanation/relationship between RDF and XML

That can be covered in the section on XML.

> *NTriples representation... this could help/hurt either way

Oh, it won't hurt at all, I would think. Certainly no where near 
as the pain RDF/XML will inflict! Let's start out by explaining 
the model via N-Triples, and then introduce the basic N3 
abbreviations for the rest of the document.

> *Model Theory explanation e.g. 
> http://lists.w3.org/Archives/Public/w3c-rdfcore-
> wg/2001Sep/0337.html

Yep, I don't know exactly where this would fit, but make it 
optional since the model theory probably doesn't apply to too 
many developers.

> In addition to the sections just described, the primer contains 
> a number of appendices that provide detailed reference 
> information on simple types and a regular expression language.

Huh? Regular expression language? Where'd that come from? Oh, 
you've been copying from the XML Schema Primer, haven't you? 
Baaad example. Don't go there, guy.

Some suggested appendices:
  Appendix A. Other Resources
    - Links to other useful documents
    - Pointer to the RDF Interest Group fora, etc.
  Appendix B. Glossary of Semantic Web Terminology
  Appendix C. Quick Reference Guide for URIs defined in the RDF 
specifications
    - Stuff like rdfs:Resource, rdf:value with clear descriptions 
and links to definitions

As for what I'd like to do:
  - be the editor
    * take everyone's submissions and fuse them together into a 
cohesive whole
    * nitpicking along the way ;)

  - write (some of) the blue-sky stuff:
    * the introduction
    * the conclusion
    * possibly the section 2 example
    * section 5.1 goals

Whooo! Let's have fun,

--
[ "Aaron Swartz" ; <mailto:me@aaronsw.com> ; <http://www.aaronsw.com/> ]



