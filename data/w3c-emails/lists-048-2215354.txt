docno="lists-048-2215354"
received="Fri Nov  9 16:19:37 2001"
isoreceived="20011109211937"
sent="Fri, 9 Nov 2001 22:19:22 +0100"
isosent="20011109211922"
name="jos.deroo.jd@belgium.agfa.com"
email="jos.deroo.jd@belgium.agfa.com"
subject="Re: datatypes and MT"
id="OFB6A5978C.A0657AE3-ONC1256AFF.00749C0E@bayer-ag.com"
charset="us-ascii"
inreplyto="datatypes and MT"
expires="-1"

To:phayes@ai.uwf.edu
Cc:w3c-rdfcore-wg@w3.org



>>The main point is that the object in
>>   :s eg:shoeSize "10".
>>is *not* a string object but some-thing that
>>can be further characterized....
>
>I entirely agree, that is exactly what the MT extension says.  What a
>literal denotes is not the string itself (unless its a strong
>literal, of course), but something in the semantic domain.
>
>>... as having a
>>rdfs:str property with string value "10"
>
>Ah, but that seems to me to be both unnecessary and pernicious.

this is the first time I see the word pernicious and I really
will do my best to do better...

>Unnecessary since there is no need to say explicitly that the thing
>denoted by a name is denoted by the name; you know that because you
>used the name to denote it, whether the name is literal or not.  This
>is like insisting that instead of saying 'Joe' I have to say 'a
>person whose name is "Joe" ' all the time.  Pernicious, because *any*
>kind of 'uniform' mapping from things to the strings that denote them
>cannot be sustained, because naming is intrinsically many-one.  If we
>must do use bnodes, then we have to use Sergey's trick of using the
>literal mapping name explicitly to attach the literal string to the
>thing it names.

understood
actually we started with
  :s eg:shoeSize _:x.
  _:x rdfs:label "10".
and, although this is trible bloat, we saw it
as a way to express your _:x"10" in N-Triples
I now see that this idea is not working
in our current implementation i.e.
if we try to entail
  :s eg:shoeSize _:x.
  _:x rdfs:label "10".
given
  :s eg:shoeSize "10".
we still find
  :s eg:shoeSize "10".
but then
  "10" rdfs:label "10".
is nonsense
so I give up that idea
(and backtrack a little bit)

We can clearly implement your idea
(and make use of rdfs:range in the entailment
and so, but we can't express (in N-Triples)
anything about that literal occurrence)

--
Jos



