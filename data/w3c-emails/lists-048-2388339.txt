docno="lists-048-2388339"
received="Mon Nov 12 12:09:19 2001"
isoreceived="20011112170919"
sent="Mon, 12 Nov 2001 12:08:04 -0500"
isosent="20011112170804"
name="Peter F. Patel-Schneider"
email="pfps@research.bell-labs.com"
subject="Re: DATATYPES: mental dump."
id="20011112120804H.pfps@research.bell-labs.com"
charset="us-ascii"
inreplyto="3BEFFBC2.FE0796E0&#64;w3.org"
expires="-1"

To:connolly@w3.org
Cc:phayes@ai.uwf.edu,w3c-rdfcore-wg@w3.org


From: Dan Connolly <connolly@w3.org>
Subject: Re: DATATYPES: mental dump.
Date: Mon, 12 Nov 2001 10:41:38 -0600

> "Peter F. Patel-Schneider" wrote:
> > 
> > From: Dan Connolly <connolly@w3.org>
> > Subject: Re: DATATYPES: mental dump.
> > Date: Mon, 12 Nov 2001 09:36:05 -0600
> > 
> > > "Peter F. Patel-Schneider" wrote:
> > > [...]
> > > > [...]
> > > >
> > > > Regardless of the situation with respect to incompatibility with RDF, I
> > > > view incompatibility with XML
> > >
> > > I gather you mean XML Schema, not XML 1.0 itself...
> > 
> > Actually both.  If you don't have the XML Schema stuff below, you have
> > valid XML,
> 
> I'm getting confused... do you mean "valid" in the sense
> of XML 1.0? A document has to include a DTD in order to be
> valid in that sense.

Sorry, I'm not (yet) up on XML terminology.

I think that RDF-in-XML should be compatible with 
1/ XML without DTD or XML Schema, 
2/ XML with DTD, 
3/ XML with XML Schema,
4/ XML with DTD and XML Schema

whatever they are called in XML.

> > which, in my view, should be valid RDF-in-XML.  If you want to
> > have datatypes, then you should have, again in my view, XML Schema
> > datatypes.
> 
> I agree that RDF should use the XML Schema datatypes... i.e.
> the value spaces and corresponding lexical representations.
> But you're not suggesting we should use the XML Schema mechanisms
> to declare datatypes, are you? That involves using
> the XML schema complex types as part of RDF syntax.
> Surely not for RDF 1.0, no?

I'm not calling for RDF 1.0 to include XML Schema.  I am requesting that
1/ RDF 1.0 and its model theory (without datatypes) not exclude the above,
or if it does, that it be clearly indicated that it is not so compatible,
and that this is only the case because no scheme could be agreed on that is
so compatible, and 
2/ if RDF 1.0 does include datatypes, then the treatment of datatypes is
compatible with the above.

[...]

> XML Schema has lots of stuff in it. The only bit that the RDF Core
> WG needs to deal with is the primitive datatypes: the value
> spaces and the corresponding lexical spaces. Not the element
> typing mechanisms, derivation by extension/refinement,
> local element types, or any of that stuff.

If there is no reasonable implementation of XML Schema, then it might be
necessary to produce a stopgap solution that incorporates only the
primitive datatypes, but this should be compatible with a complete
solution.

[...]

> Well, there's the issue that adding an XML schema implementation
> to an RDF parser would increase its size by about 10x.
> 
> The RDF parser I work with is 570 lines of python; it's
> a straightfoward SAX module; it keeps a couple stacks
> of information, but it's not doing anything really hairy.
> 
> An XML schema implementation written in python (i.e.
> using the same substrate) is 10 times as big:
>    4495   12498  149313 XMLSchema.py
>    1847    5894   59171 applyschema.py
>     139     303    3460 xpath.py
>    6481   18695  211944 total

I really don't buy this argument at all.  What is wrong with this size of
effort?   [I'm not saying that there are no problems with XML Schema, just
that requiring the use of about 100 pages of code is not a problem.  If you
worry about this, then you should be quaking in your boots about the size
of HTML browsers.]  It's not even that RDF developers have to build this
code, they can just use it.

[...]

Peter F. Patel-Schneider



