docno="lists-048-2453260"
received="Mon Nov 12 14:49:41 2001"
isoreceived="20011112194941"
sent="Mon, 12 Nov 2001 21:49:21 +0200"
isosent="20011112194921"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: datatypes and MT"
id="2BF0AD29BC31FE46B788773211440431621745@trebe003.NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="datatypes and MT"
expires="-1"


To:phayes@ai.uwf.edu,connolly@w3.org
Cc:w3c-rdfcore-wg@w3.org

> >>  then I am saying that my shoe size is a character string, right?
> >
> >That's my suggestion.
> 
> But like I said in an earlier thread, that seems *obviously wrong*. 
> And as you said, it *is* obviously wrong, but all these silly people 
> insist on writing these obviously wrong things. Doesn't that suggest 
> that they are not writing obviously wrong things, in fact, but rather 
> interpreting those double quotes differently?

We need to keep in focus the fact that "10" is a lexical representation
of the value, not the value.

Yes, folks are not saying that the shoe size is a string. They
are expecting that lexical form to mapped to a value in a particular
value space.

The same is true of the lexical representation of literals in a 
programming language.

   protected Integer shoeSize = 10;

is not saying the shoeSize is the character sequence '10' (even
though there are no quotes), but the value ten.

The difference between e.g. Java and RDF is that Java actually
interprets the lexical forms before it uses them, but RDF just
holds on to them as-is.

The mistake here is to somehow thing that RDF will interpret
them in any way. I.e. RDF does *not* provide any mapping from
lexical space to value space. All it might do is allow the
association of that lexical form with a class that denotes
a lexical space that maps to some specific value space
(e.g. xsd:Integer).

But in RDF space, it remains a string. Just a lexical form.
 
> I just meant to avoid the implication that they were to be 
> interpreted as strings, since that interpretation begs the question. 
> If we can agree that XML syntax in general should not be interpreted 
> using logical canons of notational rigor, then we can leave the quote 
> marks there and not call them quotes.

Exactly. No interpretation is going to happen in RDF. They *are* strings.
Leave the quote marks to indicate they are strings.

> Ah. So this would be OK, would it?
> 
> aa eg:prop _:x .
> _:x xsd:integer "10"
> _:x xsd:integer "0010"
> 
> That does make sense, I agree.

But, just to clarify here, RDF is not determining that
these two lexical forms map to the same value in the
xsd:integer value space. Insofar as RDF is concerned,
they are different values.

Note that there is a difference between a lexical space
and a canonical lexical space. The latter does not permit
such semantically vacuous variant forms. Any value has
but one lexical form.

If literals were canonical lexical forms, then comparison
of literals of the same type would suffice to determine
equality.

Patrick



