docno="lists-048-2694550"
received="Tue Nov 13 12:00:30 2001"
isoreceived="20011113170030"
sent="Tue, 13 Nov 2001 11:00:47 -0600"
isosent="20011113170047"
name="Pat Hayes"
email="phayes@ai.uwf.edu"
subject="RE: datatypes and MT"
id="p05101032b816ff693a0b@[65.212.118.147]"
charset="us-ascii"
inreplyto="2BF0AD29BC31FE46B788773211440431621744&#64;trebe003.NOE.Nokia.com"
expires="-1"


To:Patrick.Stickler@nokia.com
Cc:w3c-rdfcore-wg@w3.org

>  > -----Original Message-----
>>  From: ext Pat Hayes [mailto:phayes@ai.uwf.edu]
>>  Sent: 07 November, 2001 23:14
>>  To: Stickler Patrick (NRC/Tampere)
>>  Cc: Brian McBride; w3c-rdfcore-wg@w3.org
>>  Subject: RE: datatypes and MT
>>
>>
>>  >  > Pat shoeSize "10"
>>  >>
>>  >>  then I am saying that my shoe size is a character string, right?
>>  >>
>>  >>   From here on I will omit the double quotes to avoid confusion.
>>  >
>>  >Do you mean then
>>  >
>>  >   Pat shoeSize 10
>>  >
>>  >???
>>  >
>>  >Such that 10 is something other than a string/literal?
>>
>>  The label in the triple itself is a string, of course, just like all
>>  the other labels. Urirefs are strings, too.  So '10' is a string
>>  (which is also a numeral).  On the other hand, 10 is a number, as in
>>  '10=6+4'. The question is whether the literal label *denotes* a
>>  string or not. I want to be able to write a numeral and have it
>>  denote a number. If we interpret the double quotes as genuine
>>  quotation then that is impossible: all such quotations denote strings.
>
>I am of the opinion that we do not want to interpret the lexical form
>of the value in RDF itself. Thus, it remains a string. To some system
>which understands the data type (lexical space and value space) associated
>with the literal (locally or globally by rdfs:range) it may parse the
>literal into an internal canonical representation of the value and treat
>it as a number, perform operations on it, etc.

I think we are at cross purposes. I agree with you that RDF should 
not *alter* - parse, canonicalize, modify in any way - the literal 
strings. But that is not the issue. That suggestion has never even 
been mooted; there are no valid RDF inferences that would perform 
rewriting of literals, and RDF has no way to express the identities 
that would sanction such rewriting.  But that is not what I mean by 
'interpret' : I meant it in the model-theoretic sense.
>
>But RDF should *not* IMO suggest any kind of interpretation of literals
>in any way. They should remain strings.

Of course they should *remain* strings. All textual labels are 
strings, in a sense: urirefs are strings. Anything than can be given 
a BNF syntax consists of strings of characters. But what the literals 
ARE, and what they MEAN, are two different questions. I am trying to 
have a conversation about the latter, not the former.

>
>>  >So just how does a system *know* how to interpret
>>  >'0x12' as an xsd:integer?
>>
>>  It doesn't, probably. Look, I'm not expecting miracles to occur. All
>>  that the MT extension can do is to make sure that datatyping
>>  information is tallied up with literal labels in a sensible way.
>
>Right. I agree. The key is to bind the data type class with the literal
>in a persistent fashion (this includes both local and global typing)
>and make sure that the application which interprets the literal gets
>all the information it needs.

Right. But once that binding is done successfully, should we say that 
the literal refers to itself, or to the value assigned to it by the 
datatyping scheme to which it is bound? Should the literal "10", 
known to be bound to the datatype xsd:integer, be taken to mean a 
character string with two elements, or the number ten?

Pat
-- 
---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



