docno="lists-048-2990204"
received="Tue Nov 13 19:59:04 2001"
isoreceived="20011114005904"
sent="Tue, 13 Nov 2001 18:59:08 -0600"
isosent="20011114005908"
name="Pat Hayes"
email="phayes@ai.uwf.edu"
subject="RE: ACTION 2001-11-02#02: Datatyping use-cases from CC/PP"
id="p0510103fb8176d900e6c@[65.212.118.147]"
charset="us-ascii"
inreplyto="2BF0AD29BC31FE46B788773211440431621743&#64;trebe003.NOE.Nokia.com"
expires="-1"


To:Patrick.Stickler@nokia.com
Cc:w3c-rdfcore-wg@w3.org

>  > Patrick, you are the only person who ever mentions 'constraints'. You
>>  seem to be inhabiting a different universe than the rest of us. Tell
>>  you what: let us all agree to not talk of 'constraints', and not to
>>  use the words 'prescriptive' or 'normative'. Then questions like the
>>  above do not arise, and we can all get by with a lot fewer emails.
>
>Am I the only one who has ever read the RDF Schema spec?!

See my response to an earlier message. I apologize for having 
forgotten that this usage is in the RDFS spec. However it seems clear 
(from the second para of section 3) that it is not intended there to 
be interpreted in the narrow way that you are interpreting it. The 
spec doesn't use the terms 'prescriptive' or 'normative' (other than 
as a kind of reference), I note.

>Have a glance at section 3, titled, ahem "Constraints"... of which
>rdfs:range is one.
>
>In the world of data interchange, constraints are what keep systems
>reliable. Constraints which ensure that "foo" is not interpreted
>as an integer or someone doesn't have seven Fathers.

Maybe what you call a constraint is simply what I call an assertion. 
What ensures that someone doesn't have 7 fathers is presumably an 
assertion to the effect the people have one father, or something that 
entails that. If you want to call that a constraint, I guess that is 
OK.

>XML Schema is all about constraints. This very goal of defining an
>RDF interpretation of data types for literals is about constraints.

Seems to me that it is about providing ways to determine values in 
systematic ways; but that seems to me to be a kind of inference.

>The whole *point* of being able to say that some literal "1010" is
>an xsd:integer rather than a foo:binary is so that we can enforce
>those constraints on data prior to interpretation so that our systems
>don't go BOOOM!

That is one use, but it's not the only one. That information about 
the literal and its datatype might well be useful even to something 
that never enforces constraints or does any process called 
'interpretation', eg an inference engine of some kind.

You seem to be making too narrow an assumption here, that the ONLY 
purpose of manipulating and processing data is to input it into some 
processor somewhere, as though all of KR was about DB datamodeling.

But more generally in any case, are you saying that RDFS itself 
should be concerned with 'applying' constraints, worrying about what 
happens when such tests of adequacy 'fail' and so on? All that seems 
to me to belong outside of the RDFS world, on the other side of an 
API somewhere.

Pat
-- 
---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



