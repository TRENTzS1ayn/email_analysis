docno="lists-048-3218733"
received="Wed Nov 14 06:41:42 2001"
isoreceived="20011114114142"
sent="Wed, 14 Nov 2001 06:41:23 -0500 (EST)"
isosent="20011114114123"
name="Dan Brickley"
email="danbri@w3.org"
subject="RE: ACTION 2001-11-02#02: Datatyping use-cases from CC/PP"
id="Pine.LNX.4.30.0111140558360.22318-100000@tux.w3.org"
charset="US-ASCII"
inreplyto="2BF0AD29BC31FE46B78877321144043114C08E&#64;trebe003.NOE.Nokia.com"
expires="-1"

To:<Patrick.Stickler@nokia.com>
cc: pat hayes<phayes@ai.uwf.edu>,<w3c-rdfcore-wg@w3.org>



On Wed, 14 Nov 2001 Patrick.Stickler@nokia.com wrote:

> > >Any knowledge based system, at a single point in time, is
> > >a kind of closed world.
> >
> > WRONG, a thousand times wrong. That is a traditional 'database'
> > assumption, but it is not appropriate for the semantic web or RDF.
> > (Take this up with the higher authorities; it is out of scope for the
> > RDF WG to argue this point, I think.)
>
> Philosophize all you like, but the *reality* is that at any
> given point in time when stuff has to happen in a computer
> program, the knowledge it has at hand constitutes a temporally
> distinct closed world -- and one may say that independent of
> temporal progression it is not a closed world, but that just
> doesn't cut it insofar as software operation is concerned.


Please. Pat isn't philosophizing. This is an engineering issue. RDF has
been designed for the Web, where information systems will need to get
useful work done while only in possession of a fraction of the
potentially-relevant information. RDBMS systems are typically used in a
manner that assumes 'if I don't know it, it isn't so'. This doesn't work
in the Web.

Regarding discussion style, we might find it more productive (if less fun)
to use less emotive language. Suggesting that a fellow WG member lacks a
grip on reality simply because they disagree with you is emotive. Even if
they suggest you're 1000 times wrong, a claim that might also come over as
provacative...



> > >>  >So the constraint fails
> > >>
> > >>  Why? Nothing 'fails' here; you just have incomplete information.

This is a critically important observation. If we write the RDF Schema (or
Web Ontology) that says people have two parents, I'm still within my
rights to write RDF/XML about people that doesn't mention their parents.
I should be able to store partial descriptions of people in RDF
databases, draw conclusions, execute queries, etc etc.

RDF Schema is not about policing the content of specific descriptions
'what is said'; it's about policing what is sensibly sayable.

The notion of 'constraint' in RDFS lacks cohesion, and the WG has decided
to remove the 'constraint resource' text from the spec. In large part this
stems from a mis-match of traditions: the XML/SGML notion of document
validity, constraints etc is closer to this notion of validating a
specific chunk of descriptive content. The RDFS 1.0 spec sometimes talks
about 'constraints' in a way that suggests RDFS works the same way as
SGML/XML validation. It doesn't. The XML Schema technologies address
a part of the puzzle that RDF Schema doesn't touch: these schema languages
are much more about validating the content of specific documents. We lost
a lot of time by not understanding this. One might write an XML Schema or
DTD that says 'documents of this type are invalid unless each Person
description includes details of their parents'. RDF Schema doesn't do
that, and we're not the right WG to attempt such a thing.


> > >Right, sorry for sloppy language. The constraint cannot be satisfied
> > >and therefore the test fails. I.e., insofar as a system that needs
> > >to make a decision, inability to confirm the validity of a value
> > >is the same as an invalid value.
> >
> > No, it is not the same. This is like saying that larger is the same
> > as smaller because they both imply not-equal.
>
> >From the viewpoint of a computer system at a point in time, it
> *is* the same. This is not about philosophy, it is about executing
> instructions that accomplish some useful result.

Where 'philosophy' is used in the classic Usenet sense, a loose synonym
for 'abstractly expressed viewpoint with which I disagree'...?

> Please stop philosophizing these issues. We are not dealing with

<raised_eyebrow/>

> the "UNIVERSE", we are dealing with a set of explicitly reified
> statements about some universe which are intended as input to
> software applications which execute instructions that accomplish
> some useful result.

We are specifying the meaning and structure of a document format
and abstract information model designed for use on the Web.

> > >  > >as it should, since in this case, an RDFS
> > >>  >processor cannot satisfy that foo:bar is a subClassOf xsd:integer
> > >>  >and the data is rejected as unreliable.
> > >>
> > >>  NO!! Absolutely not. You cannot 'reject' data as unsuitable just
> > >>  because it is incomplete. New data might arise at any time.

Quite. This is a closed issue. The RDF Schema WG went around this many
times back in 1998. RDF Core isn't going to reinvent the fundamental
working assumptions of RDF and of the Web. It's a distributed system;
additional pertinent information may always be 'out there' somewhere.


> > >YES! YES! YES! ;-)

No. This is closed. We re-specified rdfs:domain and rdfs:range in response
to overwhelming implementor feedback that they were previously defined in
a manner unsuitable to deployment in the Web. The new definition of
rdfs:domain, for example, now makes it possible for RDF-based systems to
draw useful conclusions even in the face of partial information.



> > I really don't have time to argue this very basic point about
> > nonmonotonicity with you. RDFS is a monotonic reasoner, period. To
> > change that would take us WAY outside our charter, and in any case I
> > strongly believe it should not be changed.

It won't be changed. If anyone wants to redesign RDF at such a fundamental
level, this is the wrong place to do it.

> I honestly don't think we are talking about the same things here.

I hope so!

> > >Yes, that knowledge may change, but inability to verify a critical
> > >test due to insufficient knowledge is the basically the same as the
> > >test failing on sufficient knowledge insofar as real time decisions
> > >are concerned.
> >
> > I disagree strongly.
>
> Then I don't think I can ever hope to get you to understand
> anything of import in my postings, because if you don't get
> that, you probably won't get any of the rest.

(a) can't verify test due to missing data
(b) can't verify test due to content of data at hand

These are very different. If (a) is augmented by the additional assumption
that _all relevant data is at hand_, they're closer, although this is
in practice undeployable in a Web context.

I can see that software making real time decisions might want to make this
assumption, and that problems might follow from it.


> Sorry if that's a bit harsh. I'm sure you could make equally
> valid criticisms of my inability to understand or express myself
> in mathematics.


> > It is clear that as far as RDFS is concerned, a 'constraint' is
> > simply an assertion about ranges and domains.
>
> Yes. An assertion, but not a statement. A constraint does not impart
> *ANY* properties on the resources themselves!
>
> A constraint only says (prescribes) what should be, not what is.
>
> Although the wording of the RDFS spec suggests the possibility of
> a descriptive treatment of rdfs:range, its *primary* treatment
> is prescriptive.
>
> (and in case I inserted too few above...  ;-) ;-) ;-) ;-) ;-)

RDF Schema's notion of 'constraint' is inelegantly expressed, for sure.

The basic idea is that we can capture something of the meaning of RDF
properties by saying how they are sensibly used.

Dan


-- 
mailto:danbri@w3.org
http://www.w3.org/People/DanBri/



