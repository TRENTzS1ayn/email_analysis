docno="lists-048-3378756"
received="Wed Nov 14 08:30:56 2001"
isoreceived="20011114133056"
sent="Wed, 14 Nov 2001 15:29:53 +0200"
isosent="20011114132953"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: ACTION 2001-11-02#02: Datatyping use-cases from CC/PP"
id="2BF0AD29BC31FE46B78877321144043162179A@trebe003.NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="ACTION 2001-11-02#02: Datatyping use-cases from CC/PP"
expires="-1"


To:danbri@w3.org
Cc:phayes@ai.uwf.edu,w3c-rdfcore-wg@w3.org



> -----Original Message-----
> From: ext Dan Brickley [mailto:danbri@w3.org]
> Sent: 14 November, 2001 13:41
> To: Stickler Patrick (NRC/Tampere)
> Cc: pat hayes; w3c-rdfcore-wg@w3.org
> Subject: RE: ACTION 2001-11-02#02: Datatyping use-cases from CC/PP
> 
> 
> 
> On Wed, 14 Nov 2001 Patrick.Stickler@nokia.com wrote:
> 
> > > >Any knowledge based system, at a single point in time, is
> > > >a kind of closed world.
> > >
> > > WRONG, a thousand times wrong. That is a traditional 'database'
> > > assumption, but it is not appropriate for the semantic web or RDF.
> > > (Take this up with the higher authorities; it is out of 
> scope for the
> > > RDF WG to argue this point, I think.)
> >
> > Philosophize all you like, but the *reality* is that at any
> > given point in time when stuff has to happen in a computer
> > program, the knowledge it has at hand constitutes a temporally
> > distinct closed world -- and one may say that independent of
> > temporal progression it is not a closed world, but that just
> > doesn't cut it insofar as software operation is concerned.
> 
> 
> Please. Pat isn't philosophizing. This is an engineering 
> issue. RDF has
> been designed for the Web, where information systems will need to get
> useful work done while only in possession of a fraction of the
> potentially-relevant information. RDBMS systems are typically 
> used in a
> manner that assumes 'if I don't know it, it isn't so'. This 
> doesn't work
> in the Web.

There is a difference between a closed system and a closed world, no?

An RDF based system is an open system but at any given point in
time, when it has to decide yes/no about a given action, its
body of knowledge constitutes a closed world.

Saying "if I don't know it, it isn't so" is not the same as
saying "if I don't know it, it can't effect my decisions".

It is the latter that I am asserting as a valid view
from an systems engineering perspective.

Perhaps I'm using the term "closed world" a bit loosely here,
but I hope the distinction made above is clear.

> > > >>  >So the constraint fails
> > > >>
> > > >>  Why? Nothing 'fails' here; you just have incomplete 
> information.
> 
> This is a critically important observation. If we write the 
> RDF Schema (or
> Web Ontology) that says people have two parents, I'm still within my
> rights to write RDF/XML about people that doesn't mention 
> their parents.

Of course. Never said you couldn't. Constraints don't control
what folks can say, they only provide a means to filter
out knowledge that doesn't meet specific criteria, where those
criteria are significant to a given process.

> I should be able to store partial descriptions of people in RDF
> databases, draw conclusions, execute queries, etc etc.

Of course. Why not.
 
> RDF Schema is not about policing the content of specific descriptions
> 'what is said'; it's about policing what is sensibly sayable.

Absolutely. No disagreement there.
 
> The notion of 'constraint' in RDFS lacks cohesion, and the WG 
> has decided
> to remove the 'constraint resource' text from the spec. 

Are you then going to retitle section 3 and rewrite the role
of rdfs:range and rdfs:domain as "constraints"?!

Ouch! I hope not!

>In 
> large part this
> stems from a mis-match of traditions: the XML/SGML notion of document
> validity, constraints etc is closer to this notion of validating a
> specific chunk of descriptive content. The RDFS 1.0 spec 
> sometimes talks
> about 'constraints' in a way that suggests RDFS works the same way as
> SGML/XML validation. 

I'd say it does alot more than just "suggest" ;-)

> It doesn't. The XML Schema technologies address
> a part of the puzzle that RDF Schema doesn't touch: these 
> schema languages
> are much more about validating the content of specific 
> documents. 

Sure. And the scope of RDFS is a body of knowledge, not
individual documents. Apples and oranges.

> We lost
> a lot of time by not understanding this. One might write an 
> XML Schema or
> DTD that says 'documents of this type are invalid unless each Person
> description includes details of their parents'. RDF Schema doesn't do
> that, and we're not the right WG to attempt such a thing.

No. But I'd hope that we *are* the right WG to define RDF Schema to
say things like 'an instance of the person class must have two
and only two values for the property x:parent and the values of
those properties may not be identitical (share the same URI).

Right? Otherwise, we are left with *no* means whatsoever to
define constraints about manditory knowledge for specific
applications. XML Schema cannot define constraints for knowledge
bases build from the syndication of multiple instances, so
the constraint functionality offered by RDFS is critical.

Am I really understanding you correctly as saying that RDFS
no longer defines any constraints whatsoever?

Where then does the responsibility get shifted to? DAML+OIL?
The WebOnt WG deliverables?

Please fill me in...

> 
> > > >Right, sorry for sloppy language. The constraint cannot 
> be satisfied
> > > >and therefore the test fails. I.e., insofar as a system 
> that needs
> > > >to make a decision, inability to confirm the validity of a value
> > > >is the same as an invalid value.
> > >
> > > No, it is not the same. This is like saying that larger 
> is the same
> > > as smaller because they both imply not-equal.
> >
> > >From the viewpoint of a computer system at a point in time, it
> > *is* the same. This is not about philosophy, it is about executing
> > instructions that accomplish some useful result.
> 
> Where 'philosophy' is used in the classic Usenet sense, a 
> loose synonym
> for 'abstractly expressed viewpoint with which I disagree'...?
> 
> > Please stop philosophizing these issues. We are not dealing with
> 
> <raised_eyebrow/>
> 
> > the "UNIVERSE", we are dealing with a set of explicitly reified
> > statements about some universe which are intended as input to
> > software applications which execute instructions that accomplish
> > some useful result.
> 
> We are specifying the meaning and structure of a document format
> and abstract information model designed for use on the Web.
> 
> > > >  > >as it should, since in this case, an RDFS
> > > >>  >processor cannot satisfy that foo:bar is a 
> subClassOf xsd:integer
> > > >>  >and the data is rejected as unreliable.
> > > >>
> > > >>  NO!! Absolutely not. You cannot 'reject' data as 
> unsuitable just
> > > >>  because it is incomplete. New data might arise at any time.
> 
> Quite. This is a closed issue. The RDF Schema WG went around this many
> times back in 1998. RDF Core isn't going to reinvent the fundamental
> working assumptions of RDF and of the Web. It's a distributed system;
> additional pertinent information may always be 'out there' somewhere.

Never, ever said that data would be rejected in any way. Please
don't judge my opinions by the misunderstandings of others and
I promise to extend the same curtesy.

> 
> > > >YES! YES! YES! ;-)
>
> No. This is closed. 

You misunderstood what I was referring to here...

> We re-specified rdfs:domain and 
> rdfs:range in response
> to overwhelming implementor feedback that they were 
> previously defined in
> a manner unsuitable to deployment in the Web. The new definition of
> rdfs:domain, for example, now makes it possible for RDF-based 
> systems to
> draw useful conclusions even in the face of partial information.

Well, serves me right for joining the party late...  ;-)

 
> > > I really don't have time to argue this very basic point about
> > > nonmonotonicity with you. RDFS is a monotonic reasoner, period. To
> > > change that would take us WAY outside our charter, and in 
> any case I
> > > strongly believe it should not be changed.
> 
> It won't be changed. If anyone wants to redesign RDF at such 
> a fundamental
> level, this is the wrong place to do it.

I'm not asking for the changes that Pat misunderstands me
to be asking for. 

> > I honestly don't think we are talking about the same things here.
> 
> I hope so!

So do I ;-)
  
> RDF Schema's notion of 'constraint' is inelegantly expressed, 
> for sure.
> 
> The basic idea is that we can capture something of the meaning of RDF
> properties by saying how they are sensibly used.

Fair enough, and I'm not saying that the "descriptive" application
of rdfs:range (or any RDFS "constraints") is not a valid application.

I was only saying that the specs don't portray it as the primary
intended application, and I was really puzzled why folks seemed
to think I was inventing a "prescriptive" application.

Also, my recent summary of what I feel are the key data typing
issues and how they should be approached, takes into acount
this descriptive assertion of type by rdfs:range.

Cheers,

Patrick



