docno="lists-048-3479254"
received="Wed Nov 14 10:37:24 2001"
isoreceived="20011114153724"
sent="Wed, 14 Nov 2001 16:36:27 +0100"
isosent="20011114153627"
name="jos.deroo.jd@belgium.agfa.com"
email="jos.deroo.jd@belgium.agfa.com"
subject="RE: datatypes and MT"
id="OF03431F74.8DC1E93A-ONC1256B04.0053ACF7@bayer-ag.com"
charset="us-ascii"
inreplyto="datatypes and MT"
expires="-1"

To:Patrick.Stickler@nokia.com
Cc:jos.deroo.jd@belgium.agfa.com,phayes@ai.uwf.edu,w3c-rdfcore-wg@w3.org



[...]
> > no, I meant what I wrote
> >
> >   eg:me eg:shoeSize "10", [ rdf:type xsd:decimal ].
> >
> > or
> >
> >   eg:me eg:shoeSize "10".
> >   eg:me eg:shoeSize [ rdf:type xsd:decimal ].
> >
> > which would require the assertion
> >
> >   eg:shoeSize rdf:type daml:UniqueProperty.
> >
> > to conclude that both object nodes "10"
> > and [ rdf:type xsd:decimal ] are the same thing
> > (but again you cutted that piece of text)
>
> Huh? so now every property in the graph gets *two* value
> nodes, great... (need to buy more memory ;-)

anything could be asserted, so in fact one can have *many* values
it's just when a property is unique that one has one value
(see http://www.daml.org/2001/03/model-theoretic-semantics.html)

it is exactly this very feature that makes it
possible to talk about a *particular* node (and thus
their is no need to refer to it with a _:label)

i really hope that you are now not lost any longer ;-)

> > > > Another assumption is that
> > > >
> http://www.coginst.uwf.edu/users/phayes/w3-rdf-mt-current-draft.html
> > > is not excluding literals in the rules for RDFS entailment e.g.
> > >
> > >   rdfs3
> > >   xxx aaa uuu . aaa rdfs:range zzz . |- uuu rdf:type zzz .
> > >           ^^^yyy                        ^^^yyy
> >
> > > If you mean that rdfs:subClassOf relations between data types
> > > defines a relation between lexical spaces, then I disagree.
>
> > not lexical of course not
>
> But how does "not excluding literals" = "not lexical"?

good question
it should have been like explained in the MT
...Here, xxx, yyy and zzz stand for any uriref, bNode or literal expression,
   aaa for any uriref, and uuu for any uriref or bNode (but not a literal).

--
Jos



