docno="lists-048-4083539"
received="Thu Nov 15 06:24:08 2001"
isoreceived="20011115112408"
sent="Thu, 15 Nov 2001 13:23:45 +0200"
isosent="20011115112345"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: Answer to the question: What is a &quot;value&quot; to RDF"
id="2BF0AD29BC31FE46B78877321144043114C0A3@trebe003.NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="Answer to the question: What is a &quot;value&quot; to RDF"
expires="-1"


To:phayes@ai.uwf.edu
Cc:w3c-rdfcore-wg@w3.org



> -----Original Message-----
> From: ext Pat Hayes [mailto:phayes@ai.uwf.edu]
> Sent: 15 November, 2001 03:41
> To: Stickler Patrick (NRC/Tampere)
> Cc: w3c-rdfcore-wg@w3.org
> Subject: RE: Answer to the question: What is a "value" to RDF
> 
> 
> >  > > Well hold on. It isn't clear that there are any RDF classes
> >>  denoting
> >>  > datatypes, at present. In the S proposal, for example,
> >>  datatype names
> >>  > are RDF property names, not class names. So I do not 
> know from what
> >>  > population you are getting 'most' here.
> >>
> >>  Right. I stand corrected. I should have stated "Most RDF resources
> >>  denoting..."
> >
> >Actually, I take that back.
> >
> >rdfs:range expects a class as its value, and I think it is
> >a fairly reasonable assumption that data types are classes,
> >per the semantics of subClassOf, etc. so even though it might
> >not be strictly stated somewhere that data types are RDF classes,
> >I think it is fair to assume they are, and perhaps it should
> >be stated as such.
> 
> Well, the S proposal would have them be properties. And I have to 
> admit, even though my name is on a different proposal, that this idea 
> of datatypes as properties does rather better capture the intuition 
> that the core notion in datatyping is a *mapping* from a lexical to a 
> value space.

Firstly, it only pairs the literal lexical form with the data
type, it doesn't define a mapping of the lexical form to the
value space of the data type. To do that, it would have to
identify the value being mapped to. All it does in infer that
such a mapping exists.

Secondly, it does not allow one to centralize data type knowledge
by means of rdfs:range.

Thirdly, it introduces two variant graph representations for
locally typed or non-locally typed literal objects whereby
in the first case, a proxy bNode is inserted in between
the predicate arc and the literal object while in the latter
case the predicate arc terminates in the literal object itself.

Honestly, I find that the S proposal bends (and breaks) just
too many established intuitions and expectations about RDF
semantics, and despite being clever or making some parts of the
MT easier to define, I don't see it as making life any easier
for implementors, but actually see it as making life harder
for implementors (and knowledge producers) because it introduces
variations in the graph structures for (implied) statements
and makes global range defined types impossible (or at best
difficult) to define, precluding contextualized type
associations defined by schema.

Let's not lose sight of the impact that a given proposal
will have to "the big picture" by focusing too much on what
it offers to the MT alone.

Eh?

Cheers,

Patrick



