docno="lists-048-4282588"
received="Thu Nov 15 10:31:05 2001"
isoreceived="20011115153105"
sent="Thu, 15 Nov 2001 15:28:36 +0000 (GMT)"
isosent="20011115152836"
name="Jan Grant"
email="Jan.Grant@bristol.ac.uk"
subject="bNodes, MT, process model. Re: datatypes and MT  (#rdfms-graph)"
id="Pine.GSO.4.31.0111151517570.26038-100000@mail.ilrt.bris.ac.uk"
charset="US-ASCII"
inreplyto="3BF3D94C.18EE4D18&#64;w3.org"
expires="-1"

To: Dan Connolly<connolly@w3.org>
cc: Pat Hayes<phayes@ai.uwf.edu>, w3c-rdfcore-wg<w3c-rdfcore-wg@w3.org>


Warning: ramble, vague unease, and potential can of worms.

On Thu, 15 Nov 2001, Dan Connolly wrote:

> Pat Hayes wrote:
>
> > the question of whether two blank nodes are the 'same' or 'different'
> > is settled in the syntax itself. This, in the graph syntax there are
> > no bound variables, or local names, or anything at all with a local
> > scope.
>
> phpht. How are blank nodes not bound variables?

Actually, I've been worrying about this recently. We have, in a
nutshell,

1.a bNode is an existentially quantified variable

and this is something I find slightly disturbing. I'd much rather
replace it with:

2.a bNode (anonymous resource, whatever - leaving aside the
"is it a literal?" question for the moment) is a node
that we don't know the label of

Why? Well, first note, that this (ie, a node with conceptual identity
what we just happen to be somewhat ignorant of) entails the same thing
as the current MT - ie, it's making an existentially-quantified
statement.

Now look at some common questions that I've asked, others have asked,
and even Pat asked at the F2F...

"how do I assert additional information about that node?"
"how do I find that node again?"

etc. etc.

These questions are, from a MT point of view, missing the point. But
I've had discussions with DB implementors for whom the common intuition
follows the "thing we don't know the name of" line rather than the
"existential variable" one.

The MT obviously doesn't deal with process issues - how do we assert,
pass around, delete, transform bits of an RDF graph in an
implementation. That's not its job. The MT doesn't actually change much
(at all?) if you take the second point of view above. What does change
is the reasonable expectation of supported (supportable) operations on
an RDF store. Can we get away with this?

[ I guess I owe Sergei an apology - however, I'm still not suggesting we
invent UUIDs for anonymous nodes, just reconsider what they mean. ]

jan

PS. Pat, please shoot me down.

-- 
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
Tel +44(0)117 9287088 Fax +44 (0)117 9287112 RFC822 jan.grant@bris.ac.uk
Axioms speak louder than words.



