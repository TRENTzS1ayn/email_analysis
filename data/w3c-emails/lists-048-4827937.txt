docno="lists-048-4827937"
received="Fri Nov 16 07:34:40 2001"
isoreceived="20011116123440"
sent="Fri, 16 Nov 2001 14:33:56 +0200"
isosent="20011116123356"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: Answer to the question: What is a &quot;value&quot; to RDF"
id="2BF0AD29BC31FE46B7887732114404316217E2@trebe003.NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="Answer to the question: What is a &quot;value&quot; to RDF"
expires="-1"


To:melnik@db.stanford.edu,phayes@ai.uwf.edu
Cc:w3c-rdfcore-wg@w3.org

> > >To do that, it would have to
> > >identify the value being mapped to. All it does in infer that
> > >such a mapping exists.
> > 
> > No, the mapping is named right there in the triple, eg 
> 'xsd:integer'.

OK, I'm now reading 'mapping' as meaning the pairing of a lexical
form to a data type, such that the lexical form corresponds to
one and only one value in the value space of the data type, but
the *mapping* itself doesn't say which that is.

Eh?

If that's a correct interpretation, then I agree that such a
"mapping" does not have to use any representation for that
actual value.

> In
> particular, using my:age has little to do with datatyping, since "12"
> still denotes just a string. No type is assigned to "12" by using the
> property my:age. 

I don't see where you get that. What if the defined value space
for the my:age data type was years and the lexical form defined
integer notation?

Seems to me that a given data type is free to have as complex a
value space as it likes and as complex a corresponding lexical
space as is needed.

Are you saying that given 

   xxx --foo:date--> "2001-11-29"

that foo:date is not a data type?

And for that matter, just *how* do you differentiate a data
type property from a non-data type property, which your
example above for my:date seems to imply?


Patrick



