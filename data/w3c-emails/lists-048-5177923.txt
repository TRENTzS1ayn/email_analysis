docno="lists-048-5177923"
received="Fri Nov 16 14:04:05 2001"
isoreceived="20011116190405"
sent="Fri, 16 Nov 2001 13:03:03 -0600"
isosent="20011116190303"
name="Pat Hayes"
email="phayes@ai.uwf.edu"
subject="RE: Answer to the question: What is a &quot;value&quot; to RDF"
id="p0510107bb81b0fee7f67@[65.212.118.147]"
charset="us-ascii"
inreplyto="2BF0AD29BC31FE46B7887732114404316217E2&#64;trebe003.NOE.Nokia.com"
expires="-1"


To:Patrick.Stickler@nokia.com
Cc:melnik@db.stanford.edu,w3c-rdfcore-wg@w3.org

>  > > >To do that, it would have to
>>  > >identify the value being mapped to. All it does in infer that
>>  > >such a mapping exists.
>>  >
>>  > No, the mapping is named right there in the triple, eg
>>  'xsd:integer'.
>
>OK, I'm now reading 'mapping' as meaning the pairing of a lexical
>form to a data type, such that the lexical form corresponds to
>one and only one value in the value space of the data type,

Right

>but
>the *mapping* itself doesn't say which that is.

?? No, it DOES say which that is. That is precisely what it does, in 
fact. Given a lexical form, the mapping defines one value to be the 
corresponding value of that form. So for example the datatype mapping 
of xsd:integer maps '10' to ten, '34' to thirty-four, etc. . (True, 
the particular usage of 'xsd:integer' in the S style is not THAT 
mapping, but that's another issue.)

>Eh?
>
>If that's a correct interpretation, then I agree that such a
>"mapping" does not have to use any representation for that
>actual value.
>
>>  In
>>  particular, using my:age has little to do with datatyping, since "12"
>>  still denotes just a string. No type is assigned to "12" by using the
>>  property my:age.
>
>I don't see where you get that. What if the defined value space
>for the my:age data type was years and the lexical form defined
>integer notation?

The issue is whether the type is *assigned to* "12", in the sense 
that that actual literal label is expected to denote 12 years, or 
whether it is *used* to determine the type of something else, such as 
the denotation of a bNode. In the S idiom, the bNode and the literal 
label are closely connected, but they are not identical, and they can 
be interpreted as referring to different things (and indeed are so 
interpreted, in Sergey's interpretation of the S idiom).

>Seems to me that a given data type is free to have as complex a
>value space as it likes and as complex a corresponding lexical
>space as is needed.

Sure, but that does not address the issue we are here discussing, 
which is how that relationship between lexical and value spaces is to 
be expressed in the RDF syntax.

>Are you saying that given
>
>    xxx --foo:date--> "2001-11-29"
>
>that foo:date is not a data type?

No, but the S idiom would say that its being a datatype does not 
entail that that literal "2001-11-29" *denotes* a date in the RDF 
semantics; rather, this RDF triple should be understood as saying 
that xxx is a date, and that '2001-11-29' is a lexical form of that 
date in the datatype in question. So the literal label in this triple 
denotes a string, not a date.

>And for that matter, just *how* do you differentiate a data
>type property from a non-data type property, which your
>example above for my:date seems to imply?

Good question.

Pat

-- 
---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



