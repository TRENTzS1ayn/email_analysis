docno="lists-048-5200275"
received="Fri Nov 16 14:39:04 2001"
isoreceived="20011116193904"
sent="Fri, 16 Nov 2001 13:38:00 -0600"
isosent="20011116193800"
name="Pat Hayes"
email="phayes@ai.uwf.edu"
subject="RE: Answer to the question: What is a &quot;value&quot; to RDF"
id="p0510107db81b17ce5826@[65.212.118.147]"
charset="us-ascii"
inreplyto="2BF0AD29BC31FE46B7887732114404316217E7&#64;trebe003.NOE.Nokia.com"
expires="-1"


To:Patrick.Stickler@nokia.com
Cc:w3c-rdfcore-wg@w3.org

>  > >X --s:age--> D --s:inYears--> Y --s:inDecimal--> "12"
>
>Sergey, or anyone else,
>
>Can you explain how this representation relates to
>data types such as xsd:duration?
>
>Also, what makes it necessary to have any data typing
>properties at all? We can just make eg. s:age a
>subPropertyOf xsd:duration and toss in the
>literal with no worries. I.e.:
>
>   x s:age "P12Y" .
>   s:age rdfs:subPropertyOf xsd:duration .
>
>Eh?
>
>I.e, I'm unclear on the ramifications of blurring the
>distinction between property and data type.
>
>Is s:age a "general" property or a data type? Both?
>
>How do we segregate the semantics of 'AGE' and
>the semantics of 'DURATION' denoted by s:age?
>
>It just seems to me that this "have your cake and eat
>it" approach is going to bite us in the rear, eventually...

Yes, I think Patrick makes an excellent point. All the datatyping 
proposals on the table use datatype names either as rdf:Class names 
or rdf:Property names. Both of which raise the question, what makes 
classes/properties that are datatypes different from other 
classes/properties? Will an RDF reasoner need to know that a given 
class/property is a datatype-ish one, instead of an ordinary one? If 
so, why; and also if so, how is this difference supposed to be 
expressed in RDFS? Perhaps more acutely: if not, why are we making 
all this fuss about datatyping? If datatype classes/properties are 
indistinguishable from normal ones, and can be handled using only 
normal RDFS reasoning, we don't need to do ANYTHING special about 
datatypes at all.

I would suggest that the authors of the various proposals make their 
answers clear. Here are mine for P(++);

The P(++) proposals require datatypes to be treated specially in the 
model theory.  Datatype classes (and properties) must be 
distinguishable as such in order for them to be be able to 
disambiguate occurrences of literals. No other special assumptions, 
or restrictions on their usage, are required.

In the examples given so far this has been done implicitly by the use 
of particular qname forms such as 'xsd:integer', with the assumption 
that the required semantic constraints are applied to any URI 'known' 
to denote a datatype.

The P(++) proposals have not included any particular way to make such 
a distinction in RDFS, but a natural proposal would be to introduce 
the class names rdfs:datatypeClass and rdfs:datatypeProperty.

Pat

-- 
---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



