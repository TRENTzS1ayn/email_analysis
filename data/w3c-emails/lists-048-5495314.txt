docno="lists-048-5495314"
received="Tue Nov 20 14:36:47 2001"
isoreceived="20011120193647"
sent="Tue, 20 Nov 2001 13:37:18 -0600"
isosent="20011120193718"
name="Pat Hayes"
email="phayes@ai.uwf.edu"
subject="Re: Answer to the question: What is a &quot;value&quot; to RDF"
id="p05101006b8205f83513a@[130.107.66.135]"
charset="us-ascii"
inreplyto="5.1.0.14.2.20011117164450.04330740&#64;joy.songbird.com"
expires="-1"


To: Graham Klyne<Graham.Klyne@MIMEsweeper.com>
Cc:w3c-rdfcore-wg@w3.org

>At 12:41 PM 11/16/01 -0600, Pat Hayes wrote:
>>>I'd like to consider a simple example:
>>>
>>>     ex:foo ex:property "10" .
>>>     ex:property rdfs:range xsd:integer .
>>>
>>>Can this be legitimate?
>>
>>In S, I don't think so, since xsd:integer has to be a property 
>>rather than a class.
>>
>>Even if we allow it to be used in both ways at once, I cannot see 
>>any way in which range information on the asserting property (ie 
>>the property that occurs in the triple which has the bNode as 
>>object in the S idiom) can possibly constrain the datatype used in 
>>the second triple (the one that has the bNode as subject and the 
>>literal as object.), or indeed even have any interaction with it. 
>>The triple
>>_:x xsd:integer "10" .
>>can be, at best, only constrained to be false by a class 
>>restriction of the form
>>_:x rdf:type <someClass> .
>>It cannot be forced to be true.
>
>I think I didn't state my query clearly enough.  The above example 
>is exactly the case I wanted to test (because I think it corresponds 
>to some current usage).  But I was not clear that the xsd:integer is 
>*not* intended to be the property used in the S scheme to indicate 
>an integer value.
>
>Consider this slightly enlarged example:
>
>     ex:foo ex:property "10" .
>     ex:property rdfs:range xsd:integer .
>     ex:foo s:property _:a .
>     _:a s:inDecimal "10" .
>
>where it is the node labeled _:a that denotes the integer value 10. 
>(This entails the smaller example above, right?)
>
>I think it *can* be legimitate if the xsd:... URIs are considered to 
>be RDF class names whose value space is strings that conform to the 
>corresponding xsd:... lexical space.  In this interpretation, the 
>xsd:... URIs would not be used to label properties;  some other 
>label would be required for that (s:property and s:inDecimal in the 
>above example).

OK, but than that is yet *another* suggestion, which we should maybe 
call G, which is somewhat like the DC suggestion. My problem with G 
is, what establishes the connection between the lexical class 
xsd:integer and the 'connecting' property s:inDecimal ?

>
>>>  If so, what can we say about it?
>>>
>>>Could we, for example, allow rdf:type values like xsd:integer to 
>>>be subclasses of rdfs:literal, so that the members of the value 
>>>space are still just strings, but having a restricted lexical form?
>>
>>But that would not specify the datatype, since "10" might be a 
>>decimal or a binary or an octal or whatever.
>
>I agree that it wouldn't specify the datatype of the value denoted 
>by intermediate node (_:a in the example above, or _:int10node in 
>the example below).  I don't see that as a problem.

I do, since there is no way to specify that type, it seems. Since you 
are using xsd:integer to refer to the *lexical* space of the 
datatype, there is no name available for the value space; and, worse, 
the usual usage is that the datatype name refers to the value space 
rather than the lexical space, so this idiom doesn't conform to 
accepted usage either.

(In haste)

Pat
-- 
---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



