docno="lists-048-5548870"
received="Wed Nov 21 01:01:33 2001"
isoreceived="20011121060133"
sent="Wed, 21 Nov 2001 08:01:19 +0200"
isosent="20011121060119"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: Answer to the question: What is a &quot;value&quot; to RDF"
id="2BF0AD29BC31FE46B788773211440431621834@trebe003.NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="Answer to the question: What is a &quot;value&quot; to RDF"
expires="-1"


To:phayes@ai.uwf.edu,Graham.Klyne@MIMEsweeper.com
Cc:w3c-rdfcore-wg@w3.org

> the usual usage is that the datatype name refers to the value space 
> rather than the lexical space, 

I'm not sure I agree 100% with that, such that I think that
common usage may put more emphasis on the value space, but
also includes the lexical space. 

I.e. XML Schema defines not only the value space, but *two*
lexical spaces -- canonical and non-canonical -- for each
simple data type.

All programming languages define both value space and lexical
space for each primitive data type. If they didn't define the
lexical space, you couldn't write program code.

So, if one were to list all of the data type schemes in 
"common usage" today, I would bet that the significant
majority of them define both value space and lexical space
(even if the lexical space is considered to be of secondary
importance, which of course, it is).

Do their even exist any commonly used (in software engineering)
"upper level" data type schemes that only define value spaces 
and deliberately leave lexical spaces undefined? Or is that
even possible? Even mathematics needs its notations... 

Cheers,

Patrick



