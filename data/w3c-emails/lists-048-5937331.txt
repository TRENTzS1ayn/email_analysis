docno="lists-048-5937331"
received="Thu Nov 29 05:57:48 2001"
isoreceived="20011129105748"
sent="Thu, 29 Nov 2001 12:57:07 +0200"
isosent="20011129105707"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: Proposal to drop S from consideration"
id="A03E60B17132A84F9B4BB5EEDE57957B16227F@trebe006.NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="Proposal to drop S from consideration"
expires="-1"


To:Jan.Grant@bristol.ac.uk,connolly@w3.org
Cc:w3c-rdfcore-wg@w3.org

> I'd rather see P++/U' than P/U (where U' doesn't actually do gnarly
> things with URIs, but still has the low-level typed data of U).

Firstly, let's leave U out of the main discussion for now, as I consider
it just a synonym of P or DAML. It is just a tighter binding of
the lexical form and data type identifier than these other two
idioms, and the benefits are primarily practical (greater number of
nodes can participate in tidying operations, so we get a higher
level of compression).

Secondly, I also like the P++ approach the most, but unfortunately, I 
think it needs to be left as a future goal to work towards in
e.g. RDF 2.0. I think it is logical to be able to treat literal
nodes as subjects, but to allow that now would (IMO) be as much
of a radical change as the S proposal.

However, I think that the P/DAML approach is much more compatible
with a future P++ treatment and really constitutes simply moving
the literal value of the rdf:value property of the bNode to the bNode
itself as a label. Thus, it's nearly a synonym to P/DAML/U itself.

I.e. 

from

   x --ex:prop--> _:1 --rdf:value--> "10"
                   |
                   -----rdf:type---> xsd:integer

to

   x --ex:prop--> _:1:"10" --rdf:type--> xsd:integer

One could almost view U as a precursor to P++, e.g.
compare the following to the P++ immiediately above:

   x --ex:prop--> <xsd:integer:10> --rdf:type--> xsd:integer

Thus, while P/DAML/U and P++ are all very closely aligned in 
"philosophy", the S proposal is quite different -- though I'm not
saying that S is less attractive simply because it is different,
but rather that the similarity of all the other proposals suggests
a common perception of how data typing should work that is at
odds with the S "world view".

I see adoption/clarification of the P/DAML idioms as a logical step
towards a future P++ like solution -- and the move from P/DAML
to P++ is quite small IMO compared to a move from S to P++.

Cheers,

Patrick

--
               
Patrick Stickler              Phone: +358 50 483 9453
Senior Research Scientist     Fax:   +358 7180 35409
Nokia Research Center         Email: patrick.stickler@nokia.com



