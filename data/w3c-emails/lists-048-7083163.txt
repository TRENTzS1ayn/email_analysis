docno="lists-048-7083163"
received="Thu Oct 11 08:49:32 2001"
isoreceived="20011011124932"
sent="Thu, 11 Oct 2001 08:49:21 -0400"
isosent="20011011124921"
name="Peter F. Patel-Schneider"
email="pfps@research.bell-labs.com"
subject="Re: new model theory for DAML+OIL"
id="20011011084921O.pfps@research.bell-labs.com"
charset="us-ascii"
inreplyto="p05101050b7ea7eb7993b&#64;[205.160.76.193]"
expires="-1"

To:phayes@ai.uwf.edu
Cc:joint-committee@daml.org,w3c-rdfcore-wg@w3.org


Hmmm this might go through.  Let me think on it for a while.

A comment on XML Schema datatypes first, though.

peter


From: Pat Hayes <phayes@ai.uwf.edu>
Subject: Re: new model theory for DAML+OIL
Date: Wed, 10 Oct 2001 22:42:18 -0500

[...]

> also I would add an exclusion clause:
> if x =/= y then DTC(x) is disjoint from DTC(y)  (Is this kosher in 
> XML? It seems reasonable, and makes things neater, but we could do 
> without it.)

This doesn't match XML Schema.

XML Schema has (at least) the following categories of datatypes

0/ ur types
1/ (built-in) primitive types
2/ built-in derived types
3/ user-defined types, including
   3a/ restriction types
   3b/ union types
   3c/ list types
4/ complex types

Primitive types, e.g., decimal and float, have disjoint value spaces (but
not disjoint lexical spaces).  Built-in derived types, e.g., integer and
int, do not have disjoint value spaces.   Different user-defined types may
differ only on their mapping from lexical space to value space, e.g., the
union of boolean and integer vs the union of integer and boolean.

Hmm, thinking about this even more, I see that I am (still) missing some
aspects of XML Schema datatypes. :-(

[...]


> Pat



