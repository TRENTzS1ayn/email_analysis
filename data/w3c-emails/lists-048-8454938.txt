docno="lists-048-8454938"
received="Tue Oct 16 12:29:00 2001"
isoreceived="20011016162900"
sent="Tue, 16 Oct 2001 11:29:03 -0500"
isosent="20011016162903"
name="Pat Hayes"
email="phayes@ai.uwf.edu"
subject="Re: Where is the SW going? (was Re: Expressiveness of RDF as    Rule  Conclusion Language (was Re: What  is an RDF Query? ))"
id="p05101027b7f20e693948@[205.160.76.193]"
charset="us-ascii"
inreplyto="5.1.0.14.2.20011016130946.03a4d0c0&#64;joy.songbird.com"
expires="-1"


To: Graham Klyne<GK@NineByNine.org>
Cc:w3c-rdfcore-wg@w3.org

>At 03:02 PM 10/15/01 -0500, Pat Hayes wrote:
>>>We still call it RDF.
>>
>>I don't!  And this is absolutely central. If the RDF specs don't 
>>specify a meaning, then that meaning is NOT in RDF. That's what 
>>'being in RDF' means. Now, a particular piece of RDF might in some 
>>broader sense 'have' some meaning that is invisible to an RDF 
>>processor - ie something that interprets RDF graphs according to 
>>their RDF-model-theory meanings and draws RDF-valid conclusions 
>>from them, say -  but it is very important not to say that this 
>>meaning in 'in RDF', because in the only sense of meaning being 
>>'in' a language *that is available to a mechanical process*, it 
>>isn't. At best you might say that it is RDF-encrypted, or 
>>something; its there, but completely hidden from the RDF layer.
>
>What terminology can we use for a program that is written using 
>(say) the programming language C, and also makes use of well-known 
>3rd party libraries of functions?  Many folks would say it's written 
>"in" C, even though the complete meaning of the program is not 
>defined by the C programming language.

Right, and so would I, since those libraries are also written in C 
(or something with a well-defined API to C).  But that is not a good 
analogy in this case. A better analogy would be having some Perl 
scripts that manipulated text which happened to be, say, a Java 
listing, and claiming that Perl was Java.

>From a formalist's point of view, I take your point that C+libraries 
>is not the same as the C language.  But this use of libraries is 
>something that happens commonly in practice, and I think it would be 
>most useful to have a way of (and terminology for) dealing with this.

I think we have the analogy to the function library already: it would 
be an collection of RDF ontologies on a website somewhere that 
defined the meaning of some generally useful properties *in RDF*.

>[...]
>
>When Dan said:
>>>So going back to my original claim that all DAML+OIL instance data is RDF
>>>instance data...
>
>I thought this was a finely crafted description that stands up, even 
>if the intended statement is not "in" RDF.  I'm also hopeful that 
>your work on closures will help us to realize some of the extension 
>paths that are implied here.

Well, OK, maybe I was being overly picky. But I do want to be more 
careful than we often seem to be about claiming that RDF is some kind 
of universal semantic solvent just because it can use character 
strings, or because it can encode any graph structure, or whatever.

Pat
-- 
---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



