docno="lists-048-8583747"
received="Wed Oct 17 04:40:36 2001"
isoreceived="20011017084036"
sent="Wed, 17 Oct 2001 09:45:11 +0100"
isosent="20011017084511"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="Re: DPH"
id="3BCD4517.70792FEC@hplb.hpl.hp.com"
charset="us-ascii"
inreplyto="EMEKICCGFEKJFGKMFLEPEEHFDMAA.rdaniel&#64;interwoven.com"
expires="-1"


To:w3c-rdfcore-wg@w3.org



>
> 
> Ron:
> > > Canonicalizing the literal just makes things hard for the
> > > DPH, which will in turn limit the use of RDF.
> >
> > DPH ? Perl Hacker ?
> 
> Desperate Perl Hacker. Origin of term seems to be Jon Bosak in
> the original XML group, exhorting others to keep things simple
> so that the DPH could write simple code to operate on XML as
> strings and get reasonable results. One example of this is
> that end tags must contain the element type, not just </>.
> Longer, but less need use a stack to keep track of scope.
> Didn't really agree with it at the time, but I do now.
> 
> Ron
> 

I note that much of what we are doing should be irrelevant to the DPH. 

Take an app to do with collecting metadata and moving it from one
document to another. The identity issues that the whole of the bNode
stuff resolves around are irrelevant. Similarly the exact string
representation of a parseType="Literal" in the graph is irrelevant. The
graph theoretic view may inform the DPH about what they are doing but
they are unlikely to have an advanced implementation that needs to be
able to ask questions about equality and identity. For
parseType="Literal" if they spit out some string in an XML/HTML context
in which that string is functionality equivalent to whatever we may
decide is the 'right' answer then the DPH has done their job. Externally
their work is indistinguishable from a conformant implementation, hence
it is a conformant implementation; even if they have taken a lot of
short cuts and don't have an existential qualifier or a namespace in
sight!

Jeremy



