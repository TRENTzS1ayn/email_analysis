docno="lists-048-9585753"
received="Sat Oct 20 10:43:12 2001"
isoreceived="20011020144312"
sent="Sat, 20 Oct 2001 09:43:08 -0500"
isosent="20011020144308"
name="Dan Connolly"
email="connolly@w3.org"
subject="Re: Active issue rdfms-graph; formal description of properties ofan      RDF graph"
id="3BD18D7C.9F5FED05@w3.org"
charset="us-ascii"
inreplyto="p0510100cb7ebd1b75592&#64;[205.160.76.193]"
expires="-1"


To: Pat Hayes<phayes@ai.uwf.edu>
CC:w3c-rdfcore-wg@w3.org,pfps@research.bell-labs.com

[It seems that folks have taken the lack of a reply
from me as agreement; not so...]

Pat Hayes wrote:
> 
[...]
DanC:
> >I suggest, again, the following simple abstract syntax:
> >
> >   An RDF graph is a set of triples <S, P, O>; each
> >   of S, P, O is a term; a term is either an absolute
> >   URI reference, a bNode, or a literal.
> >   --
> >http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2001Oct/0140.html
> >
> 
> Well, I'm happy to go along with the more liberal labelling rules, to
> be sure. These restrictions only make life more complicated by the
> need to avoid exceptional cases in the model theory, closure rules,
> etc.. (One of the reasons why I laid out all those conditions on N
> and E labels was to make it easy to erase them one at a time :-)
> 
> But this abstract syntax is really just N-triples,

It's very close to N-triples... that is: N-triples is designed
to closely model this abstract syntax, yes...

> and I prefer to
> keep the graph as a separate entity.

This sort of graph is separate. N-triples syntax is a BNF sort
of thing: the statements are ordered; there's whitespace
and punctuation, etc. bNodes have a particular
syntactic representation, etc. In the graph formalism
I'm suggesting, the only thing we specify about
bNodes is that they're different from absolute
URI references and literals.


> >The model theory straightfowardly applies to this liberal
> >syntax, I believe. Regarding scope, I think it's straightforward
> >to treat bNodes the way local variables are treated in
> >traditional logical syntax: you rename them as necessary
> >when you merge graphs.
> 
> Yes, it CAN be done that way. I think its uglier, and also it is kind
> of cheating, since right now we don't have anything in RDF syntax
> (not even in Ntriples) to specify the 'document' boundary. And
> remember how much trouble we had with this at the F2F?

Yes, we do have something in RDF synatax and in n-triples
to specify the document boundary: the document boundary
itself.

http://www.w3.org/TR/2001/WD-rdf-testcases-20010912/#ntripleDoc
http://www.w3.org/TR/2001/WD-rdf-syntax-grammar-20010906/#RDF

We don't have a way of putting two scopes
into one document, but that's by design
(or: by design limitation, as one of our issues suggests).

And no, I don't remember how much trouble we had with
this at the F2F; I wasn't there the 2nd day. The
previous model theory, which was based on n-triples
concrete syntax, worked just fine for me.

Let me review the record of the 2nd day...

It seems to come down to this:

  Pat: the realization that I have, if I do the MT as attached
  to the graph, then issues like scope of exist quant
  go away becauset there are no scopes in the graph.

  --
http://www.w3.org/2001/sw/RDFCore/20010801-f2f/2001-08-02.html#T16-15-50

If you substitute "set of triples..." as above
for graph, the epiphany holds, no?

-- 
Dan Connolly, W3C http://www.w3.org/People/Connolly/



