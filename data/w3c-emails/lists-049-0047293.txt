docno="lists-049-0047293"
received="Sat Apr  6 16:24:22 2002"
isoreceived="20020406212422"
sent="Sat, 6 Apr 2002 22:23:39 +0100"
isosent="20020406212339"
name="Jos De_Roo"
email="jos.deroo.jd@belgium.agfa.com"
subject="Re: daml:collection"
id="OF3237ADDD.17A0C9B9-ONC1256B93.006DBD85@agfa.be"
charset="us-ascii"
inreplyto="daml:collection"
expires="-1"

To:"Brian McBride<bwm"<bwm@hplb.hpl.hp.com>
Cc:"Pat Hayes<phayes"<phayes@ai.uwf.edu>,"w3c-rdfcore-wg"<w3c-rdfcore-wg@w3.org>



>>PS. So here is the formal proposal we make to WEBONT. We say that
>>
>>1. Whereas WEBONT needs to encode complex syntactic structures in RDF
>>triples, and requires some structuring primitives to enable it to do
that; >>and
>>2. Whereas the current RDF container model is apparently inadequate for
>>this task, by virtue of the there being no way to mark the end of a
>>container or specify an exact size for the container; and

well, I now think there is no problem...
at least not in the case that the container is a bNode
in one document one can add as many elements as one wants
but another document can never add to that bNode
(that's why we have bNodes and relabeling)
so the end is *within* the document
No???
also an empty container is just _:x rdf:type rdf:Seq .

>>3. By virtue of the fact that to provide such a facility in RDF would be
a
>>major change to the RDF language and data model, effectively introducing
a
>>form of negation into the language,
>
>Owwwwwwwwww!  I thought I asked you about that before.  Obviously I didn't
>understand the reply.  OK another strong technical reason about where it
>should be spec'd.
>
>>  and would therefore be an unacceptable burden to the RDF core WG;
>>THEREFORE
>>4. The RDF core WG respectfully suggests to the WEBONT WG that it adopt
>>the following CONVENTION: that for purposes of WEBONT, a particular
>>individual be chosen to be the end-of-syntactic-container entity, by
>>analogy with NIL in LISP; and that for WEBONT purposes, any RDF container
>>used for syntactic encoding of WEBONT expressions (or for whatever other
>>purposes that WEBONT shall, in its total discretion, decree to be of
>>utility to itself) shall be understood to contain only those elements
>>which are lower, in the RDF ordering defined by the numerical indices of
>>the RDF container properties, than the index of the lowest-numbered
>>occurrence of said particular individual.
>
>Just out of curiosity, have you been talking to lawyers a lot recently :)

strange, isn't it?

>The situation is that we've got a little subgroup of RDF and WEBONT folks
>tasked with proposing a solution to this (I believe, DanC, Jos, possibly
>Lynn, possibly another).  It would nice if that group were to make the
>proposal.  I think at this stage, we have had a discussion within RDFCore
>about it, Jos being present, and we are making an informal suggestion to
>the group at this time about how this could be accomplished.  More a sort
>of "Well, could you do it this way guys."
>
>It would be good to get it sorted out quickly though, so some progress at
>the webont f2f would be good.

will do our best

--
Jos

PS rdf:Seq and rdf:li are a kind of iterative notation
   whereas owl:first, owl:rest and owl:nil are recursive
   and I still think the latter is a better way to deal
   with lists, at least that's what I found in
   http://www.agfa.com/w3c/euler/owl-rules.n3
   in which  o  is syntactic sugar for  o
             |                          |
             V                          V

           ( :a )               _:x owl:first :a .
                                _:x owl:rest owl:nil .

           ( :a :b )            _:x owl:first :a .
                                _:x owl:rest _:y .
                                _:y owl:first :b .
                                _:y owl:rest owl:nil .

           ( :a / :b)           _:x owl:first :a .
                                _:x owl:rest :b .

           ( )                  _:x owl:rest owl:nil .



