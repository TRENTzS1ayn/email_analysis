docno="lists-049-1245988"
received="Tue Apr 16 02:24:32 2002"
isoreceived="20020416062432"
sent="Tue, 16 Apr 2002 09:27:22 +0300"
isosent="20020416062722"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: Denotation of datatype values"
id="B8E19EFA.132AB%patrick.stickler@nokia.com"
charset="US-ASCII"
inreplyto="p05101517b8e0e6008df2&#64;[65.217.30.94]"
expires="-1"

To: Pat Hayes<phayes@ai.uwf.edu>
CC: RDF Core<w3c-rdfcore-wg@w3.org>


On 2002-04-15 23:33, "ext Pat Hayes" <phayes@ai.uwf.edu> wrote:


>> The goal of RDF Datatyping is to provide applications with Datatyped Literal
>> pairings.
> 
> I think that this way of phrasing it might be potentially misleading,
> since it suggests that the pairings are actually in the MT.

Perhaps they should be.

>> I do admit that this conceptual model of datatyped literal pairings is
>> at a level above the graph MT proper, and the MT and datatyping MT apply
>> only to the idioms than to what the idioms fully represent. A datatyped
>> literal pairing has no explicit definition in the MT nor any explicit
>> denotation in the graph.
> 
> Which is why it might be best omitted, maybe? At least from a first
> explanation.

No. I think that it will help less-technical folks who won't grok
the MT understand the who point of the different idioms. The goal
is to somehow get a literal within the context of a datatype so
that it can be interpreted (i.e. a datatyped literal pairing) and
there are various idioms that can be used to do that, and each
idiom has its pros/cons depending on the other needs of the user.

But RDF Datatyping is all about interpreting a literal within
a datatype context. That really is the heart of things. And
thus, the pairing of a literal with a datatype really is the
basis for RDF Datatyping. Everything else is a means to that
end.

Personally, I'd like to see the datatyped literal pairing
reflected in the MT.

>> The separation of the MT/Idiom level from the conceptual datatyped
>> literal pairing level also gives us more liberty in the future
>> for defining new idioms (e.g. if literals become subjects) with
>> little to no impact to the higher levels based on the abstraction
>> of datatyped literal pairings.
> 
> I don't want to be a party-pooper, but I honestly feel that having an
> MT and sticking to it is one way to get past this kind of
> half-formalized (and rather confusing) kind of discussion. I do not
> know what these 'levels' are supposed to be, or how to recognize
> them, or how to evaluate talk about them, etc. etc. . Why not stick
> to the syntax and the MT, and just talk about that? Then everything
> is clear. What an application wants to do with an RDF graph is up to
> it, not up to us. All we can do is to provide application writers
> with a gold standard for meanings, and leave other 'layers' to them.

But we have been asked, to a certain extent, to provide an answer
that extends to the point of obtaining a datatype value unambiguously
and reliably. The present MT does not bring users to that point.
A datatyped literal pairing does -- insofar as it identifies a single
value which is obtainable by an application which groks the datatype
in question.

If you want the MT to go to that point, then great, let's have some
definition of the datatyped literal pairing in the MT ;-)

>> 
>> While we may want to re-examine extending the Datatyping MT to
>> provide some explicit definition of datatyped literal pairings,
>> the separation of levels between idioms and those pairings is,
>> I think, a good thing.
> 
> Maybe, but I don't think its our business to go past explaining the
> meanings of our idioms, and leave anything else to someone else. That
> would include pairings.

But the pairings are the whole point of the idioms. It is the pairings
that matter. The idioms are just a means to express datatyped literal
pairings.


>> But all idioms
>> produce the equivalent datatyping interpretation -- which is a datatyped
>> literal pairing.
> 
> Well, no. That is, in some sense the graphs do 'pair' a datatype with
> a literal: but speaking exactly, all the meanings in the idioms are
> determined by the constraints imposed on datatyping interpretations,
> and those have nodes denoting strings and maybe nodes denoting
> values, and maybe some arc labels with extensions which are datatype
> mappings (inverted), and that is all. Nothing in the graph denotes a
> "pairing", and there are no "pairings" in the universes of any
> interpretation.

Perhaps this is a shortcoming of the MT, then? Perhaps the pairings
should be in the universe of interpretation?

>> It does appear that the datatyping MT may not fully extend to that
>> point, and perhaps it should. Pat?
>> 
>> The example above of an RDF API that provides access at the level of
>> the datatyping interpretation is, I think, useful here. It would never
>> just return a property value of "25".
> 
> Well, it MIGHT. But in any case, so what? We aren't talking about
> APIs, we are talking about meanings. We havnt got a standard RDF API,
> so we neednt worry about it.

Actually, I consider what we are defining is an API for datatyped
literals, which permits applications and content producers to
interchange datatype values unambiguously and reliably between
disparate systems. This restricted API could then be a functional
component of a larger API for more general interaction with
RDF defined knowledge.

Patrick

--
               
Patrick Stickler              Phone: +358 50 483 9453
Senior Research Scientist     Fax:   +358 7180 35409
Nokia Research Center         Email: patrick.stickler@nokia.com



