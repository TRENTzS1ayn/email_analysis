docno="lists-049-1353270"
received="Tue Apr 16 07:49:14 2002"
isoreceived="20020416114914"
sent="Tue, 16 Apr 2002 14:52:00 +0300"
isosent="20020416115200"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: RDF datatyping, section 2.1"
id="B8E1EB10.13348%patrick.stickler@nokia.com"
charset="US-ASCII"
inreplyto="5.1.0.14.2.20020416091109.00aa0030&#64;joy.songbird.com"
expires="-1"

To: ext Graham Klyne<GK@ninebynine.org>, RDF Core<w3c-rdfcore-wg@w3.org>


On 2002-04-16 11:21, "ext Graham Klyne" <GK@NineByNine.org> wrote:

> [c.f. version 11-Apr-2002,  I'm dipping into the spec in pieces, so some of
> my comments are coming piecemeal.]
> 
> 
> Section 2.1:
> ------------
> I think the second sentence of section 2.1 should be stated more
> positively; e.g.
> 
> [[
> A datatype defines a mapping from literal strings to corresponding values.
> XML schema defines a number of datatypes that are usefully employed with RDF
> (numbers, dates, etc.).  The RDF datatyping framework supports the use of
> these datatypes, and any additional ones that may be defined.
> ]]
> 

Yes, quite. I knew it was stated a bit too strongly. I've adopted
your proposed rewording and softened the note about structured
datatypes. Thanks.

> Section 2.1.1:
> --------------
> The first paragraph has key concepts:  I suggest setting them out as a list
> to make them more visible.

I agree. Done.

> Do the concepts of "canonical lexical space" and "canonical mapping" really
> have any impact in the datatyping framework?  I don't see that they do, and
> therefore that they don't need to be described in the RDF core datatyping
> framework.  The three key concepts that serve my understanding are:
> - lexical space
> - value space
> - mapping fromn lexical to value space
> 
> If "canonical" representations are significant, then I would prefer to see
> them dealt with separately from these core concepts - in a separate section
> somewhere.

The following is a reply to this question I sent to Pat. It
may not be sufficiently motivating, but...


On 2002-04-16 1:01, "ext Pat Hayes" <phayes@ai.uwf.edu> wrote:
> Why do we need the canonical mappings, by the way? I don't think that
> RDF uses them in any way (?)

I've pondered this question myself. Though my present feeling is
that canonical mappings, even if not presently used (by RDF Datatyping)
are still a characteristic of an RDF Datatype and having the formal
definition can benefit applications which restrict lexical forms to
canonical representations.

A case in point, Nokia's Metia Framework datatypes only have
canonical mappings. And if canonical mappings have no formal
definition, then it's kinda hard to point to something
authoritative as to what Metia datatypes are constrained to
(not that I'm trying to write the rec specifically to Nokia's
needs, but rather, canonical mappings have common usage).

Also, the RDFL ontology for defining lexical datatypes and their
relations (http://www-nrc.nokia.com/sw/rdfl.html) provides a
property for relating datatypes which have a canonical subClassOf
relation. Again, if there is no formal definition of what a
canonical lexical space or canonical mapping is...

I also have been considering adding some verbage about the benefits
of canonical lexical representations with regards to generic
comparison of equality and graph compression (since literals
are tidy).

So, I think that it is useful to leave it in, and it doesn't
get in the way of anything else. It may even be used in a more
significant way in future incarnations of RDF Datatyping.


Cheers,

Patrick

--
               
Patrick Stickler              Phone: +358 50 483 9453
Senior Research Scientist     Fax:   +358 7180 35409
Nokia Research Center         Email: patrick.stickler@nokia.com



