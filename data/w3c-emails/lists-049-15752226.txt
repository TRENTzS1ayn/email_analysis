docno="lists-049-15752226"
received="Wed Feb 20 06:32:30 2002"
isoreceived="20020220113230"
sent="Wed, 20 Feb 2002 11:32:14 -0000"
isosent="20020220113214"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="RE: Outstanding Issues - rdfms-seq-representation"
id="JAEBJCLMIFLKLOJGMELDMEAPCDAA.jjc@hplb.hpl.hp.com"
charset="iso-8859-1"
inreplyto="5.1.0.14.0.20020211145304.02952ec0&#64;0-mail-1.hpl.hp.com"
expires="-1"

To:"Brian McBride"<bwm@hplb.hpl.hp.com>,"RDF Core"<w3c-rdfcore-wg@w3.org>



> rdfms-seq-representation:

>  The ordinal property representation of containers does not
> support recursive processing of containers in languages such as Prolog.

> Hmmm.  Anyone got a proposal for fixing this?

YAWN, hire a Prolog programmar.

e.g.
suppose we have a predicate
triple(Subject,Property,Object).
defining our RDF database

implement a predicate

rdf_n(Property,N)

that succeeds whenever N is a positive integer and Property is "rdf:_" N
appropriately expressed.

Then a bag for example would be:


rdfBag(URI,Contents) :-
   bagof( Object,
              [N,Property]^ ( triple(URI,Property,Object),
                              rdf_n(Property,N) ),
          Contents ).



For a sequence

rdfSeq(URI,Contents) :-
   bagof( N*Object,
              [Property]^ ( triple(URI,Property,Object),
                              rdf_n(Property,N) ),
          UnsortedContents ),
   sort(UnsortedContents, SortedContents ),
% line below will work but is not efficient.
   bagof( Object, [N]^member(N*Object,SortedContents),
     Contents ).

If you can't hack this then program in VB.


Jeremy



