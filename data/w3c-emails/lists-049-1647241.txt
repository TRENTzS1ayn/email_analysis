docno="lists-049-1647241"
received="Wed Apr 17 05:22:01 2002"
isoreceived="20020417092201"
sent="Wed, 17 Apr 2002 10:27:23 +0100"
isosent="20020417092723"
name="Graham Klyne"
email="Graham.Klyne@MIMEsweeper.com"
subject="Re: RDF Datatyping MT *does* define Datatyped Literal Pairings"
id="5.1.0.14.2.20020417100830.039d2470@joy.songbird.com"
charset="us-ascii"
inreplyto="B8E31234.13481%patrick.stickler&#64;nokia.com"
expires="-1"


To: Patrick Stickler<patrick.stickler@nokia.com>
Cc: Pat Hayes<phayes@ai.uwf.edu>, RDF Core<w3c-rdfcore-wg@w3.org>

At 11:51 AM 4/17/02 +0300, Patrick Stickler wrote:
>On 2002-04-16 23:24, "ext Graham Klyne" <Graham.Klyne@MIMEsweeper.com>
>wrote:
>
> > At 08:09 PM 4/16/02 +0300, Patrick Stickler wrote:
> >
> >>>    Jenny age "10" .
> >>>    age rdfd:range xsd:integer .
> >
> >> ... the combination of the
> >> inline idiom and the rdfd:range/datatype assertion designates
> >> the pairing <xsd:integer, "10"> and that pairing is the basis
> >> for any datatyping interpretation. I.e., the knowledge in the
> >> graph unambiguously identifies a single value by designating
> >> a datatyped literal pairing. What that actual
> >> value is, we don't know *at this level*. But at a higher level
> >> where the full knowledge of xsd:integer is available, then
> >> we know that the pairing <xsd:integer, "10"> identifies the
> >> value ten.
> >>
> >> The RDF Datatyping MT is not saying the value is ten. It is
> >> saying that it is whatever value is identified by the interpretation
> >> of the lexical form "10" within the context of the datatype
> >> xsd:integer.
> >>
> >> That may seem like a very slight distinction, but it is
> >> a very significant one.
> >
> > Slight, maybe.  Significant, definitely, in the sense that (as far as I can
> > tell) it goes beyond that which is specified by the model theory.
>
>No, it does not go beyond the MT. It is exactly what the MT states.
>
>The present datatyping MT says for this particular example:
>
>--
>
>(3) ... if E contains the triples
>
>    <ex:age, rdfd:datatype, xsd:integer>
>    <Jenny, ex:age, "10">
>
>then L2V(I(xsd:integer))("10") is defined;
>i.e. "10" is in the lexical space of I(xsd:integer).
>
>--
>
>Thus the literal "10" is a member of the lexical space
>of xsd:integer, and there is only one member of the value space of
>xsd:integer represented by "10", therefore according to the
>datatype xsd:integer, the value indicated by the above statements
>is ten.
>
>I.e. the datatype-specific interpretation of the above
>RDF knowledge is that Jenny's age is ten. Granted, the value
>ten has no denotation in the graph, but it is unambiguously
>identified by the idiom, in the context of the full semantics
>of xsd:integer.

OK, lets revert to a test case:

     foo rdfd:range xsd:integer .
     foo rdfd:range xsd:string .
     Jenny foo "10" .

I believe this is completely valid according to Pat's last datatype spec 
[1], but how am I to decide which rdfd:range applies in determining the 
intended value of Jenny's 'foo'?

As far as I can tell, the rest of your message deals with additional 
inferences that you might care to draw, but which are not sanctioned by the 
model theory.  I searched the text of Pat's proposal [1] (our stake in the 
ground), and found no occurrence of the word "pair" or "pairing".

#g
--

[1] http://www.coginst.uwf.edu/users/phayes/simpledatatype23-02-2002.html

[[[
Similarly, if two different rdfs:drange assertions are made about the same 
property, then they both apply to it. If the relevant datatypes have 
disjoint lexical spaces, or if their lexical-to-value maps fail to give the 
same values to a lexical form, then any use of the property with a literal 
is likely to produce a datatype clash. This requires particular care when 
merging information from different graphs which may have been written with 
different, and incompatible, conventions about literal datatyping.
]]]




>Now, some folks seem to assert that all the datatyping MT asserts
>is that "10" is a valid lexical form for xsd:integer, but
>given the definition of datatypes, everything else follows
>automatically so I don't see the real distinction.
>
>It is true that at the RDF MT level, it is not possible to
>know which value is indicated -- but it is possible to
>know that a single specific value is indicated, and know
>that it is the value represented by the particular lexical
>form according to the semantics of a particular datatype.
>
>To state that a given literal is a member of the lexical
>space of a particular datatype is to associate that literal
>with the datatype -- is to define a datatyped literal pairing.
>
>    L2V(I(xsd:integer))("10") is a datatyped literal pairing.
>    Datatyped literal pairings thus have definition in the MT.
>
>let me repeat that in case some of you missed it ;-)
>
>    L2V(I(xsd:integer))("10") is a datatyped literal pairing.
>    Datatyped literal pairings thus have definition in the MT.
>
>Thus, what the RDF MT provides is a datatyped literal pairing
>which may be evaluated at a level above RDF by an application
>with the full knowledge of the datatype in question in order
>to obtain the actual value.
>
>Patrick
>
>--
>
>Patrick Stickler              Phone: +358 50 483 9453
>Senior Research Scientist     Fax:   +358 7180 35409
>Nokia Research Center         Email: patrick.stickler@nokia.com

-------------------
Graham Klyne
<GK@NineByNine.org>



