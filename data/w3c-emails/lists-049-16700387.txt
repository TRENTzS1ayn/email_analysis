docno="lists-049-16700387"
received="Sat Feb 23 06:47:20 2002"
isoreceived="20020223114720"
sent="Sat, 23 Feb 2002 11:47:03 -0000"
isosent="20020223114703"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="Datatypes: unhappy of Bristol"
id="JAEBJCLMIFLKLOJGMELDKEBNCDAA.jjc@hplb.hpl.hp.com"
charset="us-ascii"
inreplyto="p05101426b89c3caa4f70&#64;[65.212.118.219]"
expires="-1"

To:"Pat Hayes"<phayes@ai.uwf.edu>,"Patrick Stickler"<patrick.stickler@nokia.com>
Cc:<w3c-rdfcore-wg@w3.org>



Despite DanC's wanting people to accept votes that go against them, I feel
that part of the consensus process is for people who are deeply unhappy with
the way things are going to explain why. Then the rest of group can listen,
and hopefully take on board the issues.

I can go along with the first three positions decided at the telecon ( S-B
style idiom, tidiness, no doublet) but I object very strongly to retaining
the triplet.

I don't think the triplet fits at all with the S-B approach that the
majority of the group favour.

The S-B style says that in the triple
  <Jenny> <ageB> "10".
Jenny's age is a string (range constraints do not change this).
The triplet approach (aka S-A) permits us to say something like:

<Tommy> <ageA> _:b .
_:b <integer> "10" .

and Tommy's age is the integer 10.

Whatever we do to the range constraints, or however clever we are with the
age properti(es) I do not believe we can get the entailment:

<Jenny> <age> _:x .
<Tommy> <age> _:x .

i.e. that Jenny and Tommy have the same age. They don't: one has an age
which is an integer, the other has an age which is a string; but both have
been alive the same length of time!
[I am being deliberately vague about the exact property names, maybe they
are all the same].

I can live with the S-B idiom and semantics. I really like the S-A idiom and
semantics. But they don't fit together. Providing two incompatible means to
say the same sort of thing seems to me to be the very worst of design by
committee.

If we are so committed to the S-B idiom and tidyness then in my view we
should drop the desire to have a local datatyping idiom, because we have not
found a local datatyping idiom that is compatible with S-B and tidyness.

I think Pat's simpledatatypes2 is magic and I regret that we have not been
allowed to consider it.

Jeremy


More for the diehards ...
=========================

We have talked about the line between the application datatyping and the
datatyping within RDF. In S-A and S-B this line is drawn at a very different
place, and I believe that if we choose both then this will be an ongoing and
festering sore of confusion.
If we are going to limit datatyping to checking that strings are in lexical
spaces, let's do that. If we are going to use datatyping to deliver typed
values, let's do that. But trying to do both to please two different
constituencies within the WG is a mistake.

From a process point I prefer us considering coherent proposals as whole
items, rather than having a shopping list of features so that the final
requirements may or may not be satisfiable.



