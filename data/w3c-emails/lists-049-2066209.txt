docno="lists-049-2066209"
received="Thu Apr 18 14:24:50 2002"
isoreceived="20020418182450"
sent="Thu, 18 Apr 2002 15:25:37 +0300"
isosent="20020418122537"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: RDF Datatyping MT *does* define Datatyped Literal Pairings"
id="B8E495F1.135C6%patrick.stickler@nokia.com"
charset="US-ASCII"
inreplyto="p05101504b8e392682998&#64;[65.217.30.94]"
expires="-1"

To: Pat Hayes<phayes@ai.uwf.edu>
CC: RDF Core<w3c-rdfcore-wg@w3.org>


On 2002-04-18 0:14, "ext Pat Hayes" <phayes@ai.uwf.edu> wrote:


>>>> The RDF Datatyping MT is not saying the value is ten. It is
>>>> saying that it is whatever value is identified by the interpretation
>>>>  of the lexical form "10" within the context of the datatype
>>>> xsd:integer.
> 
> That is meaningless or false, Im not sure which. There is no notion
> of 'context' in RDF, and the interpretation in fact says that the
> value of the property is a string, not an integer.

You're misunderstanding my use of the word 'context'. I've already
said so. So I guess I'll just stop talking since we don't seem
to have any common language by which to communicate.


>> then L2V(I(xsd:integer))("10") is defined;
>> i.e. "10" is in the lexical space of I(xsd:integer).
> 
> Right. Notice that is ALL it says in this case. It doesn't mention
> the datatype value.

It it doesn't mention/equate to the value, then what utility
is saying I(ccc) = L2V(I(ddd))("LLL")?

Is there a single, specific value defined here or not?

>> Thus the literal "10" is a member of the lexical space
>> of xsd:integer, and there is only one member of the value space of
>> xsd:integer represented by "10", therefore according to the
>> datatype xsd:integer, the value indicated by the above statements
>> is ten.
> 
> Im not sure what 'the value indicated' means, but this certainly does
> NOT say that Jenny's age is ten. It says that the ex:age of Jenny is
> the string "10". It doesn't say anything about the datatype value.

If the point of constraining "10" to the lexical space of xsd:integer
is not to indicate/identify the value ten, then I see no point
in the idiom.

Yes, the value of the ex:age property is a literal node "10" which
denotes itself.

But the combination of the literal node and the rdfd:datatype
assertion "expresses" the value ten.

If it didn't then it wouldn't be useful as a datatyping idiom.

No, RDF does not know about the value ten, but the idiom provides
an association between the literal "10" and the datatype xsd:integer
which together provide the value ten.

That's the only point to datatyping.

There may be other reasons to use that idiom, but that's not
DATA-TYPING. That's something else.

>> I.e. the datatype-specific interpretation of the above
>> RDF knowledge is that Jenny's age is ten.
> 
> WRONG. It is the string "10", with or without datatyping.  All that
> the datatyping adds to this is check on the lexical form, which would
> rule out for example
> 
> Judy <ex:age> "boodle" .
> 
> as ill-typed.
> 
> To conclude that Jenny's ex:age is ten would be a mistake, an invalid
> inference. We should make this painfully clear to users, so they do
> not get their RDF in a muddle.

I didn't say Jenny's ex:age was ten. I said Jennys age was ten.

>> Granted, the value
>> ten has no denotation in the graph, but it is unambiguously
>> identified by the idiom, in the context of the full semantics
>> of xsd:integer.
>> 
>> Now, some folks seem to assert that all the datatyping MT asserts
>> is that "10" is a valid lexical form for xsd:integer,
> 
> Yes, exactly. That is all it asserts in this case, and it is very
> important that it does not assert more, or else the DCore-style
> applications will break.

We seem to simply be talking past each other here. For me,
to say that "10" is a lexical form of xsd:integer is to
identify the value ten.

The MT meaning of the specific literal node may not be ten,
but the meaning expressed by the combination of the literal
form and the associated datatype is ten. If it weren't then
it is useless for datatyping.

The point of datatyping is to get to datatype values, not
just valid lexical forms. The only difference IMO between
the inline and lexical form idioms is that the former has
no denotation of the value itself in the graph and the
latter does -- but their purpose is the same, to express
the identity of a datatype value.

>>  but
>> given the definition of datatypes, everything else follows
>> automatically
> 
> ?? What else follows automatically?
> 
>> so I don't see the real distinction.
>> 
>> It is true that at the RDF MT level, it is not possible to
>> know which value is indicated
> 
> No, the MT *specifies* which value is indicated. That is what the MT
> is for. And in this case, the value of the property is a string.

I'm looking at what is "specified" by the literal node and
datatype in combination.

I have never asserted that the literal node does not denote
itself, the string.

>> -- but it is possible to
>> know that a single specific value is indicated, and know
>> that it is the value represented by the particular lexical
>> form according to the semantics of a particular datatype.
>> 
>> To state that a given literal is a member of the lexical
>> space of a particular datatype is to associate that literal
>> with the datatype
> 
> Yes, in a sense. Id rather say that the statement arises from a
> particular kind of association, as specified in the RDF graph syntax,
> since different 'associations' have different meanings.
> 
>> -- is to define a datatyped literal pairing.
> 
> No. Pairings aren't in the syntax and aren't mentioned in the MT.
> 
>> 
>>    L2V(I(xsd:integer))("10") is a datatyped literal pairing.
> 
> No, it isn't. In fact, it is a datatype value, viz the number ten

Well, above you say it doesn't mention the datatype
value. Does it or doesn't it?

> (obtained by applying the lexical-to-value map L2V(I(xsd:integer)) to
> the argument "10"; the former itself being obtained by applying the
> global L2V mapping to the datatype I(xsd:integer) denoted by the
> uriref.)

You misunderstood me.

I did not say it is equal to a datyped literal pairing but that
the expression itself is the pairing of a literal and datatype
having the result of the actual value.

But nevermind, if the terminology is so problemmatic for
you, I'll just remove it (though I feel to the detriment
of alot of less-technical RDF users)

Patrick

--
               
Patrick Stickler              Phone: +358 50 483 9453
Senior Research Scientist     Fax:   +358 7180 35409
Nokia Research Center         Email: patrick.stickler@nokia.com



