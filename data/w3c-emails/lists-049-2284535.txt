docno="lists-049-2284535"
received="Thu Apr 18 18:35:30 2002"
isoreceived="20020418223530"
sent="Thu, 18 Apr 2002 17:35:17 -0500"
isosent="20020418223517"
name="Pat Hayes"
email="phayes@ai.uwf.edu"
subject="Re: Missing support for datatype property idiom in datatyping MT?"
id="p05101533b8e4f74261b3@[65.217.30.94]"
charset="us-ascii"
inreplyto="B8E4DE2B.135DC%patrick.stickler&#64;nokia.com"
expires="-1"


To: Patrick Stickler<patrick.stickler@nokia.com>
Cc:w3c-rdfcore-wg@w3.org

>On 2002-04-18 0:21, "ext Pat Hayes" <phayes@ai.uwf.edu> wrote:
>
>>>  Pat,
>>>
>>>  Should the datatyping MT include the following, to specify the
>>>  interpretation of the blank node and literal for the datatype
>>>  property idiom?
>>>
>>>  For any literal "LLL", if E contains the triples
>>>
>>>     <ddd, rdf:type, rdfd:datatype>
>>>     <bbb, aaa, ccc>
>>>     <ccc, ddd, "LLL">
>>
>>  Is this the new Ntriples notation? (Did I miss something?)
>>
>>>  then I(ccc) = L2V(I(ddd))("LLL") is defined
>>>
>>>  ???
>>
>>  I think the best way to do this would be to say that there just is a
>>  notion of a datatype, that L2V is always defined on datatypes (both
>>  being global semantic assumptions) and the semantic condition on
>>  rdfd:datatype is that ICEXT(I(rdfd:datatype)) contains only
>>  datatypes. Then the rest follows from this. That would be preferable
>>  to imposing an extra semantic condition onto rdf:type.
>
>I don't see how you are adding any semantics to rdf:type. You are
>simply saying that ddd is a member of the class rdfd:Datatype,
>and we've defined what the properties must be for all members of
>that class, namely a lexical space, a value space, a lexical
>to value mapping, etc. etc.


Sorry, I may have misunderstood your question. The current MT says in 
this case that I(ccc)=L2V(I(ddd))("LLL"), right? Assuming I(ddd) is a 
datatype, that is. But since the condition on rdfd:datatype 
(shouldn't that be rdfd:Datatype, BTW??) is that the first triple 
requires I(ddd) to be a datatype, that is all that is required, right?

If "LLL" isn't in the lexical space of L2V(I(ddd)), then the semantic 
condition on the final triple will fail and the triple won't be true 
in a datatyped interpretation. But it is still meaningful: its just 
what one might call datatype-false, as for example

_:x  xsd:number "MickeyMouse" .

which says that a number exists whose xsd:number form is 
"MickeyMouse"; which is clear and unambiguous and meaningful, but 
false. So we don't really need to add the 'is defined' condition, 
because if that condition fails then the triple is false already. 
Assertions in a 2-valued logic have an implicit assumption that they 
are meaningful  kind of built into them, since they have to be false 
if they can't possibly be true.

>
>>  The corresponding API would be that whenever it finds or concludes a
>>  triple of the form
>>
>>  ddd rdf:type rdfd:datatype .
>>
>>  a datatyping RDF engine ought to take the uriref <ddd> and try to
>>  find its datatyping specification in some usable form, and complain
>>  if it can't find it.
>
>This is all true, but... that's not actually what I was asking ;-)

No, but I wasnt sure if it might have been relevant, sorry.

>
>Rather, do we need a rule that assigns the datatype value
>to the bnode of the datatype property idiom? Defintion 4 does this
>for the lexical form idiom. It seems that there should be
>an analogous MT definition for the datatype property idiom.
>

Oh, I see. We have it already, in the definition of the IEXT of the 
property value for a datatype property. The equation above follows 
from that.

Pat
-- 
---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



