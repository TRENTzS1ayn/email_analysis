docno="lists-049-2549890"
received="Fri Apr 19 04:56:49 2002"
isoreceived="20020419085649"
sent="Fri, 19 Apr 2002 09:32:02 +0100"
isosent="20020419083202"
name="Graham Klyne"
email="Graham.Klyne@MIMEsweeper.com"
subject="Re: Denotation of datatype values"
id="5.1.0.14.2.20020419090608.04319060@joy.songbird.com"
charset="us-ascii"
inreplyto="p0510152eb8e4e388c266&#64;[65.217.30.94]"
expires="-1"


To: Pat Hayes<phayes@ai.uwf.edu>
Cc: Patrick Stickler<patrick.stickler@nokia.com>,w3c-rdfcore-wg@w3.org

At 04:17 PM 4/18/02 -0500, Pat Hayes wrote:
>>>  Some of our customers definitely do not want to be located there.
>>>  They WANT to be able to be sloppy about datatype values, mix talk of
>>>  strings with talk of integers, etc., and still they want to invoke
>>>  lexical form checking using datatypes.
>>
>>I understood the concerns/desires differently. I heard that they
>>wanted to be able to use the inline idiom and leave the interpretation
>>entirely to the application, or at most, indicate which datatypes
>>should apply to the interpretation of which literal values.
>>
>>But perhaps you're right, and I've misunderstood...
>
>Well, check this out with Graham.

Well, speaking for CC/PP, as currently designed (and, by association, 
UAProf as I understand it's currently implemented):

The starting point is this:  the applications uses literals in places where 
the intent is to express a number, or some other value;  e.g. something 
akin to:

     HardwarePlatform ex:dpi "100" .

The _implementations_ to date interpret this as meaning a display 
resolution in dots-per-inch is 100 (the number).  Yes, I know this is what 
Patrick argues for -- BUT (and this is a big "BUT") it's the application 
that makes that interpretation, not RDF as described by Pat's document [1].

I would like it to be otherwise --i.e. RDF datatyping would provide the 
interpretation of "10" as a number-- but I can also accept that it's not 
absolutely necessary for CC/PP to work pretty much as designed, with 
extra-RDF help from the CC/PP applications.  For this reason, I personally 
preferred Pat's previous proposal [2], but that is ruled out on the grounds 
of requiring tidy literals.

CC/PP has no requirement for the entailments that depend on tidy 
literals.  Typical CC/PP might include something like:

     :HardwarePlatform ccpp-attribute:dpi "100" .
     :SoftwarePlatform ccpp-attribute:softwareVersion "100" .

with no intended relationship between the two instances of "100".

But the current tidy literals proposal [1] can work with CC/PP by virtue of 
pushing interpretation of the literals into the application (which knows 
about the properties).  The _application_ may choose to notice rdfd:range 
properties and apply corresponding interpretations, but that is 
_application_ knowledge being applied, not RDF semantics.  (Yes, it would 
be nice if RDF semantics covered this, but I've already mentioned that.)

(And as a parting shot:
[1] requires changes to CC/PP schema as currently drafted,
[2] I think does not.)

#g
--

[1] http://www.coginst.uwf.edu/users/phayes/simpledatatype23-02-2002.html

[2] http://www.coginst.uwf.edu/users/phayes/simpledatatype2.html


-------------------
Graham Klyne
<GK@NineByNine.org>



