docno="lists-049-2582905"
received="Fri Apr 19 05:17:05 2002"
isoreceived="20020419091705"
sent="Fri, 19 Apr 2002 12:19:59 +0300"
isosent="20020419091959"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: Denotation of datatype values"
id="B8E5BBEF.137A4%patrick.stickler@nokia.com"
charset="US-ASCII"
inreplyto="5.1.0.14.2.20020419090608.04319060&#64;joy.songbird.com"
expires="-1"

To: ext Graham Klyne<Graham.Klyne@mimesweeper.com>, Pat Hayes<phayes@ai.uwf.edu>
CC: RDF Core<w3c-rdfcore-wg@w3.org>


On 2002-04-19 11:32, "ext Graham Klyne" <Graham.Klyne@MIMEsweeper.com>
wrote:

> At 04:17 PM 4/18/02 -0500, Pat Hayes wrote:
>>>>  Some of our customers definitely do not want to be located there.
>>>>  They WANT to be able to be sloppy about datatype values, mix talk of
>>>>  strings with talk of integers, etc., and still they want to invoke
>>>>  lexical form checking using datatypes.
>>> 
>>> I understood the concerns/desires differently. I heard that they
>>> wanted to be able to use the inline idiom and leave the interpretation
>>> entirely to the application, or at most, indicate which datatypes
>>> should apply to the interpretation of which literal values.
>>> 
>>> But perhaps you're right, and I've misunderstood...
>> 
>> Well, check this out with Graham.
> 
> Well, speaking for CC/PP, as currently designed (and, by association,
> UAProf as I understand it's currently implemented):
> 
> The starting point is this:  the applications uses literals in places where
> the intent is to express a number, or some other value;  e.g. something
> akin to:
> 
>    HardwarePlatform ex:dpi "100" .
> 
> The _implementations_ to date interpret this as meaning a display
> resolution in dots-per-inch is 100 (the number).  Yes, I know this is what
> Patrick argues for -- BUT (and this is a big "BUT") it's the application
> that makes that interpretation, not RDF as described by Pat's document [1].

I'm not arguing that the literal node all by itself denote the value.

But that it is clear that the presence of both the literal value and
an rdfd:datatype assertion communicates to the application that
the literal is intended to be interpreted by the application as a lexical
form of the specified datatype which represents a specific value of
that datatype.

The application-level interpretation is not left implicit for the
application to guess, but rather, one application can unambiguously
communicate which datatype should govern the interpretation of
particular property values.

> I would like it to be otherwise --i.e. RDF datatyping would provide the
> interpretation of "10" as a number-- but I can also accept that it's not
> absolutely necessary for CC/PP to work pretty much as designed, with
> extra-RDF help from the CC/PP applications.

I honestly don't see why RDF Datatyping cannot provide that consistent
unambiguous interpretation/knowledge even though it doesn't always
provide explicit denotation of the value in the graph.

But hey, maybe I'm just that stupid.

> But the current tidy literals proposal [1] can work with CC/PP by virtue of
> pushing interpretation of the literals into the application (which knows
> about the properties).  The _application_ may choose to notice rdfd:range
> properties and apply corresponding interpretations, but that is
> _application_ knowledge being applied, not RDF semantics.  (Yes, it would
> be nice if RDF semantics covered this, but I've already mentioned that.)

I think it should cover such interpretations (and does at the moment).

Patrick

--
               
Patrick Stickler              Phone: +358 50 483 9453
Senior Research Scientist     Fax:   +358 7180 35409
Nokia Research Center         Email: patrick.stickler@nokia.com



