docno="lists-049-3992249"
received="Fri Apr 26 06:24:08 2002"
isoreceived="20020426102408"
sent="Fri, 26 Apr 2002 11:23:47 +0100 (BST)"
isosent="20020426102347"
name="Jan Grant"
email="Jan.Grant@bristol.ac.uk"
subject="Schema. (fwd)"
id="Pine.GSO.4.44.0204261120260.23534-100000@mail.ilrt.bris.ac.uk"
charset="US-ASCII"
expires="-1"

To: RDFCore Working Group<w3c-rdfcore-wg@w3.org>


Dan asked me to send this on-list. Mostly niggles.

The RDF Schema class and property system is similar to the type systems
of object-oriented programming languages such as Java.

I think this is disingenuous. It's not very like it at all,
_particularly_ not like Java. Practices in schema and ontology creation
(eg, making new superclasses when old subclasses are already
inexistence; general frivolous attitude towards cycles) aren't common in
most OO languages.

rdfs:Resource The class Resource.

Say more?

 rdfs:Class  The concept of Class
 rdf:Property  The concept of a property.
 rdfs:Literal This represents the set of atomic values,
 eg. textual strings.
 rdf:Statement  The class of RDF statements.
 rdfs:Container  This represents the set Containers.
 rdf:Bag  An unordered collection.
 rdf:Seq  An ordered collection.
 rdf:Alt  A collection of alternatives.
 rdfs:ContainerMembershipProperty
 The container membership properties,
 rdf_1, ... rdf_n, all of which are
 sub-properties of 'member'.

We've got concepts, classes and sets here. I know it's really tedious to
repeat the same phrase over and over, but people might ask: "do RDF
statements form a class? why not a set? What's this set Containers? etc."

rdfs:ClassThe class of all _rdfs:Class_es
rdf:propertyetc.

Literal: don't say "atomic". Atomic means "indivisible"; literals (even
the simple ones we're working with) have structure. That structure
might not be expanded in terms of nodes and arcs, but it's wrong to say
"the structure doesn't appear in the graph". It _does_ appear, but it's
bundled up into a literal node. Call it "The Class of literal values"
and point to the MT for a definition.

The only other thing is that I'd avoid rdf:_n unless you can italicise
or otherwise show that "rdf:_n" isn't one of these.


I'd also (I know it's late in the game) be inclined to float the
suggestion of "fixing" the rdfs:subClassOf & co. properties, deprecating
these in favour of names that are the right way around according to M+S,
and including entailment rules to show that they're the same thing.
(just make them circularly subproperties of their renamed versions)
- particularly if we're switching namespace.


-- 
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
Tel +44(0)117 9287088 Fax +44 (0)117 9287112 RFC822 jan.grant@bris.ac.uk
Whose kung-fu is the best?



