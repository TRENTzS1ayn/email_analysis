docno="lists-049-5809563"
received="Wed Aug  7 03:59:11 2002"
isoreceived="20020807075911"
sent="Wed, 7 Aug 2002 10:59:04 +0300"
isosent="20020807075904"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: Syntax-level typing (was Re: A data typing proposal)"
id="A03E60B17132A84F9B4BB5EEDE57957B160B64@trebe006.NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="Syntax-level typing (was Re: A data typing proposal)"
expires="-1"


To:<connolly@w3.org>
Cc:<melnik@db.stanford.edu>,<guha@guha.com>,<w3c-rdfcore-wg@w3.org>



> > And it requires no changes to RDF whatsoever. Just use a 
> URI to denote
> > the typed literal which denotes the value in question. Done.
> 
> ... It's critical that these expressions
> act like literals in the model theory. 

EH? They're URI denoted resources. Not literals.

> i.e. you can tell, 
> from the model
> theory, that
> 
>   val:(http://www.w3.org/2001/XMLSchema%23integer)15
> is not equal to
>   val:(http://www.w3.org/2001/XMLSchema%23integer)16

No, you can't. Since two different URIs can denote the same
resource, you can't know at the RDF level whether the above
do *not* equate to the same value.

Of course, you can't know that anyway, even if you just had
literals with  an associated datatype.

It may very well be the case that the datatype xsd:integer
maps both 15 and 16 to the very same datatype value.

So even some complex, structured/typed literal in the
graph syntax such as

   (xsd:integer)10

is not really a "literal" but is as globally unambiguous
as a URI, since that pairing of datatype and lexical 
form identifies one and only one datatype value! And
because it incorporates a URI as part of its structure,
either implicitly or explicitly.

In fact, what is being proposed is a fourth atomic graph 
component, in addition to URIrefs, bnodes, and literals -- which 
is a TDL!!! a Typed Data Literal -- and which unambiguously 
denotes a datatype value.

Kriminy!

You simply can't treat literals as global constants. They
are contextual. How may times do we have to go round this
issue before we get past it?!

Patrick



