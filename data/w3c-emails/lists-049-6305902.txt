docno="lists-049-6305902"
received="Fri Aug  9 07:17:09 2002"
isoreceived="20020809111709"
sent="Fri, 9 Aug 2002 12:08:30 +0100 (BST)"
isosent="20020809110830"
name="Jan Grant"
email="Jan.Grant@bristol.ac.uk"
subject="RE: What the #&#64;&amp;*$(!&#64; is going on here?! (was RE: N-Triples for                 proposed xsi:type [was Re: xsi:type test case ]"
id="Pine.GSO.4.44.0208091155590.3661-100000@mail.ilrt.bris.ac.uk"
charset="US-ASCII"
inreplyto="A03E60B17132A84F9B4BB5EEDE57957B5FBA72&#64;trebe006.NOE.Nokia.com"
expires="-1"

To:Patrick.Stickler@nokia.com
cc:"dave.beckett"<dave.beckett@bristol.ac.uk>, w3c-rdfcore-wg<w3c-rdfcore-wg@w3.org>,"Graham.Klyne"<Graham.Klyne@MIMEsweeper.com>, jjc<jjc@hplb.hpl.hp.com>



Pat, I mooted this ages ago with a pointer to
http://ioctl.org/rdf/literals; but...


On Wed, 7 Aug 2002 Patrick.Stickler@nokia.com wrote:

> 1. You're not going to have 'number(10)' in the graph. You'll
> have something like
>
>     (http://www.w3.org/2001/XMLSchema#integer)10
>
> and then you'll have to define most of the qualities that URIs
> have for tidyness, etc. for these new components of the graph,
> and every single parser and every single triples store will have
> to change to support the new, mostly redundant in nature, typed
> literal node.

Mine won't; it supported this from the beginning, because properly typed
literals seemed to be the natural way to support datatypes in RDF. (this
is, however, 3 1/2 years old)

> I simply don't see the benefit over just using a URL. RDF won't
> be able to tell you *anything* more about what number(10) means
> than about what val:(http://www.w3.org/2001/XMLSchema%23integer)10
> means. An external application is going to have to do that
> anyway -- and external applications parse URIs all the time for
> many different reasons.


You're right in identifying that the resources and literals are both
categories of "entity" for want of another overloaded term. However,
there are two things that mean that you don't want literals to just be
URI-labelled things:

1. Conceptually, everyone agrees on the denotation of literals; at
least, I think that's a fundamental notion with this proposal. That is,
that all interpretations ought to give the same interpretation for a
literal (at least, that's the literal'resource distinction as far as I
see it here)

2. Conceptually, we want to put larger sets of things into "Literal"
than will fit into URI-space. This is where the token/denotation
distinction is important, because while you might say "throw all the
reals in there", even a million Mike Deans (as a prolific RDF producer)
working until the heat-death of the universe can only produce RDF
documents that use a few of them.

> 2. Also, can the new typed literal be a subject? Can you say
>
>     (DDD)10 rdf:type <DDD> .
>
> ???

Separate issue; the syntax impact of this change is large, but there's
little or no conceptual reason to forbid it.

> I don't see anything new or beneficial here. Only more work
> for the WG and more questions to be answered in the final
> stages of what has been a very long process.
>
> > As to how much it has expanded: this proposal seems to be capable of
> > going two ways:
> >
> > 1. the space of literals is expanded by a small set of other literal
> > types to provide a sufficient foundation for datatyping to be built
> > upon. That a small set can be sufficient is indicated by the success
> > people have in using RDBM systems, I suppose. This proposal would then
> > need guidelines as to what to do with other "datatypes": eg:
> > factor out
> > units in property values; use uri-labelled resources for enumerations
> > and taxons; use graph-structure to express compound types.
>
> Er, kinda like using rdf:type, URIs, bnodes and RDF classes?
>
> There is nothing new here.

That phrase should be printed out and nailed over the door of the WG
chambers :-)

> > Presumably for datatyping and range constraints, etc, rdf:Literal
> > (rdfs:Literal? I forget) is subclassed into numbers (or ints
> > and reals),
> > strings, langstrings, whatever.
>
> Ummm, and where are those number classes defined?
> And are all datatypes then number types?

There are a few fundamental types from which all information systems
seem happy to be able to represent compond and derived types. But sergei
wants the space of literals to be open-ended.

> > 2. the space of literals is arbitrarily expandable by users,
> > and literal
> > nodes in the graph are of the form <type, thing> where a
> > "thing" may or
> > may ont be a lexical form. Treatment of compound, union,
> > intersection of
> > types is unclear in this system.
>
> It's not unclear in the stake-in-the-ground proposal.

There I agree. I don't like the sitg proposal personally, but that's
because I still find it really ugly, not expressively deficient.

> > In this case the proposal is effectively "drawing a circle" around the
> > construct from one of the other datatyping proposals that uses
> > node-and-arc constructs, and calling the whole contents of that circle
> > "the literal"
>
> And what then is "10" in
>
>    Jenny age "10" .

Looks like a string to me.

-- 
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
Tel +44(0)117 9287088 Fax +44 (0)117 9287112 RFC822 jan.grant@bris.ac.uk
"My army boots contain everything not in them." - Russell's pair o' Docs.



