docno="lists-049-6630302"
received="Mon Aug 12 05:44:54 2002"
isoreceived="20020812094454"
sent="Mon, 12 Aug 2002 11:44:45 +0200"
isosent="20020812094445"
name="Sergey Melnik"
email="melnik@db.stanford.edu"
subject="URIs so far (Re: Justification for new node type)"
id="3D57838D.6060100@db.stanford.edu"
charset="us-ascii"
inreplyto="A03E60B17132A84F9B4BB5EEDE57957B160B96&#64;trebe006.NOE.Nokia.com"
expires="-1"


To:Patrick.Stickler@nokia.com
CC:Graham.Klyne@MIMEsweeper.com,w3c-rdfcore-wg@w3.org


Patrick.Stickler@nokia.com wrote:

> ...
> Well, Jan has already pointed out a very valid and practical
> reason why URIs wouldn't work as a general solution, based
> on magnitude constraints, so I guess we can just leave this
> one alone ;-)

Just for the record, there is another practical inconvenience (not a 
show-stopper) with using URIs: since namespaces are not part of the 
abstract syntax, there is no other way of determining the type of a 
URI-encoded literal but to test all known URI prefixes against the given 
resource URI (of course, assuming no rdf:type is used). And that for 
each resource with a URI label...

Summary of cons for URI-encoded literals mentioned in this thread:

- literals and thus URIs can be huge (e.g., BLOBs) [Dan, Jan]
- interpretation of URIs is unrestricted [Graham, Jan]
- literals cannot have substructure in abstract syntax [Patrick]
- type of URI-literals needs to be determined by prefix matching [Sergey]

Still, I share Patrick's view that in principle URIs are a viable 
mechanism for encoding typed values and should be taken into account 
once RDF shoots for an extensible and generic datatyping framework.

Sergey



