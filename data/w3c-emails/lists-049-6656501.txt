docno="lists-049-6656501"
received="Mon Aug 12 06:50:17 2002"
isoreceived="20020812105017"
sent="Mon, 12 Aug 2002 13:50:14 +0300"
isosent="20020812105014"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: Any use cases for untidy literals except long range datatyping?"
id="A03E60B17132A84F9B4BB5EEDE57957B5FBA84@trebe006.NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="Any use cases for untidy literals except long range datatyping?"
expires="-1"


To:<melnik@db.stanford.edu>,<w3c-rdfcore-wg@w3.org>,<phayes@ai.uwf.edu>




> -----Original Message-----
> From: ext Sergey Melnik [mailto:melnik@db.stanford.edu]
> Sent: 12 August, 2002 13:19
> To: RDF Core; pat hayes; Stickler Patrick (NRC/Tampere)
> Subject: Any use cases for untidy literals except long range 
> datatyping?
> 
> 
> I'd like to restate the questions, which Jan raised recently, more 
> explicitly.
> 
> Much of the ongoing discussion about tidy/untidy literals amounts to 
> arguing about different readings of a given piece of RDF/XML 
> or NTriples 
> syntax. From what I can tell, both tidy and untidy literals are 
> implementable, so we have to pick one and wrap up.
> 
> To my knowledge, untidy literals have been first suggested in the 
> context of long range datatyping (aka implicit/global idiom). 
> Specifically, untidy literals provide a shortcut for using a 
> bNode with 
> a property (two triples are essentially merged into one).
> 
> Is this shortcut so fundamental that there is value of making 
> it part of 
> the spec?

Yes. It mirrors common practice both in programming languages
as in XML Schema.

Just as one may say

   int age;
   age = 10;

or

   <xsd:element name="age" type="xsd:integer"/>
   <age>10</age>

so RDF users should be able to say

   age rdfs:resource xsd:integer .
   Jenny age "10" .

In all three cases, datatyping is specified globally
via the variable/element/property and the value itself
is expressed as a literal with implicit datatyping, 
which it inherits from its scope.

> Is there an appealing use case for untidy literals that is not long 
> range datatyping (aka implicit/global idiom)?

Even if datatyping is not asserted for inlined, non-local typed
literals at the RDF level, they still have untidy semantics
at *some* level, and to impose tidy semantics at the RDF level
is IMO misleading and will conflict with common sense when
looking at the big picture -- at the whole stack.

Having tidy semantics at the RDF level and untidy semantics
at the application level seems a fundamental contradiction
that will come back to bite us (and users) again and again.

Take CC/PP as an example. Datatyping is globally asserted for
properties (at present, by the application, since it can't
yet be done in RDF) and the interpretation of the same literal
string as the value of two properties with different datatyping
is untidy, depending on the property datatype.

Now, if such literals are tidy in the RDF MT, then the MT
is saying that those two statements "mean" one thing at
the RDF level, but something else at the CC/PP application
level. Now, though one might wriggle around that with all
kinds of smoke and mirrors, I'd prefer to see the same meaning
at both levels, with the property values being the datatype
values.

> Are we closing off any important extensibility paths if we go 
> for tidy 
> literals?

If literals (non-datatyped literals) are tidy, then if later
we allow literals to be subjects, they are far, far less
interesting than if they are denoting the datatype value
which they (contextually) represent.

Patrick



