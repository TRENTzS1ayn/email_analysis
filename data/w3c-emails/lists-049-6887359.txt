docno="lists-049-6887359"
received="Fri Aug 16 04:16:40 2002"
isoreceived="20020816081640"
sent="Fri, 16 Aug 2002 11:16:33 +0300"
isosent="20020816081633"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: datatypes status"
id="A03E60B17132A84F9B4BB5EEDE57957B5FBA8D@trebe006.NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="datatypes status"
expires="-1"


To:<bwm@hplb.hpl.hp.com>,<w3c-rdfcore-wg@w3.org>




> -----Original Message-----
> From: ext Brian McBride [mailto:bwm@hplb.hpl.hp.com]
> Sent: 14 August, 2002 20:36
> To: RDF Core
> Subject: datatypes status
> 
> 
> 
> I've been trying to catch up on where we have got to with 
> datatypes whilst 
> I've been away.  Here is my short summary so folks can 
> straighten out kinks 
> in my understanding.
> 
> 1)  There has been a proposal to have tokens representing 
> datatyped values 
> as nodes in the abstract syntax, replacing (?) the bnode with 
> property 
> mechanism for representing typed values.  This proposal relies on 
> extensions to the concrete syntax, e.g.
> 
>    <age xsi:type="xsd:decimal">10</age>
> 
> This proposal has been attracting support, particularly from 
> implementors.  There remain a number of issues to work out 
> the details.
> 
> 2)  This proposal is orthognonal to the issue of whether "old style" 
> literals are tidy or not.  No one has as yet written up a 
> summary of the 
> feedback we got from the community.  I will try to do a draft 
> tomorrow.
> 
> Brian

I think the above is an accurate summary of the status quo.

Though I originally was just "thinking out loud" when I posted
http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2002Aug/0114.html
after alot more thought, I would like to promote it to a more formal
proposal for consideration by the WG. It reflects the general
concensus for #1 above, with some of those minor issues worked out,
and represents closure on #2, strongly supported by maintaining
consistent semantics with both XML Schema global typing and
CC/PP value based semantics.

One issue that I'm still investigating is the choice between
rdf:type and xsi:type in the XML serialization. While I feel that 
rdf:type is more correct, I can appreciate the benefit of using xsi:type
insofar as easy validation by XML Schema is concerned; particularly
for document models which are "hybrid" XML and RDF, able to be
interpreted in either context (such as the OpenEbook package
model).

To that end, I have a question that I've yet to find an answer
to in my own diggings around: Is it possible to equate rdf:type
with xsi:type in an XML Schema in a similar fashion to 
rdfs:subPropertyOf, so that an XML Schema validator would
recognize rdf:type as synonymous with xsi:type? If so, then
there's no reason not to go with rdf:type. If not, then even
though it feels a bit icky, I could be persuaded to go with
xsi:type, and then define formally in the RDF MT that xsi:type
is rdfs:subPropertyOf rdf:type to tie it into the RDF typing
semantics.

Eh?

Patrick



