docno="lists-049-7088608"
received="Wed Aug 21 03:22:01 2002"
isoreceived="20020821072201"
sent="Wed, 21 Aug 2002 10:19:44 +0300"
isosent="20020821071944"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: Using XMLSchema-instance attributes in RDF/XML Syntax (fwd)"
id="RqvZXKw0Kz2R.Lsyr0xJ3@mail.nokia.com"
charset="ISO-8859-1"
inreplyto="Using XMLSchema-instance attributes in RDF/XML Syntax (fwd)"
expires="-1"

To:"ext Dan Brickley"<danbri@w3.org>,w3c-rdfcore-wg@w3.org
Cc:thabing@uiuc.edu




Thanks for the pointer Dan. I was about to reply
directly to Thomas on this.

I can very much appreciate the utility that would be
afforded XML Schema users in being able to express
local datatyping using xsi:type, but there remain several
questions about its use that have not been clarified:

1. Must the datatype identified by xsi:type conform to
the XML Schema specification? Some preliminary
research I've done to determine this shows a strong
perception that this is true. Yet RDF datatyping should
work equally well for any arbitrary datatype which
conforms to the minimal characteristics defined by
RDF, including but not limited to  XML Schema datatypes.

2. Will the XML Schema WG/community have a problem
with RDF adopting xsi:type as a key term in its own
vocabulary if that  means extending
or interpreting its semantics to apply to datatypes not
bound by the XML Schema specs. I suspect not. 

3. Is introducing this co-dependency between the two
standards absolutely necessary? One could easily
construct a generic tool that incorporates an XML
Schema validator and which validates typed literals
in RDF/XML instances without parsing the RDF/XML
into a graph.

Given the other aspects of RDF validation, as well as
those of upper layers such as OWL, I expect that in the
long term, validation will be performed on the graph,
not on the XML, and so any utility derived from adopting
xsi:type would be limited and short lived.

While I'm very sympathetic to easy validation of RDF/XML
containing XML Schema datatyped literals, I don't think
it is advisable to employ xsi:type, for the reasons outlined
above.

Cheers,

Patrick


_____________Original message ____________
Subject:Using XMLSchema-instance attributes in RDF/XML Syntax (fwd)
Sender:ext Dan Brickley <danbri@w3.org>
Date:Wed, 21 Aug 2002 09:52:49 +0300




of interest re datatyping options...

dan

---------- Forwarded message ----------
Date: Tue, 20 Aug 2002 16:20:31 -0500
From: Thomas G. Habing <thabing@uiuc.edu>
To: www-rdf-interest@w3.org
Subject: Using XMLSchema-instance attributes in RDF/XML Syntax
Resent-Date: Tue, 20 Aug 2002 17:20:35 -0400 (EDT)
Resent-From: www-rdf-interest@w3.org


Hi all,

I posted the following to www-rdf-comments recently, but it didn't generate
any comments or followup, so I am posting here to see what happens :-).
Does what I am proposing make sense, is it too simplistic, or am I just
missing something?

---

I have been trying to figure out how I can use the various
XMLSchema-instance attributes (especially xsi:type, but also xsi:nil,
xsi:schemaLocation, etc.) in an RDF/XML document.  I want to create valid
RDF/XML, but at the same time I want to be able to validate at least
portions of the RDF/XML using XML Schema.  Some of my XML Schemas require
the use of the xsi:type attribute in the instance documents in order to
validate.  However, RDF insists on treating these xsi:attributes as RDF
property attributes which causes the RDF to be invalid.

I can understand this in the original RDF M&S since it predates XML Schema
by a year or so, but I am surprised to see no mention of this issue in the
newest "RDF/XML Syntax Specification."

I have seen some of the discussions in the various lists of using xsi:type
for data typing in RDF.  I don't claim to understand most of the issues
associated with this, but I would like to humbly suggest that at the very
least there should be some language in the "RDF/XML Syntax Specification" to
the effect that attributes in the XMLSchema-instance namespace should be
ignored by RDF parsers, similar to what is done with the xml* attributes.

Thanks,
        Tom
-- 
Thomas Habing
Research Programmer, Digital Library Projects
University of Illinois at Urbana-Champaign
155 Grainger Engineering Library Information Center, MC-274
thabing@uiuc.edu, (217) 244-4425
http://dli.grainger.uiuc.edu



