docno="lists-049-7631012"
received="Fri Aug 23 09:58:00 2002"
isoreceived="20020823135800"
sent="Fri, 23 Aug 2002 14:45:06 +0100"
isosent="20020823134506"
name="Graham Klyne"
email="Graham.Klyne@MIMEsweeper.com"
subject="Re: weekly call for agenda items"
id="5.1.0.14.2.20020823144035.03c51430@127.0.0.1"
charset="us-ascii"
inreplyto="3D650C62.3060404&#64;mitre.org"
expires="-1"


To: Frank Manola<fmanola@mitre.org>
Cc: Brian McBride<bwm@hplb.hpl.hp.com>, RDF Core<w3c-rdfcore-wg@w3.org>


At 12:08 PM 8/22/02 -0400, Frank Manola wrote:

>Brian McBride wrote:
>
>>I've added these to the agenda as requested.  A couple of comments below:
>>At 13:30 21/08/2002 -0400, Frank Manola wrote:
>>
>>>Meaning of rdf:type and relationship between RDF and RDFS;  specifically,
>>>
>>>(a) must any RDF processor understand the object of an rdf:type property 
>>>as being an rdfs:Class (and hence understand what an rdfs:Class is)?
>>
>>Converting this to a test case, (which may or may not capture Frank's 
>>intended question), I suggest that an RDF processor is not required to conclude
>>   _:b rdf:type rdfs:Class .
>>from:
>>   _:a rdf:type _:b .
>>That is a job for rdfs reasoning on rdfs:range.
>
>
>Thanks!  This test case precisely captures the question (I wrote up a 
>similar test case myself, but only after posting my original message). 
>Your suggested response is my current understanding, but I'd like this 
>nailed down.

My understanding too.

>>>(b) must an RDF processor that understands what an rdfs:Class is also 
>>>understand the rest of the RDFS vocabulary?
>>
>>I'm not sure how to reduce this to a test case.  If the intent is to ask 
>>whether any processor capable of implementing the above entailment, must 
>>implement all of the RDFS closure rules, why might we be tempted to say that?
>
>
>My original idea was that, while there might be RDF processors that would 
>support arbitrary additional amounts of RDFS processing as well as 
>"vanilla RDF", in general I imagine there would be "RDF" processors (these 
>wouldn't handle the first entailment, as you've suggested) and "RDFS" 
>processors that would handle both RDF and RDFS entailments.  The RDFS 
>processors would be the ones to handle the first entailment, and (of 
>course) would handle the others as well.  What you're suggesting, I think, 
>is that we don't want to rule out the intermediate case, e.g., an RDF 
>processor might choose to also support, say rdfs:Class entailments, but 
>not some of the other RDFS vocabulary (?)

Given that RDF is monotonic in this respect, I see no harm in partial 
application of RDFS closure rules.

A test case might be along the lines of:

if an RDF processor is capable of inferring:

     _:a rdf:type _:b .
|-
     _:b rdf:type rdfs:Class .

then is it also *required* to infer:

     _:c ex:prop _:d .
|-
     ex:prop rdf:type rdfs:Property .

I would currently say "No: it's allowed but not required".

#g


-------------------
Graham Klyne
<GK@NineByNine.org>



