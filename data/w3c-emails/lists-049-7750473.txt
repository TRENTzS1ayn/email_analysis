docno="lists-049-7750473"
received="Fri Aug 23 15:32:40 2002"
isoreceived="20020823193240"
sent="Fri, 23 Aug 2002 15:46:49 -0400"
isosent="20020823194649"
name="Frank Manola"
email="fmanola@mitre.org"
subject="some review comments on datatype draft"
id="3D669129.2050100@mitre.org"
charset="us-ascii"
inreplyto="3D6640AF.1010809&#64;mitre.org"
expires="-1"


To:w3c-rdfcore-wg@w3.org


Section 1.1:

The first (complete) para says: "Due to RDF's role as a means of 
interchange between disparate systems, and in order to achieve 
portability and independence of platform it is necessary to forgoe any 
native representation of values or native datatypes in RDF itself. This 
means that RDF has no built-in knowlede about particular datatypes such 
as strings or integers, and the lexical representation of a given value, 
such as the number twenty-five "25", has no native interpretation in 
RDF. RDF is datatype neutral in the same manner as it is vocabulary 
neutral. The specific semantics for individual datatypes must reside in
the application layers above RDF."


1.  replace "forgoe" with "forgo", and "knowlede" with "knowledge" in 
this para.

2.  there are a number of paragraphs that say something more or less 
similar to this (some in greater detail), such as this one from section 2.3:

"RDF datatyping is primarily concerned with the implicit or explicit 
designation of typed literal pairings. RDF datatyping only provides for 
the designation of typed literals. The internal structure and semantics 
of all datatypes are opaque to RDF; i.e. membership of value and lexical 
spaces, datatype mappings, etc. have neither representation nor 
interpretation in RDF. Actual interpretation of typed literals 
(determination of the actual value denoted by the typed literal) is 
performed externally to RDF by applications which have sufficient 
knowledge of the particular datatypes in question. RDF datatyping only 
provides the datatype context within which such interpretation is to 
take place."

Maybe this is just me, but it seems to me this could be clearer.  The 
point, if I understand it correctly, is that RDF datayping defines a way 
to associate an RDF literal with a URI that identifies a data type in 
some type system.  This allows RDF to provide a form of metadata about 
the literal (what someone intends its data type to be), but the role of 
RDF is limited to indicating the association between the literal and the 
datatype.  RDF itself doesn't actually define any data types, or define 
the value that is denoted by an RDF typed literal.  The value must be 
determined by some application that uses the RDF-supplied association, 
together with its own knowledge of the type in question.  Right?

Section 1.4:

[I made this comment at the telecon] I think it would be clearer if the 
first example would *not* use these abbreviations;  write the whole 
thing out once, and then abbreviate.  In particular, it needs to be 
clear that the reference to the data type is a URI.

Section 2.1:

I don't want to keep riding this hobbyhorse, but is "RDF datayping" part 
of the "RDF" language or the "RDFS" language (OK, I won't use 
"processor" unless I have to!).  The "rdfs" prefix here suggests that 
it's part of RDFS, and so does Section 5, but is it really?  For local 
datatyping anyway, it seems that RDFS is not required.  (Are these 
separate languages or not?)

Section 3:

Echoing Dave I think:  I don't like rdf:type as an attribute (right idea 
semantically, but wrong syntactically).

It would be helpful in Section 3 to have some explicit discussion on 
using datatypes *other* than those from XML Schema (lest anyone think we 
weren't serious about not building data types in).

--Frank


-- 
Frank Manola                   The MITRE Corporation
202 Burlington Road, MS A345   Bedford, MA 01730-1420
mailto:fmanola@mitre.org       voice: 781-271-8147   FAX: 781-271-875



