docno="lists-049-7813491"
received="Mon Aug 26 06:56:12 2002"
isoreceived="20020826105612"
sent="Mon, 26 Aug 2002 13:56:00 +0300"
isosent="20020826105600"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: some review comments on datatype draft"
id="A03E60B17132A84F9B4BB5EEDE57957B5FBAA1@trebe006.europe.nokia.com"
charset="iso-8859-1"
inreplyto="some review comments on datatype draft"
expires="-1"


To:<fmanola@mitre.org>,<w3c-rdfcore-wg@w3.org>




> -----Original Message-----
> From: ext Frank Manola [mailto:fmanola@mitre.org]
> Sent: 23 August, 2002 22:47
> To: w3c-rdfcore-wg@w3.org
> Subject: some review comments on datatype draft
> 
> 
> 
> Section 1.1:
> 
> The first (complete) para says: "Due to RDF's role as a means of 
> interchange between disparate systems, and in order to achieve 
> portability and independence of platform it is necessary to 
> forgoe any 
> native representation of values or native datatypes in RDF 
> itself. This 
> means that RDF has no built-in knowlede about particular 
> datatypes such 
> as strings or integers, and the lexical representation of a 
> given value, 
> such as the number twenty-five "25", has no native interpretation in 
> RDF. RDF is datatype neutral in the same manner as it is vocabulary 
> neutral. The specific semantics for individual datatypes must 
> reside in
> the application layers above RDF."
> 
> 
> 1.  replace "forgoe" with "forgo", and "knowlede" with "knowledge" in 
> this para.

Fixed.

> 2.  there are a number of paragraphs that say something more or less 
> similar to this (some in greater detail), such as this one 
> from section 2.3:
> 
> "RDF datatyping is primarily concerned with the implicit or explicit 
> designation of typed literal pairings. RDF datatyping only 
> provides for 
> the designation of typed literals. The internal structure and 
> semantics 
> of all datatypes are opaque to RDF; i.e. membership of value 
> and lexical 
> spaces, datatype mappings, etc. have neither representation nor 
> interpretation in RDF. Actual interpretation of typed literals 
> (determination of the actual value denoted by the typed literal) is 
> performed externally to RDF by applications which have sufficient 
> knowledge of the particular datatypes in question. RDF 
> datatyping only 
> provides the datatype context within which such interpretation is to 
> take place."
> 
> Maybe this is just me, but it seems to me this could be clearer.  The 
> point, if I understand it correctly, is that RDF datayping 
> defines a way 
> to associate an RDF literal with a URI that identifies a data type in 
> some type system.  
> This allows RDF to provide a form of 
> metadata about 
> the literal (what someone intends its data type to be), but 
> the role of 
> RDF is limited to indicating the association between the 
> literal and the 
> datatype.  RDF itself doesn't actually define any data types, 
> or define 
> the value that is denoted by an RDF typed literal.  The value must be 
> determined by some application that uses the RDF-supplied 
> association, 
> together with its own knowledge of the type in question.  Right?

Right. But RDF does define certain aspects of the nature of those
datatypes, such that an RDF processor can know that given a pairing
of datatype and lexical form, that pairing consistently denotes
a specific value and every time that pairing is encountered the
same value is meant. RDF can't tell you what the value is, but
it can tell you there's only one of them for a given pairing
of datatype and lexical form and it will always be that particular
value.

Once the technical details are ratified, I'll work on making the
wording clearer.

> Section 1.4:
> 
> [I made this comment at the telecon] I think it would be 
> clearer if the 
> first example would *not* use these abbreviations;  write the whole 
> thing out once, and then abbreviate.  In particular, it needs to be 
> clear that the reference to the data type is a URI.

I've adopted the use of full N-Triples in all the examples, which
I hope will make this clear. Let me know what you think (I'll post
the revised version shortly).

> Section 2.1:
> 
> I don't want to keep riding this hobbyhorse, but is "RDF 
> datayping" part 
> of the "RDF" language or the "RDFS" language (OK, I won't use 
> "processor" unless I have to!).  The "rdfs" prefix here suggests that 
> it's part of RDFS, and so does Section 5, but is it really?  

I consider it a layer above RDF and RDFS. It uses rdfs:range
semantics to assert the rdf:type of property values, which in 
the case of implicitly typed literals can provide the datatype
context for proper interpretation. Thus

      -------------------
      | RDF Datatyping  |
      -------------------
      |     RDFS        |
      -------------------
      |      RDF        |
      -------------------

> For local 
> datatyping anyway, it seems that RDFS is not required.  (Are these 
> separate languages or not?)

Well, I don't know if I'd call them separate languages,
but yes, separate layers. Since the only new term is
rdfs:Datatype, it seemed rather silly to create yet another
namespace such as rdfd: just for it.

> Section 3:
> 
> Echoing Dave I think:  I don't like rdf:type as an attribute 
> (right idea 
> semantically, but wrong syntactically).

Feel free to suggest an alternative. It seems to me that using
some other term would only obfuscate the semantics. After all,
the datatype *is* the rdf:type of the typed literal node, so
why not call it what it is?

> It would be helpful in Section 3 to have some explicit discussion on 
> using datatypes *other* than those from XML Schema (lest 
> anyone think we 
> weren't serious about not building data types in).

Great idea. Any suggestions for examples?

Cheers,

Patrick


> --Frank
> 
> 
> -- 
> Frank Manola                   The MITRE Corporation
> 202 Burlington Road, MS A345   Bedford, MA 01730-1420
> mailto:fmanola@mitre.org       voice: 781-271-8147   FAX: 781-271-875
> 
> 
> 



