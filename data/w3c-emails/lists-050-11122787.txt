docno="lists-050-11122787"
received="Fri Jun 28 01:36:38 2002"
isoreceived="20020628053638"
sent="Fri, 28 Jun 2002 00:36:38 -0500"
isosent="20020628053638"
name="pat hayes"
email="phayes@ai.uwf.edu"
subject="Re: datatypes message - draft 2"
id="p05111b26b941a49ba657@[65.217.30.113]"
charset="us-ascii"
inreplyto="1025199961.22220.38.camel&#64;dirk"
expires="-1"


To: Dan Connolly<connolly@w3.org>
Cc:w3c-rdfcore-wg@w3.org


>On Thu, 2002-06-27 at 01:40, Patrick Stickler wrote:
>>
>>
>>  On 2002-06-26 20:38, "ext Brian McBride" <bwm@hplb.hpl.hp.com> wrote:
>>
>>
>>  In the introduction, it would be good, I think, to add a comment
>>  that the tidy/untidy issue has little to do with implementational
>>  efficiency of triples stores,
>
>not true; see comments from Sergey a long time ago about
>the cost of untidy literals in RDF/database systems.
>
>Sorry I don't have time to find it.

I recall. But Sergey was being alarmist about a worst-possible case 
where every triple contained a literal and every literal might or 
might not be the same as any other. That will never happen.

>
>The swap/cwm implementation would suffer a significant
>efficiency hit if literals weren't tidy.

Im not convinced of this. Sure, the code would get a bit more 
complicated, but I bet that any efficiency cost could be kept 
marginal, way below a linear factor in practice. If the graphs are 
encoded in the extended Ntriples convention then there should be no 
extra cost at all: literal nodes act just like bnodes, uniquely 
specified by their nodeIDs. If they are encoded in RDF/XML then the 
only cases which arise will be those that we introduce deliberately 
to handle some XML idioms, which can be recognized during 
round-tripping one triple at a time by looking at the property 
urirefs. That is just a few extra operations per triple, at worst.

Pat

>
>   http://www.w3.org/2000/10/swap/
>
>esp in def loadToStore(store, addr):
>
>     store.storeQuad((store._experience,
>                      store.semantics,
>                      store.intern((SYMBOL, addr)),
>                      store.intern((FORMULA, addr + "#_formula" ))))
>
>-- http://www.w3.org/2000/10/swap/llyn.py
>
>>  but is a conceptual distinction
>>  relating to the graph semantics and that there are numerous ways
>>  for actual implementations to compress untidyness in the conceptual
>>  graph in an actual triples store, etc.
>
>--
>Dan Connolly, W3C http://www.w3.org/People/Connolly/


-- 
---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



