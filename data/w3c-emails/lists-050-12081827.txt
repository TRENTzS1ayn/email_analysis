docno="lists-050-12081827"
received="Tue Mar  5 00:00:02 2002"
isoreceived="20020305050002"
sent="Tue, 5 Mar 2002 16:10:49 +1100"
isosent="20020305051049"
name="Rick Jelliffe"
email="ricko@topologi.com"
subject="RE: xml:lang [was Re: Outstanding Issues ]"
id="012c01c1c404$1db5c6d0$4bc8a8c0@AlletteSystems.com"
charset="iso-8859-1"
inreplyto="JAEBJCLMIFLKLOJGMELDEECHCDAA.jjc&#64;hplb.hpl.hp.com"
expires="-1"


To:<w3c-i18n-ig@w3.org>
Cc:"\"A. Vine\""<andrea.vine@sun.com>,"\"Jeremy Carroll\""<jjc@hplb.hpl.hp.com>,"\"Patrick Stickler\""<patrick.stickler@nokia.com>,<w3c-rdfcore-wg@w3.org>

XML Schemas has no support for localized data types.  It has
internationalization without localization; a fat lot of good for
markup languages, where you notionally should be able
to start with pre-existing data and mark it up.

At worst, you will have to simulate localized data types using string patterns.
Or, you can define your own NOTATION (i.e. something defined
outside the XML Schema framework).

The idea that people might want to send dates or numbers in local
notations was rejected by the XML Schema WG. It was a big
mistake that skews XML to be a tool for back-end data interchange
or for back-end-to-middleware systems. 

A better approach would have been to define a notation definition system
which lets you specify different lexical spaces and the mapping to
some common value spaces. The closest thing to that is Simon
StLaurent's Regular Fragmentations, which lets you parse a
string into a little XML subdocument, and validate that subdocument.

In other words, to turn datatyping into an N->1->N, where the 1
is the value space. Instead XML Schemas just has 1->1->1,
(except for boolean, where there is 2->1->2 IIRC.)

Cheers
Rick Jelliffe
(Former Member W3C Schema WG)



