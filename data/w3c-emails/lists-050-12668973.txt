docno="lists-050-12668973"
received="Mon Mar 11 10:06:28 2002"
isoreceived="20020311150628"
sent="Mon, 11 Mar 2002 17:08:21 +0200"
isosent="20020311150821"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: A very short list of residual datatyping issues (just one ;-)"
id="B8B29505.1071D%patrick.stickler@nokia.com"
charset="US-ASCII"
inreplyto="OFAD1F9059.9B1C9D8D-ON41256B78.0076326F&#64;bayer-ag.com"
expires="-1"

To:"extjos.deroo.jd@belgium.agfa.com"<jos.deroo.jd@belgium.agfa.com>
CC: RDF Core<w3c-rdfcore-wg@w3.org>


On 2002-03-11 1:31, "ext jos.deroo.jd@belgium.agfa.com"
<jos.deroo.jd@belgium.agfa.com> wrote:

> 
>> Here's my very short list of outstanding issues that I see as
>> still remaining to be resolved for the stake-in-the-ground datatyping
>> proposal, with proposed resolutions:
>> 
>> 
>> 1. Union versus non-union interpretation of datatypes
>> 
>> Overview of Issue:
>> 
>> a) XML Schema associates a single URI with a datatype. That
>>    URI denotes the entire datatype, not just its value space.
>>    Stating that the URI only denotes the value space may be
>>    considered contrary to the XML Schema usage and leaves
>>    datatypes without a formally defined URI denoting the entire
>>    datatype.
> 
> Per ?d rdfs:domain ?d that single uri denotes the valuespace and
> the valuespace-to-lexicalspace mapping but *not* the lexicalspace.

This is what the latest dt proposal asserts, but this is exactly
what I'm challenging. That '?d rdfs:domain ?d' is incorrect, because
a datatype URI denotes the entire datatype, not just the value space.

Thus, taking the union interpretation of datatype URIs, a datatype URI
can't be used to denote the domain of itself. What we rather need to
say is:

   { ?d rdf:type rdfs:Datatype }
   log:implies 
   { ?d hasValueSpace ?V ; rdfs:domain ?V } .

and the value space remains unnamed. C.f.

The complete set of implications of rdfs:Datatype
class membership would be something like:

{
   ?d rdf:type rdfs:Datatype .
}
log:implies
{
   ?d rdfs:hasValueSpace ?V .
   ?V rdf:type rdfs:DatatypeValueSpace .
   ?V rdfs:subClassOf ?d .
   ?V rdfs:subClassOf rdfs:DatatypeValue .

   ?d rdfs:hasLexicalSpace ?L .
   ?L rdf:type rdfs:DatatypeLexicalSpace .
   ?L rdfs:subClassOf ?d .
   ?L rdfs:subClassOf rdfs:DatatypeLiteral .

   ?d rdf:type rdfs:Property .
   ?d rdfs:domain ?V .
   ?d rdfs:range ?L .
} .

I didn't consider the extra vocabulary in my examples as essential,
but perhaps it would be useful to provide such an example in a
non-normative section to clarify the nature of datatype classes.

???


> Maybe for S-B we could use ``?p rdfs:range [ xsi:type ?d ]''
> to say that the range of ?p is the lexical space of the datatype ?d
> e.g.
> eg:Jenny eg:age "35" .
> 
> eg:age rdfs:range _:1 .
> _:1 xsi:type xsd:number .

Perhaps. I wish, though, that we could find a way to express such
constraints using neutral RDF/S vocabulary, if possible.

And actually, I wonder if folks ever really will need to constrain
graphs to only one or the other idiom.

Devising a means to constrain property values to only the inline
or only the datatype triple idiom might best be left for later,
if and when it is determined to be a real need.

Patrick

--
               
Patrick Stickler              Phone: +358 50 483 9453
Senior Research Scientist     Fax:   +358 7180 35409
Nokia Research Center         Email: patrick.stickler@nokia.com



