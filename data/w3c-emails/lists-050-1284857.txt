docno="lists-050-1284857"
received="Thu Jan 10 18:22:26 2002"
isoreceived="20020110232226"
sent="Thu, 10 Jan 2002 23:21:54 -0000"
isosent="20020110232154"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="RE: RDF datatyping"
id="CEECKEAMDAJDDEDGJNBECEAICAAA.jjc@hpl.hp.com"
charset="us-ascii"
inreplyto="5.1.0.14.2.20020110102945.00a80980&#64;joy.songbird.com"
expires="-1"

To:"Graham Klyne"<GK@NineByNine.org>,"Patrick Stickler"<patrick.stickler@nokia.com>
Cc:"Sergey Melnik"<melnik@db.stanford.edu>,"RDF Core"<w3c-rdfcore-wg@w3.org>


A few comments ...

Patrick:
> > The S idioms, while also doing the job, do so with more machinery and
> > most significantly are contrary to the intuitions of current RDF users
> > (data typing by predicate rather than by rdf:type).

Graham:
> I don't recognize that description of S:
> - I don't see "more machinery" here, whatever that means,
> - "contrary to the intuitions of current RDF users" is precisely one area
> where I think S scores very strongly, based on my intuitions from work
with
> CC/PP (modulo small issues raised in my comments to Sergey's paper).

The machinery I find hard to justify is:
 - Needing three URIs for each datatype.
   Seems a bit like needing to talk about "Jeremy's body", "Jeremy's soul"
and "Jeremy' mind". Might be useful sometimes, but plain "Jeremy" will get
you a long way. I suppose RDF is about triples!
 - Having two incompatible usage idioms (two compatible idioms would somehow
be less cumbersome).
 - Always carrying the lexical values in the graph, and having the lexical
values in the model theory.

I find idiom A contrary to my intuitions simply because it is very
unfamiliar, in a way that P & D are not. I find idiom B contrary in its
insistence on talking about the lexical space when what I mean is the type -
it's like a doctor who only cares about my body and not the well-being of me
as a whole.

elsewhere Patrick:
> It appears to me that the S idioms A and B are not compatible

I found that to be the intent of the current document too, and I agree that
it is a problem that the PD combination does not suffer from.

graham:
> The advantage of the S scheme is that is sits comfortably within the
> current model theory.

and again graham:
> Point me to the model theory, and I may be convinced.

I find S a theoretical work that is practically unappealling. The model
theory is the tail not the dog.

Yes, we do need a model theory to capture the PD proposal; but being
well-grounded in the model theory is not the most important consideration.
Most users will have only a passing understanding of the MT, and merely
wished to be reassured by it. If every time they think of a datatype they
need to get unnecessarily involved in the complexities of lexical spaces,
value spaces and the mappings between them they will rightly curse us.

Jeremy



