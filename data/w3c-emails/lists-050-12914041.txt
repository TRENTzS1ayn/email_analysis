docno="lists-050-12914041"
received="Tue Mar 12 08:19:04 2002"
isoreceived="20020312131904"
sent="12 Mar 2002 07:19:16 -0600"
isosent="20020312131916"
name="Dan Connolly"
email="connolly@w3.org"
subject="Re: rdfs:Literal not rdfs:subClassOf rdfs:Resource"
id="1015939157.7045.217.camel@dirk"
inreplyto="B8B3B86B.10837%patrick.stickler&#64;nokia.com"
expires="-1"

To: Patrick Stickler<patrick.stickler@nokia.com>
Cc: RDF Core<w3c-rdfcore-wg@w3.org>


On Tue, 2002-03-12 at 05:51, Patrick Stickler wrote:
> [...]
> the following would be
> fully valid, but problemmatic in practice:
> 
>    age rdfs:drange xsd:integer .
>    xsd:integer rdf:type rdfs:Datatype .
> 
>    myString daml:equivalentTo "35" .
>    myString rdf:type rdfs:Literal .
> 
>    Bob age myString .
> 
>    Mary age [ xsd:integer myString ] .
> 
> in which case, the application has to know how the actual
> literal node may be related to the bNode, and what if
> it doesn't understand what daml:equivalentTo means?

Then it's not likely to come to the relevant conclusions.

Incompleteness is part of life. I suggest you
get used to it. ;-)

> What is an application going to do with xsd:integer([myString])?
> It needs xsd:integer("35").
> 
> How do I, using RDF/S vocabulary alone, write implications
> that depend on some node being a literal node, not just
> some node that may be a member of class rdfs:Literal.

You can't express syntactic constraints in the RDFS vocabulary.

> I fear we may be loosing an important distinction here.

We never had it.

> Perhaps rdfs:Literal is not your normal kind of class...

-- 
Dan Connolly, W3C http://www.w3.org/People/Connolly/



