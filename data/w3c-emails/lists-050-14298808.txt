docno="lists-050-14298808"
received="Wed Mar 20 12:03:47 2002"
isoreceived="20020320170347"
sent="Wed, 20 Mar 2002 11:59:20 -0500"
isosent="20020320165920"
name="Jonathan Borden"
email="jonathan@openhealth.org"
subject="Re: Unasserted triples, Contexts and things that go bump in the night."
id="033e01c1d030$94fcaf00$0a2e249b@nemc.org"
charset="iso-8859-1"
inreplyto="JAEBJCLMIFLKLOJGMELDEEHBCDAA.jjc&#64;hplb.hpl.hp.com"
expires="-1"


To:"Jeremy Carroll"<jjc@hplb.hpl.hp.com>,"Pat Hayes"<phayes@ai.uwf.edu>,<w3c-rdfcore-wg@w3.org>
Cc:<www-webont-wg@w3.org>

Jeremy Carroll wrote:

>
> As I understand it, the minimal unasserted triple proposal is that at
least
> for daml:collection it would have been better if the triples with
properties
> daml:first and daml:rest (and maybe those ending rdf:type daml:List ),
were
> somehow special.

To me the minimal proposal is to acknowledge that "dark triples" can be
syntactically identified, and have a status in the MT.

>
> There is an intended syntactic restriction on these triples i.e. that each
> cell in a daml:collection has:
> - rdf:type daml:List (and no other)
> - exactly one daml:first property (pointing to a resource)
> - exactly one daml:rest property ( pointing to daml:nil or another cell )
> - no other properties.

There are two perhaps at least partially, perhaps completely orthogonal
issues:

1) recursive, closed, ordered syntax of daml:List

2) unasserted triples.

>
> My point being that using dark triples to construct purely syntactic
> substructures within RDF graphs then begs the question of how to describe
> the syntax of those syntactic substructures.

Right, so (1) above describes a list, and (2) describes how the list is
interpreted (or something to that effect)

>
> The various schema proposals appear to me to be a way of (indirectly)
> constraining the syntax, and hence there is a win in terms of learning
curve
> if we don't need to duplicate at the metameta level what we are already
> doing at the meta level.
>
> I am deliberatly sidestepping whether we want daml:collection to become
> owl:collection.
>

There are several issues, perhaps "daml:collection" is not the best name,
because it is a macro like parse type, which is applied to the object of a
property, rather than a collection _class_ e.g. (using Qnames for URIrefs)

<daml:Property rdf:about="daml:oneOf">
        <rdfs:range rdf:resource="daml:List"/>
</daml:Property>

I have suggested that one can define two base properties "owl:set" and
"owl:sequence" the first whose semantics _treat_ the daml:List value as a
set, the second which treats it as a list (i.e. restricts the rdfs:range to
daml:List). Appropriate OWL properties e.g. owl:oneOf, owl:insersectionOf,
owl:disjointUnionOf etc. are <subPropertyOf> the appropriate "owl:set" or
"owl:sequence" as the case may be.

Now, whether the triples contained in the daml:List are to be asserted or
unasserted is a different issue. Perhaps we need another pair of properties
"owl:uset" and "owl:usequence" (or some other name) whose objects would be
"unasserted". Is this analogous to "lambda" and "nlambda"?


Jonathan



