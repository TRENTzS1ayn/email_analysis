docno="lists-050-16365921"
received="Mon May 20 10:54:58 2002"
isoreceived="20020520145458"
sent="Sun, 19 May 2002 01:00:33 -0500"
isosent="20020519060033"
name="patrick hayes"
email="phayes@ai.uwf.edu"
subject="Re: Dublin Core, the Primer and the Model Theory"
id="a05111727b90cee666fab@[65.217.30.195]"
charset="us-ascii"
inreplyto="1021575072.2295.84.camel&#64;dirk"
expires="-1"


To: Dan Connolly<connolly@w3.org>
Cc:w3c-rdfcore-wg@w3.org

>On Thu, 2002-05-16 at 11:17, Graham Klyne wrote:
>>  At 08:49 AM 5/16/02 -0500, Dan Connolly wrote:
>>  >The way I see it, dc:creator relates a work to
>>  >either its creator or a name for its creator.
>>  >So the conclusion just says that the two works
>>  >have either the same creator or have creators with
>>  >the same name.
>>  >
>>  >I'd rather the dublin core folks didn't use
>>  >RDF this way, but they did choose to, and
>>  >I'm pretty sure they were made aware of
>>  >this sort of nonsense when they made the choice.
>>
>>  I don't think it's "nonsense", even though it may be less precise than some
>>  alternative usages one might envisage.
>>
>>  It's also a pattern of RDF use that seems to be very common among simple
>>  applications, not just Dublin Core, which is not surprising given it has
>>  always been enshrined in the RDF specifications, from the very first
>>  example.  To try and turn that around, I think you might as well give up on
>>  much of the following and energy that has gone into making even some small
>>  successes for RDF, and start again from scratch.
>
>
>Well, maybe.
>
>But keep in mind there are at least a few implementations
>that we break if we go the other way:
>
>   # how does existing RDF software handle this datatypes test?
>http://lists.w3.org/Archives/Public/www-rdf-interest/2002Jan/thread.html#199
>
>
>Responses indicate RDQL, rdfql, Squish, and Euler think literals
>are tidy. But there was some indication of willingness to change...
>"things could be changed to support non-tidy literals and then
>I suppose you'd have to do something like...".
>
>
>I suppose I'm willing to think it over, again. But tidy literals
>is pretty deeply embedded into all the software and applications
>I've developed over the last 18 months.

Well, it might be possible to preserve that kind of tidyness and 
still do what Jeremy and Patrick want with the inline idiom. It 
depends on quite why and how your applications use tidyness. Do they 
depend on it because they want to be able to rely on a unique-names 
assumption for literals, so that even if there were untidy literals, 
they would be assumed to denote the same thing? Or do they rely on 
tidy literals just to save searching for other occurrences of the 
same literal?

Pat



