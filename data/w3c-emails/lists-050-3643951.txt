docno="lists-050-3643951"
received="Fri Jan 25 08:43:32 2002"
isoreceived="20020125134332"
sent="Fri, 25 Jan 2002 13:43:30 -0000"
isosent="20020125134330"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="Datatyping differences"
id="JAEBJCLMIFLKLOJGMELDIENJCCAA.jjc@hplb.hpl.hp.com"
charset="iso-8859-1"
expires="-1"

To:<w3c-rdfcore-wg@w3.org>



Brian dropped by and asked me what the key differences between S and TDL
were.

Here is a list:

** A single triple:
  <bob> <age> "30" .

In S "30" is a string, in TDL it is untyped.

** Range constraints for this triple.

In S-B the range constraint is something like:
  <age> <rdfs:range> <xsd:integer.lex> .

whereas in TDL (using the .map prefix that is not part of TDL) we would
have:
  <age> <rdfs:range> <xsd:integer.map> .


** The role of the map, the lexical space, the value space.

S makes strong distinctions between these.
TDL always uses the map as representing the datatype (and then does not use
the .map extenstion).


** syntactic stylistic

  The local idiom D and the local idiom S-A are different syntaxes, roughly
meaning the same thing. D has better compatibility with DAML.

** interaction of multiple different lexicalizations with possibly multiply
different types.
  S-A is strong
  S-B is weak
  TDL is in between.

(An example is when we have two integer dataypes one with binary
lexicalization and one with decimal lexicalization).
  S-B allows "100" with both types as legal (despite two different values to
the application)
  S-A allows "100" as legal and the syntax forces disambiguation of one type
or the other,
  S-A also allows compatible lexicalizations [eg:binary "100" ] [ eg:deciaml
"4" ] on the same node.
  TDL detects a type conflict and rejects a document trying to give "100"
both types.



Jeremy



