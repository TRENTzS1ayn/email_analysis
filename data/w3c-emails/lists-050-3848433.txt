docno="lists-050-3848433"
received="Fri Jan 25 14:38:28 2002"
isoreceived="20020125193828"
sent="Fri, 25 Jan 2002 19:38:26 -0000"
isosent="20020125193826"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="RE: Re(buttal): Why I cannot live with S"
id="JAEBJCLMIFLKLOJGMELDOENPCCAA.jjc@hplb.hpl.hp.com"
charset="us-ascii"
inreplyto="3C51B48D.64642600&#64;db.stanford.edu"
expires="-1"

To:"Sergey Melnik"<melnik@db.stanford.edu>,"Patrick Stickler"<patrick.stickler@nokia.com>
Cc:"RDF Core"<w3c-rdfcore-wg@w3.org>


Sergey:
> As a developer, I don't have an option. With TDL-RDF, all of my own
> applications in mediation, model management, backend storage etc. would
> technically become non-RDF applications, or applications "formally known
> as complying with the deprecated RDF 1.0" ;) I don't see any practical
> benefit in migrating all existing code to TDL, and I might not be a
> single implementor out there.

I would like to better understand this.

The intent in the TDL model theory was that an interpretation with no
supported types was the same as the current model theory. I suspect this
boils down to the tidy versus untidy literal nodes issue.

Tidiness had already vanished from the latest editors draft of the model
theory, which is the one I was working from.

Is that right?

Jeremy



