docno="lists-050-4242366"
received="Mon Jan 28 08:44:40 2002"
isoreceived="20020128134440"
sent="Mon, 28 Jan 2002 13:44:38 -0000"
isosent="20020128134438"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="Can't live with S and tidy graphs"
id="JAEBJCLMIFLKLOJGMELDMEODCCAA.jjc@hplb.hpl.hp.com"
charset="iso-8859-1"
expires="-1"

To:<w3c-rdfcore-wg@w3.org>



Well, I appear to agree with Sergey and disagree with Patrick, ...

... at least about the topic of disagreement!

I think RDF graphs are fundamentally untidy.


The serious concerns I have with S are as follows:

1. Tidiness.
   Different occurrences of the same string have different types,
   and IMO are better modelled as distinct entities.
   S does not allow for this.
   This is not asserting that implementations may not use
   string interning or equivalent techniques for storage
   compression, merely that the semantics of a literal node
   depend on context.

2. Idiom B.
     Idiom B, where the lexical form of a datatype is used directly
   in a single triple, is for me, the primary idiom of RDF M&S.
   For me, articulating implicit typing within that idiom is the
   goal of the datatyping work. S's articulation of idiom B is
   deficient.

   2A:

   Unfortunately in S, idiom B is explicitly a sop to backward
   compatability which does not interwork properly with the
   preferred S idiom, idiom A.
    The examples we have already seen have been
      <Jenny> <ageA> _:a .
      _:a <xsd:integer.map> "4" .
      <Jenny> <ageB> "4" .
      <ageA> <rdfs:range> <xsd:integer.val> .
      <ageB> <rdfs:range> <xsd:integer.lex> .
    The single conceptual property of age gets reflected differently
    in the two idioms, and the value of the age property is an integer
    in one, and a string in the other. I think idiom B is *the* idiom
    of choice, and datatyping should explicate how one gets from
    the string lexicalization to the intended value.


   2B:

   Monotonicity and the open world assumption on type information.
   S (idiom B and P) is non-monotonic with respect to type information,
   or at least forces the RDF application to behave as if the
   underlying theory were non-monotonic.
[Sorry this is rather obscure, I will ask for a clarification about S-P,
which will illustrate my concerns]


That's it. Other areas of difference are I think open to compromise.
So just as Sergey could live with one uri for each type (as in TDL), I
could live with S's three or four.

While I think the D syntactic idiom is better than S-A from a backward
compatibility viewpoint, and I do not like S idiom A, I could live with
S-A being the recommended local idiom.

I also have doubts about the implementability of S, and will seek
clarifications from Sergey.



Jeremy



