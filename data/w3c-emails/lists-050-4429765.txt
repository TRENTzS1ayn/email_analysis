docno="lists-050-4429765"
received="Mon Jan 28 16:59:51 2002"
isoreceived="20020128215951"
sent="Mon, 28 Jan 2002 21:58:54 +0000"
isosent="20020128215854"
name="Brian McBride"
email="bwm@hplb.hpl.hp.com"
subject="Datatyping Summary"
id="5.1.0.14.0.20020128202622.00a7e078@0-mail-1.hpl.hp.com"
charset="us-ascii"
expires="-1"


To: RDF Core<w3c-rdfcore-wg@w3.org>
Cc:connolly@w3.org, jeremy Carroll<jjc@hplb.hpl.hp.com>, Patrick Stickler<patrick.stickler@nokia.com>, sergey Melnik<melnik@db.stanford.edu>

I don't know if this is going to be helpful, but I thought it worth the 
attempt to pull together the datatyping discussion.

I've been through todays mail traffic and pulled the issues as I've 
recognised them.  In general I've ignored retoric, exposition of beliefs as 
to how it *should* be done and tried to focus on issues that I can, in some 
sense make concrete.  I've also tried to be even handed.  The result is no 
doubt imperfect; so help me get it right, next time round.

Issue B1:
=========

In S, if one wants to use both idiom A and idiom B, e.g.

   <mary> <age> "10" .
   <age>  <rdfs:range> <xsd:integer.lex> .

and

   <mary> <ageD> _:a .
   _:a    <xsd:integer.map> "10" .

two properties have to be used, <age> and <ageD>, in this example.

I believe there is a agreement that this is a difference between the two 
proposals.
Indeed, it may be said that the main aim of TDL is to avoid requiring 
different properties for these different idioms.

Does anyone in the WG consider this feature of S, on its own, to be a 
"can't live with" issue with S?


Issue B2: Multiple Lexical Representations of a data value
==========================================================

S, idiom A, permits multiple lexical representations of a data value:

   _:i <xsd:double>    "10.1" .
   _:i <xsd:double.de> "10,1" .

I believe there is agreement that S-A allows this.

Does anyone in the WG consider this, on its own, to be a "can't live with" 
issue with S?


Issue B3:  the "duh" issue
==========================

DanC is concerened that with TDL:

   <mary> <haircolor> "red" .

and a rule:

   ?x <haircolor> "red" => ?x <rdf:type> <redhead> .

one cannot conclude

   <mary> <rdf:type> <rdfhead> .

since one conclude that both "red"'s denote the same thing.

Jeremy has responded:

From:

   <mary> <haircolor> "red" .
   <haircolor> <rdfs:range> <xsd:string> .

and the same rule one can draw the required inference.

DanC:  Does that solve the problem?  Do you withdraw that objection?

Jeremy/Patrick:  Do you accept that without the range constraint, DanC is 
correct?


Issue B4 - TDL breaks existing code
===================================

This is similar to B2.  I've changed the example slightly from Sergey's.
Consider the graph:

   _:f <rdf:type> <film> .
   _:f <dc:Title> "10" .
   <mary> <age> "10" .

Given a query:

   (?x <dc:Title> ?y) & (?z <age> ?y)

existing applications will return:

   ?x = _:f, ?y = "10", ?z = <mary>

Under TDL, they would return null.

Sergey:  Does this version of the issue illustrate your point?

Jeremy/Patrick:  Do you accept this analysis; would the query return null 
under TDL?


Issue B5:  Storage Requirements
===============================

TDL requires significantly more storage to implement.

Jeremy/Patrick:  do you accept this statement?


Issue B6: S requires 4 URI's be registered for each data type
=============================================================

S requires that for each datatype 4 URI's be registered

   datatype
   datatype.lex
   datatype.val
   datatype.map

Sergey:  Do you agree this is the case?  If not, how many URI's are 
required to implement ALL the idioms of S and coexist in the same model.



