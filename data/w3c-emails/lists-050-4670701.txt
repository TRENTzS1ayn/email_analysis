docno="lists-050-4670701"
received="Tue Jan 29 15:22:39 2002"
isoreceived="20020129202239"
sent="Tue, 29 Jan 2002 20:18:30 +0000"
isosent="20020129201830"
name="Graham Klyne"
email="Graham.Klyne@MIMEsweeper.com"
subject="Re: Datatyping Summary"
id="5.1.0.14.2.20020129200922.03e25250@joy.songbird.com"
charset="us-ascii"
inreplyto="B87CBE56.C9A0%patrick.stickler&#64;nokia.com"
expires="-1"


To: Patrick Stickler<patrick.stickler@nokia.com>
Cc: Jeremy Carroll<jjc@hplb.hpl.hp.com>, Brian McBride<bwm@hplb.hpl.hp.com>, RDF Core<w3c-rdfcore-wg@w3.org>

At 09:02 PM 1/29/02 +0200, Patrick Stickler wrote:
>The only show stopper that has been claimed for TDL is
>that it doesn't have tidy literals -- based on the view
>that e.g. "1984" always means the same thing. I hope that
>it has become clear that this view is not
>valid in an environment of global interchange between
>disparate sources of knowledge.
>
>So it should be concluded that there are no show stoppers
>for TDL.

I find this completely non sequitur.

If any show stopper can be removed by introduction of a different show 
stopper, that doesn't mean there are no show stoppers.

I am still open to a TDL proposal that actually works.  From a stylistic 
viewpoint, I can agree that it is neater.

>As Jeremy has said to me so elegantly, "there's untidyness in
>there somewhere", and I agree.

Yes, I tend to agree, too.  In a sense, I think that what S does is push 
the resolution of that untidiness out into the application (where implicit 
as well as explicit typing information can be brought to bear).  If the 
untidiness cannot be resolved adequately within the interpretation of RDF 
then that seems a reasonable, even inevitable, route to resolution of the 
problem.

#g
--


>Jeremy, feel free to correct me if you disagree ;-)
>
>I see the recent refinement of TDL as an attempt to provide
>tidy literals to those who want them without loosing the
>untidyness that is inherent in the context dependent interpretation
>of literals. It was an attempt at a fusion of TDL and S-P,
>in the interest of finding a common ground and reaching a
>mutually acceptable solution.
>
>As Jeremy has said to me so elegantly, "there's untidyness in
>there somewhere", and I agree.
>
>You're either going to have untidy literal nodes or untidy
>bnodes with literals hanging off them. There's no way around
>that.
>
>If it turns out that the "manditory bnode" idiom is going to
>be highly backwards incompatable (and I'm not saying it is),
>cest la vie, then we are stuck with untidy literal nodes, and
>back to the previous TDL model.
>
>The only show stopper that has been claimed for TDL is
>that it doesn't have tidy literals -- based on the view
>that e.g. "1984" always means the same thing. I hope that
>it has become clear that this view is not
>valid in an environment of global interchange between
>disparate sources of knowledge.
>
>So it should be concluded that there are no show stoppers
>for TDL.
>
>You may not love TDL for stylistic or other esthetic
>reasons, but I feel that all supposed "fatal" flaws
>with TDL have been addressed.
>
>I don't feel the same is true for S, as my comments to
>Brian's summary outline.
>
>Let me state for the record that I am not religiously
>tied to TDL. If S can be refined so that what I see as
>unacceptable shortcomings are eradicated, then great.
>It's not a matter of ego or advocacy -- but about having
>a solution that will address all of the desiderada in
>as general, efficient, and compatable a way possible.
>
>So, that said, I still await someone to address the
>issues of compatability of local and global idioms
>and idiom specific vocabularies.
>
>Cheers,
>
>Patrick
>
>On 2002-01-29 19:49, "ext Graham Klyne" <Graham.Klyne@MIMEsweeper.com>
>wrote:
>
> > Jeremy, as far as I can tell, you are proposing:
> >
> > (a) start with datatyping scheme S, complete with its model theory
> > (significantly, a literal denotes exactly the corresponding string).
> > (b) avoid subgraphs of the form <a> <foo> "ss" . by preprocessing them into
> >    <a> <foo> _:b . _:b rdf:value "ss" .
> >
> > I think this does address the self-entailment problem.
> >
> > But I think that adding the requirement for graph transformation will be a
> > different kind of show stopper, in that lots of deployed software will see
> > <a> <foo> "ss" . and generate a graph containing exactly one arc.
> >
> > I'm puzzled by this:
> >
> >>> From an implementators point of view, it is clearly easier to 
> implement the
> >> syntactic transformation and S-P, than to implement S-A, S-B and S-P.
> >
> > I don't think an RDF implementation has to do anything special to process
> > S-A, S-B and S-P that isn't standard RDF handling.  Without any extension
> > to core RDF, I could define a vocabulary+interpretation that models these
> > idioms, giving them their intended interpretation, so what's special here
> > for the RDF processor?
> >
> > #g
> > --
> >
> > At 12:24 PM 1/29/02 +0000, Jeremy Carroll wrote:
> >
> >> This message addresses the main criticisms of TDL.
> >> I will follow up with more detail concerning query, Brian's B3 & B4.
> >>
> >> The proponents of S furnish us with an implementation of S, and a model
> >> theory for S (which includes, naturally self-entailment).
> >>
> >> I now can create an implementation of TDL in the following fashion.
> >>
> >> As I read in any RDF graph I apply the following syntactic transformation.
> >>
> >> Match:
> >>   ?x  ?y ?z
> >>   where ?y != rdf:value and
> >>         ?z a literal node
> >>
> >>   replace with
> >>   ?x ?y NewNode
> >>   NewNode rdf:value ?z
> >>
> >>   where NewNode is a newly minted bNode.
> >>
> >> For example:
> >>
> >> <a> <foo> "ss" .
> >>
> >> is transformed to
> >>
> >> <a> <foo> _:b.
> >> _:b <rdf:value> "ss".
> >>
> >>
> >> We then use the S implementation and S model theory (idiom S-P is the only
> >> idiom used).
> >>
> >> Hence:
> >>   If S is implementable then so is TDL
> >>   The maximum overhead required for TDL is the same as that for S idiom A
> >> and/or S idiom P.
> >>
> >> All problems to do with entailment, query, implication, etc. are clarified
> >> and addressed with this process (as long as they are clear and addressed
> >> with S).
> >>
> >>> From an implementators point of view, it is clearly easier to 
> implement the
> >> syntactic transformation and S-P, than to implement S-A, S-B and S-P.
> >>
> >> Graham, does this adequately address your concern about self-entailment?
> >>
> >> [Small technical detail:
> >>
> >> S-P uses a closed world assumption on data types, whereas TDL uses an open
> >> world assumption. The two can be made equivalent by using S-P with at 
> least
> >> two incompatible types in its closed world  both having domain being the
> >> complete set of unicode strings. Two such types are:
> >>
> >> xsd:string = { < x, x > | for any unicode string x }
> >> appendA    = { < x, x."A" > | for any unicode string, . being string
> >> concatenation }
> >>
> >> ]
> >>
> >> Jeremy
> >
> > ------------------------------------------------------------
> > Graham Klyne                    MIMEsweeper Group
> > Strategic Research              <http://www.mimesweeper.com>
> > <Graham.Klyne@MIMEsweeper.com>
> >       __
> >      /\ \
> >     /  \ \
> >    / /\ \ \
> >   / / /\ \ \
> >  / / /__\_\ \
> > / / /________\
> > \/___________/
> >
> >
> >
>
>--
>
>Patrick Stickler              Phone: +358 50 483 9453
>Senior Research Scientist     Fax:   +358 7180 35409
>Nokia Research Center         Email: patrick.stickler@nokia.com

------------------------------------------------------------
Graham Klyne                    MIMEsweeper Group
Strategic Research              <http://www.mimesweeper.com>
<Graham.Klyne@MIMEsweeper.com>
        __
       /\ \
      /  \ \
     / /\ \ \
    / / /\ \ \
   / / /__\_\ \
  / / /________\
  \/___________/



