docno="lists-050-4819392"
received="Wed Jan 30 06:39:02 2002"
isoreceived="20020130113902"
sent="Wed, 30 Jan 2002 11:39:27 -0000"
isosent="20020130113927"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="RE: Datatyping Summary"
id="JAEBJCLMIFLKLOJGMELDEEONCCAA.jjc@hplb.hpl.hp.com"
charset="us-ascii"
inreplyto="OF00FC2F89.BCEB6289-ONC1256B51.003C4A2C&#64;bayer-ag.com"
expires="-1"

To:<jos.deroo.jd@belgium.agfa.com>
Cc:<w3c-rdfcore-wg@w3.org>



> I don't follow Jeremy
[ snip ]
>
> nothing can be deduced w.r.t. values
> i.e.
>   dt1(v1) = dt2(v2)
> does *not* mean that v1 = v2

Within any logical datatyping framework of course it does not.
My point is that S-B is explicitly not a datatyping framework. It is a
framework for string manipulation, just like RDF M&S. S-B does not allow the
distinction (within its theoretical model) between dt1(v1) and v1.

RDF M&S is an untyped framework.
S-B reads M&S as meaning every literal is a string.
S-B maintains backward compatibility with this view.

Thus S-B within its own terms, only talks about strings. Within S-B there is
only one possibly denotation of a string, itself.

Within those terms errors will not happen.


But ....

applications want integers as well as strings. Inevitably they will
introduce more than one mapping function, I take your dt1 to map strings to
strings, and dt2 to map strings to integers. S-B may say these are the
application programmer's doing, and wash its hands of the matter.

But the range constraints in S-B appear to license such coversions between
strings and integers above the model theory. The non-expert application
writer may then make type mistakes.

My view is that a datatyping system should assist the application writer in
not making type mistakes.

Jeremy



