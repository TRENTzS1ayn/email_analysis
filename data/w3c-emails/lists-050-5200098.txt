docno="lists-050-5200098"
received="Wed Jan 30 14:42:28 2002"
isoreceived="20020130194228"
sent="Wed, 30 Jan 2002 19:41:32 +0000"
isosent="20020130194132"
name="Brian McBride"
email="bwm@hplb.hpl.hp.com"
subject="Datatyping Summary V2"
id="5.1.0.14.0.20020130180455.04f15148@0-mail-1.hpl.hp.com"
charset="us-ascii"
expires="-1"


To: RDF Core<w3c-rdfcore-wg@w3.org>

An updated summary of the datatyping issues, as I currently understand them.

Issue B1:
=========
In S, if one wants to use both idiom A and idiom B, e.g.

<mary> <age> "10" .
<age> <rdfs:range> <xsd:integer.lex> .

and

<mary> <ageD> _:a .
_:a <xsd:integer.map> "10" .

two properties have to be used, <age> and <ageD>, in this example.
I believe there is a agreement that this is a difference between the
two proposals.  Indeed, it may be said that the main aim of TDL is
to avoid requiring different properties for these different idioms.

Can't Live With:  PatrickS

Issue B2: Multiple Lexical Representations of a data value
==========================================================

S, idiom A, permits multiple lexical representations of a data value:

_:i <xsd:double> "10.1" .
_:i <xsd:double.de> "10,1" .

I believe there is agreement that S-A allows this.

No-one has said this is a can't live with, so I'm proposing to drop 
this.  Going ...


Issue B3: the self entailment issue
===================================

Withdrawn in favour of B4:

From:

   http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2002Jan/0410.html

   [[I accept the reasoning above; it doesn't address my objection;
it' just shows that my example wasn't very good. Sergey's
example makes the point better:]]


Issue B4 - TDL breaks existing code
===================================

This is similar to B3. I've changed the example slightly from Sergey's.
Under TDL, consider the graph:

   _:f <rdf:type> <film> .
   _:f <dc:Title> (_, "10") .
   <mary> <age>   (_, "10").

Does this entail:

   _:x <dc:Title> ?y .
   _:z <age>      ?y .

I believe there is agreement that it does not under the current TDL model 
theory.
It does entail:

   _:x <dc:Title> (_, ?y) .
   _:z <age>      (_, ?y) .

Can't Live With:  DanC

Jeremy:  Updated model theory?

Issue B5: Storage Requirements
===============================

TDL requires significantly more storage to implement.

This is disputed.

Sergey: Do you accept that TDL's storage requirements aren't significantly 
worse than S's (e.g. given TDL can be transformed to S-P), and can 
therefore be dropped.


Issue B6: S requires 4 URI's be registered for each data type
=============================================================

S requires that for each datatype 4 URI's be registered
datatype
datatype.lex
datatype.val
datatype.map

Sergey: Do you agree this is the case? If not, how many URI's are required 
to implement ALL the idioms of S and coexist in the same model.


Issue B7: Complexity
====================

S has too many ways of expressing the same thing.  An RDF processor has to 
be aware of them all.  Supported by Jeremy's error cases message

   http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2002Jan/0397.html

  and a message from Andy Seaborne to rdf comments:

   http://lists.w3.org/Archives/Public/www-rdf-comments/2002JanMar/0058.html



Issue B8: S-B encourages logically (sic) errors in the
application type  processing.
=======================================================

Given:

   _:f <rdf:type> <film> .
   _:f <dc:Title> "10" .
   <mary> <age> "10" .

an application 'knows' that the range of <age> is an integer so it 'knows' 
that mary has <age> 10.  Under S-B, running a query:

   ?x <dc:Title> ?y .
   ?z <age> ?y .

will return ?x = _:f and ?z = <mary>, and knowing that the age of <mary> is 
10, may conclude that the title of the film is also 10.

Can't Live With:  Jeremy



