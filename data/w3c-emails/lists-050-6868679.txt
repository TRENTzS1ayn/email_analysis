docno="lists-050-6868679"
received="Wed Jul 17 11:23:36 2002"
isoreceived="20020717152336"
sent="Fri, 12 Jul 2002 10:34:59 -0700"
isosent="20020712173459"
name="pat hayes"
email="phayes@ai.uwf.edu"
subject="Re: test case A revisited"
id="p05111b00b954bec5b7b0@[130.107.66.132]"
charset="us-ascii"
inreplyto="5.1.0.14.0.20020709155558.028feff8&#64;15.144.25.13"
expires="-1"


To: Brian McBride<bwm@hplb.hpl.hp.com>
Cc:w3c-rdfcore-wg@w3.org


>At 16:48 08/07/2002 -0700, pat hayes wrote:
>
>>>Friday's telecon reminded me that I had left test case A in for a 
>>>reason.  There was more I had to say about it, and writing that 
>>>message the following occurred to me.
>>>
>>>Test case A says:
>>>
>>>   <s1> <p> "lit" .
>>>   <s2> <p> "lit" .
>>>
>>>can we conclude that value of both properties are the same.
>>>
>>>Consider
>>>
>>>   _:b1 rdf:type rdf:Seq .
>>>   _:b1 rdf:_1   "10" .
>>>   _:b2 rdf:type rdf:Seq .
>>>   _:b2 rdf:_1   "10" .
>>>
>>>This would require that the first member of each sequence is the same.
>>>
>>>Given that we also have a common superproperty of the rdf:_xxx 
>>>properties, this essentially means that all literals which are 
>>>members of any container must all have the same dataype, i.e. all 
>>>literals in containers must be tidy.
>>>
>>>I suggest this is incompatible with the untidy literals and a yes 
>>>to test case A above.
>>
>>?? I fail to follow your reasoning here. It seems circular.
>>
>>There are two cases to consider, right? We can have (semantically) 
>>tidy literals, where each literal node labelled with the same 
>>literal denotes the same thing; or we can not. Call these the ST 
>>and NST cases. Test A is 'yes' for ST, 'no' for NST. Now consider 
>>your container example. In an ST reading, b1 and b2 have the same 
>>first element; in an NST reading, they need not.
>
>True, but in the f2f proposal it was suggested that they would 
>because the denotation is a function of the literal and the property,

Ah, I see. Sorry, I had lost that part of the context.

I guess I have (since the F2F) privately given up on the 'clever' 
ideas like this.  Semantically-untidy/lexically-tidy literals seem to 
be more trouble than they are worth, I now think. We should keep the 
syntax/semantics correspondence simple and go firmly one way (tidy 
syntax and semantics; the stake) or the other (untidy syntax) , and 
not shilly-shally.  Examples like the subPropertyOf inference and 
these container examples just serve to make the point that trying to 
be too clever is only going to cause trouble later; and since Dan C. 
is just as stubborn about these proposals as he is about the others, 
why bother?

>  i.e.
>
>>>   <s1> <p> "lit" .
>>>   <s2> <p> "lit" .
>
>|=
>   <s1> <p> _:l .
>   <s2> <p> _:l .
>
>
>>  Put another way: if all literals are tidy, then all literals in 
>>containers must be tidy.
>
>Sure.
>
>>  Well, right. And if all literals are not tidy, the ones in 
>>container need not be either. So... what has been demonstrated, 
>>exactly?
>
>Ok, given:
>
>   <a> rdf:_1 "10" .
>
>what does the "10" denote?  What is in the container?

Well, in the F2F idea, the answer would depend on how you datatyped 
'rdf:_1', I guess. But the real answer is, as you imply, that there 
isn't any rational way to do that since it would apply globally. But 
in general, there isn't any way in *any* of our schemes to rationally 
impose datatyping on tidy literals inside containers via the 
container properties, since properties of containers do not bear any 
relation to the properties of the members. For example, the stake 
proposal wouldn't pass on the lexical check applied to a container to 
any lexical check on any contained literals.

Pat


-- 
---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola,  FL 32501(850)202 4440   fax
phayes@ai.uwf.edu 
http://www.coginst.uwf.edu/~phayes



