docno="lists-051-10336588"
received="Thu Oct 31 11:44:56 2002"
isoreceived="20021031164456"
sent="Thu, 31 Oct 2002 16:47:31 +0000"
isosent="20021031164731"
name="Brian McBride"
email="bwm@hplb.hpl.hp.com"
subject="Re: incorporating datatypes into the MT"
id="5.1.0.14.0.20021031163914.04308080@0-mail-1.hpl.hp.com"
charset="us-ascii"
inreplyto="p05111b3db9e65d36803c&#64;[65.217.30.130]"
expires="-1"


To: pat hayes<phayes@ai.uwf.edu>,w3c-rdfcore-wg@w3.org


At 22:19 30/10/2002 -0600, pat hayes wrote:

>Er..... guys, I need guidance. I was under the impression that our 
>editoral task included incorporating the various aspects of datatyping 
>into our various documents, and that rather than being a separate 
>appendix, as it were, to RDF, that datatyping was now to be fully 
>integrated into the main thread.

Yes.

>In the context of the MT, this means that datatyping is pretty much the 
>first thing that gets mentioned, since one needs it to define what a typed 
>literal means, and one needs that in order to state the basic triple 
>semantics for RDF in section 1.5. In other words, in the document I am now 
>working on, there will be no such thing as a non-datatyped interpretation: 
>datatyping will be built into the very foundation of the language. RDF 
>will *include* datatyping.

That sounds correct, if I'm interpreting it correctly.


>Recent messages from Dan C and Jeremy and Jos, however, have made me 
>realize that some of us apparently expect the MT to be structured rather 
>like it has been in the past, in that there would be a simple basic RDF 
>notion of interpretation which had no such built-in stuff, and datatyping 
>would be one of the later additions.

What built in stuff specifically?  As I understand it, the idea is that 
datatyping is built in.  So for example,

   <a> <b> "foo"^^someDatatype .
   <c> <d> "foo"^^someDatatype .

entails

   <a> <b> _:v .
   <c> <d> _:v .

This must be true for all datatypes, I believe.

On the other hand, for some reason I haven't figured out, the WG were keen 
that:

   <a> <b> "foo"^^dt1 .
   <c> <d> "bar"^^dt2 .
entails
   <a> <b> _:v .
   <c> <d> _:v .

whenever dt1.value("foo") = dt2.value("bar")

should be in a separate category of datatype entailments.  Specific 
entailments in this category depend on specific knowledge of that actual 
datatypes, e.g.

   <a> <b> "10"^^xsd:integer .
   <c> <d> "010"^^xsd:integer .


>So my question is, will incorporating datatyping into the basic RDF MT 
>cause anyone grief? In particular, will it break the proposed API designs 
>apparently being developed? Because if so, we have some hard thinking to 
>do. I really don't see how I can make sense of typed literals without 
>talking about datatypes and datatype mappings.


Just so.

Does any WG member disagree with the characterization above?  Pat: is that 
enough guidance for you?

Brian



