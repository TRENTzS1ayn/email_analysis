docno="lists-051-10549501"
received="Thu Oct 31 15:21:05 2002"
isoreceived="20021031202105"
sent="Thu, 31 Oct 2002 22:20:59 +0200"
isosent="20021031202059"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: Datatyping literals:  question and test cases"
id="003801c2811b$0886d770$48c215ac@NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="p05111b1bb9e73423b7c5&#64;[65.217.30.130]"
expires="-1"


To:"ext pat hayes"<phayes@ai.uwf.edu>
Cc:<w3c-rdfcore-wg@w3.org>




[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com]


----- Original Message ----- 
From: "ext pat hayes" <phayes@ai.uwf.edu>
To: "Patrick Stickler" <patrick.stickler@nokia.com>
Cc: <w3c-rdfcore-wg@w3.org>
Sent: 31 October, 2002 21:32
Subject: Re: Datatyping literals: question and test cases


> >[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, 
> >patrick.stickler@nokia.com]
> >
> >
> >>  >Inlined literals and rdfs:range will *never* work together, except
> >>  >in the single case of rdfs:StringLiteral. I wonder if folks appreciate
> >>  >that oddity.
> >>
> >>  You seem to be assuming that it is impossible for two different
> >>  datatypes to have the same value space.
> >
> >Not at all. But see below.
> >
> >>  I wasn't aware that this was
> >>  a general rule. I would have no problem for example saying that
> >>  rdfs:StringLiteral and xsd:String had the same value space. (NOt the
> >>  same lexical space, but the same value space.)
> >
> >I am presuming, perhaps incorrectly, that for one value space
> >to intersect with another value space that for any two values
> >X and Y which occur in the intersection of those value spaces
> >the same relations hold for them in terms of either datatype.
> >
> >I.e., if X < Y in datatype 1 then X < Y in datatype 2.
> >
> >If one datatype has an ordered value space and the other does
> >not, then can they really intersect?
> 
> Well, what does it mean to say that the space doesn't have an 
> ordering? I mean, its not *impossible* to define an ordering on 
> URIrefs. 

No, but it's a matter of authority. If the "owner" of the datatype
(the agency that has the authority to define it) says there is no
ordering for the members of its value space, then it doesn't have
an ordering.

> I think you have a picture here where a 'space' is something 
> like an algebra, ie a set together with some operations or relations 
> on the set, rather than simply a set or class of things. 

That is my understanding of how XML Schema defines datatypes as
well. As sets with relations on the sets, and subsets share the
relations of their supersets.

> Two 
> different algebras can have the same underlying set. (I think its 
> called the 'carrier' of the algebra, but it was years ago :-)
> 
> >If X = Y in one value space yet X != Y in the other value space
> >can they really intersect?
> 
> Well, not if that really means identity, but then if it meant that, 
> this would be impossible.

Exactly. And that is my point. xsd:string defines a different equality
than xsd:anyURI and therefore they cannot intersect.

And in fact, the recent feedback from the XML Schema WG indicates
that their value spaces are in fact disjunct.

> >
> >I think not, in both cases.
> >
> >Since I do not consider the value space of rdfs:StringLiteral
> >to be ordered, then I do not see that it can intersect with
> >that of xsd:string.
> 
> HOw about saying that xsd:string has an ordering defined on it which 
> isnt relevant to rdfs:StringLiteral?

Well, I may be viewing this wrongly, and certainly this is not my
strongest area, but I'm thinking along the lines that relations
between members of a value space are characteristics of the values
themselves and not contextual for the datatype. I.e. they are members
of that value space because they exhibit those characteristics, and
they will exibit those characteristics in whatever value space or
subset thereof in which they occur. If there is some other "thing"
which does not exibit the same characteristics, no matter how similar,
it is not the same thing. Thus even though one may think that the
string "foo:bar" is just like the URI "foo:bar" we can test that
they are different, that they are different things, because they
exhibit different characteristics in relation to other things in
the universe.

> The reason for being so careful about this terminology is that the 
> operations are defined on the whole space, sure; but the things IN 
> the space are just what they happen to be, which ever category you 
> put them into. So with the operations-over-the-carrier-set picture, 
> any particular rdfs:StringLiteral is indeed an xsd:string and vice 
> versa, even if it makes sense to distinguish the two classes for some 
> 'global' reason.

I may be wrong, but I'm not viewing them as the same thing.

> This is the 'weak typing' view Im giving you here, of ocurse.

Ahhh, right. I'm definitely taking a strong typing view.

Patrick



