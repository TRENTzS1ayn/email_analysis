docno="lists-051-11476051"
received="Tue Sep  3 08:06:12 2002"
isoreceived="20020903120612"
sent="Tue, 3 Sep 2002 15:06:09 +0300"
isosent="20020903120609"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: Datatyping, rdf:type inappropriate"
id="A03E60B17132A84F9B4BB5EEDE57957B160C36@trebe006.europe.nokia.com"
charset="iso-8859-1"
inreplyto="Datatyping, rdf:type inappropriate"
expires="-1"


To:<Jan.Grant@bristol.ac.uk>
Cc:<dave.beckett@bristol.ac.uk>,<w3c-rdfcore-wg@w3.org>




> -----Original Message-----
> From: ext Jan Grant [mailto:Jan.Grant@bristol.ac.uk]
> Sent: 03 September, 2002 14:45
> To: Stickler Patrick (NMP/Tampere)
> Cc: dave.beckett; w3c-rdfcore-wg
> Subject: RE: Datatyping, rdf:type inappropriate 
> 
> 
> On Tue, 3 Sep 2002 Patrick.Stickler@nokia.com wrote:
> 
> >    rdfs:Datatype     The class of RDF compliant datatypes
> 
> Hang on a tick, I'm still not sure what the relation between
> rdf[s?]:Literal and rdf[s?]:Datatype is. If _all_ literals are typed,

Not all literals are typed.

That was suggested in a previous proposal, which presumed untidy
literals and a manditory, if possibly implicit, datatype.

But in the restructured, core proposal, the datatype is not
treated as part of the literal, and nothing whatsoever is
said about untyped literals; taking the view that literals
are opaque structures, and that typed literals are pairings of
datatype and (opaque, structured) literal.

Thus, a literal is a member of rdfs:Literal.

A datatype is a member of rdfs:Datatype.

And a typed literal is a pairing of a datatype and a literal.

> then can you explain why Datatype is different from Literal again?

Because a datatype is different from a literal. They're not even similar.

A datatype is a class that has a value space, 
a lexical space, and an N:1 mapping (where N > 0) from
the lexical to value space.

A literal is a structure comprised of unicode string, optional xmlbit,
and optional xml:lang value.

A typed literal is the latter qualified by the former, which
together unambiguously denote a datatype value.

The unicode string component of the literal structure is taken
to be a member of the lexical space of the specified datatype,
and the L2V mapping for the datatype includes a mapping from
that lexical form to a member of the value space of that same
datatype, and it is that value that the typed literal node 
denotes.

Is that clearer?

Patrick



