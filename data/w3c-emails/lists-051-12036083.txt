docno="lists-051-12036083"
received="Mon Sep  9 06:32:02 2002"
isoreceived="20020909103202"
sent="Mon, 09 Sep 2002 11:29:59 +0100"
isosent="20020909102959"
name="Brian McBride"
email="bwm@hplb.hpl.hp.com"
subject="Untyped Literal Semantics"
id="5.1.0.14.0.20020909095012.024e5c68@0-mail-1.hpl.hp.com"
charset="us-ascii"
expires="-1"


To: RDF Core<w3c-rdfcore-wg@w3.org>


It would appear that folks are biting at the bit to discuss untyped literal 
semantics.  As this is a topic that arouses some passions, I'd like to 
suggest some guidelines for how we conduct it.

My first suggestion is that we use rdf/xml syntax throughout.  The issue is 
not really what:

   <a> <b> "foo" .

means.  As Pat has recently shown, we can create new constructions in 
n-triples more or less at will. That still leaves the question of what does 
the following rdf/xml translate to in terms of n-triples.

   <rdf:Description rdf:nodeID="jenny">
     <foo:age>10</foo:age>
   </rdf:Description>

I suggest the issues here arise in RDF/XML, for example in CC/PP and DC and 
what will be readily understood by our community of rdf/xml users.

Secondly, I suggest we aim to decide, one way or the other.  As some folks 
have recently pointed out there may be the possibility of ducking the 
question.  My motivation in getting involved in this WG was a desire to 
make the current specs more clear and precise.  I suggest it would be 
better to decide if we possibly can.  Only if we cannot, should we duck the 
question.

Third, I suggest we are choosing between one of three options:

   o untyped literals are self denoting
   o untyped literals denote a value from the value space of some datatype
   o we can't decide

Please can we couch any discussion in terms of advantages and disadvantages 
of these choices.  As this is an issue which can ascend to the 
philosophical, I suggest we give greater weight to pragmatic concerns.

Finally, I suggest we guillotine the discussion.  The decision will be made 
at the telcon of 20th Sept unless a consensus emerges before then.

Brian



