docno="lists-051-12143622"
received="Tue Sep 10 05:33:21 2002"
isoreceived="20020910093321"
sent="Tue, 10 Sep 2002 12:33:19 +0300"
isosent="20020910093319"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: Untyped Literal Semantics"
id="004901c258ad$192f4530$294516ac@NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="OF63357542.2A3E26ED-ONC1256C2F.00455E46&#64;agfa.be"
expires="-1"


To:"Brian McBride"<bwm@hplb.hpl.hp.com>,"ext Jos De_Roo"<jos.deroo.jd@belgium.agfa.com>
Cc:"RDF Core"<w3c-rdfcore-wg@w3.org>




[Patrick Stickler, Nokia/Finland, (+358 50) 483 9453, patrick.stickler@nokia.com]


----- Original Message ----- 
From: "ext Jos De_Roo" <jos.deroo.jd@belgium.agfa.com>
To: "Brian McBride" <bwm@hplb.hpl.hp.com>
Cc: "RDF Core" <w3c-rdfcore-wg@w3.org>
Sent: 09 September, 2002 15:55
Subject: Re: Untyped Literal Semantics


> 
> > It would appear that folks are biting at the bit to discuss untyped 
> literal
> > semantics.  As this is a topic that arouses some passions, I'd like to
> > suggest some guidelines for how we conduct it.
> 
> my understanding of "untyped" is "no type"
> which is not the same as "unknown type"
> 
> > My first suggestion is that we use rdf/xml syntax throughout.  The issue 
> is
> > not really what:
> >
> >    <a> <b> "foo" .
> >
> > means.  As Pat has recently shown, we can create new constructions in
> > n-triples more or less at will. That still leaves the question of what 
> does
> > the following rdf/xml translate to in terms of n-triples.
> >
> >    <rdf:Description rdf:nodeID="jenny">
> >      <foo:age>10</foo:age>
> >    </rdf:Description>
> 
> I would say
> 
>   :jenny foo:age "10" .
> 
> i.e. no type
> 
> whereas e.g.
> 
>    <rdf:Description rdf:nodeID="jenny">
>      <foo:age rdf:datatype="_:t">10</foo:age>
>    </rdf:Description>
> 
> would be
> 
>   :jenny foo:age _:t"10" .
> 
> i.e. unknown type

Well, per Jeremy's proposal for untidy syntax, irrespective of
the semantics, we'd always have

     :jenny foo:age _:t"10" .

and then decide in the MT whether _:t denotes an unknown datatype
or is simply a syntactic mechanism preserving the uniqueness of
the occurrence of the literal. The abstract syntax would be the
same in either case.

If we opt for tidy semantics, then we simply say that for any
non-explicitly-typed literal node, its interpretation
is that it denotes the literal

   I(xxx"LLL") = "LLL"

If we opt for untidy semantics, then we say that the systemID
denotes some datatype, and rely on mechanisms such as rdfs:range
to clarify which datatype it is

   I(xxx"LLL") = L2V(I(xxx))("LLL")

Taking the above approach, having a single consistent concrete
and abstract syntax for either tidy or untidy intepretation, allows 
all of the documents but the MT to be completed without later impact 
by any decision made about semantics, which simply can be addressed
in the MT document as required. And if we choose not to decide
about the semantics, it allows applications to augment the RDF MT
accordingly to adopt either tidy or untidy interpretation without
having to introduce any changes on the syntax.

Patrick



