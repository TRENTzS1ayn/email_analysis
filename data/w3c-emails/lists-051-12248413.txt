docno="lists-051-12248413"
received="Wed Sep 11 07:33:02 2002"
isoreceived="20020911113302"
sent="Wed, 11 Sep 2002 13:32:32 +0200"
isosent="20020911113232"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="RE: Datatyping - abstract syntax - test case"
id="BHEGLCKMOHGLGNOKPGHDMEBGCAAA.jjc@hpl.hp.com"
charset="iso-8859-1"
inreplyto="001201c25985$92f38330$864416ac&#64;NOE.Nokia.com"
expires="-1"

To:"Patrick Stickler"<patrick.stickler@nokia.com>,"ext Jeremy Carroll"<jjc@hplb.hpl.hp.com>,<w3c-rdfcore-wg@w3.org>



>
> As far as I understood it, last Friday's concensus vote
> was based on labeling typed literal nodes with a pairing
> of datatype designation and lexical form, not with values.
>
> If you are proposing that we pull that stake out of the
> ground and do something different, I think you need to
> argue in terms of fatal flaws in how it is specified
> at present.

Different interpretations of the level of commitment we made to Part I.

I didn't see what I was saying as trying to radically change Part I, more
just articulate a detail with greater clarity.

I think the <xsd:decimal>"2.00" and <xsd:decimal>"2.0" case is interesting.

If, as you're proposing, we keep both the datatype URI and the string
around, then we have ruled out a database implementations that stores the
number in a native format (since the two cases would be identical).

If, as I am proposing, we say both map to the value, then we get slightly
different behaviour from implementations that are aware of any specific
datatype (i.e. xsd:decimal in this case) and those that don't know it (which
would have to fall back to your proposed solution).

I think it's more important to allow efficient database implementations, and
so prefer to live with the lack of clarity and small interoperability issues
depending on how many datatypes are known by an implementation.

Jeremy



