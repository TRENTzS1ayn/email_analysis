docno="lists-051-12712537"
received="Fri Sep 13 04:54:09 2002"
isoreceived="20020913085409"
sent="Fri, 13 Sep 2002 10:53:55 +0200"
isosent="20020913085355"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="Re: abstract syntax representation of inline literals"
id="BHEGLCKMOHGLGNOKPGHDIECDCAAA.jjc@hpl.hp.com"
charset="iso-8859-1"
inreplyto="abstract syntax representation of inline literals"
expires="-1"

To:<w3c-rdfcore-wg@w3.org>



Patrick:
>Let's try another example that may help separate what is clearly
>obvious to us, knowing about integers, and what is clear to RDF.

>Is <foo:blarg>"xxxyyy" == <foo:blarg>"xxxxyyy"???

>After all, they only differ by having one extra 'x' in the
>second case. How could that really matter? Well, we really
                                            ===============
>don't know, because we don't know what the L2V mapping for
===========================================================
>foo:blarg is,
=============

and why not?
You are making an RDF like "Open World Assumption", where we don't know
things, in an inappropriate context.

It's an xsd datatype, xsd uses the closed world assumption, everything we
need to process this correctly will have been present to the document
author, and they are obliged to provide it to us.

>> RDF closure would be transformed from a fairly easy computation to a
merely
>> theoretical device. Fine for OWL (where we do have to worry about
infinity),
>> unnecessary and a mistake for RDF.

>I'm not going to say anything more about this issue, being woefully
>unqualified. Perhaps Pat or others may wish to offer comments about
>this.

I think you overall approach of saying that datatyping is an external
function works,  but that the approach of making it an internal function is
better; and will more closely correspond to implementations. However, I note
that you stop short of actually doing datatyping like this. Your RDF allows
you to talk about a datatype, but not to actually arrive at something useful
like an integer.

>I.e. the MT will say that <xsd:integer>"10" denotes the member of the
>value space of <xsd:integer> to which the lexical form "10" maps to
>according to the L2V mapping defined for <xsd:integer> but it does NOT
>say that <xsd:integer>"10" denotes the value ten. It cannot say that,
>because it does not include the semantics of <xsd:integer>.

We will have a normative reference to XSD, which, I believe, *does* say that
<xsd:integer>"10" is the number ten.

Let's try for a short summary of the key points where we diverge ...
I don't think either of us is saying that the other's point of view doesn't
work, just that the balance of arguments goes one way or the other.

Jeremy



