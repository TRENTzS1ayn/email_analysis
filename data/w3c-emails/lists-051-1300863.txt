docno="lists-051-1300863"
received="Fri Nov  8 16:20:18 2002"
isoreceived="20021108212018"
sent="Fri, 8 Nov 2002 15:20:38 -0600"
isosent="20021108212038"
name="pat hayes"
email="phayes@ai.uwf.edu"
subject="Re: Technical tweaks to the MT, for reviewers."
id="p05111b2ab9f1d9c92d5b@[65.217.30.130]"
charset="us-ascii"
inreplyto="20021108.133920.40877001.pfps&#64;research.bell-labs.com"
expires="-1"


To:"Peter F. Patel-Schneider"<pfps@research.bell-labs.com>
Cc:w3c-rdfcore-wg@w3.org,herman.ter.horst@philips.com


>From: pat hayes <phayes@ai.uwf.edu>
>Subject: Technical tweaks to the MT, for reviewers.
>Date: Fri, 8 Nov 2002 11:47:33 -0600
>
>>
>>  1. There is a problem I mentioned earlier with literals like
>>  "badnumber"^^xsd:integer . They have to denote something, but they
>>  shouldn't denote a literal value (because they, er, don't, right?)
>>  The trouble is that until we go ask the datatype, RDF can't tell the
>>  difference between one of these and "12345"^^xsd:integer. So in the
>>  basic RDF MT, we need to say that typed literals denote something but
>>  we don't yet know even if its a literal value, so it has to be in IR,
>>  not in LV (as at present).
>>
>>  So what do we do when we find out that it is bad? The current draft
>>  invents an ad-hoc thingie (a triplet) to be the value in this case,
>>  but that is not a good solution. Better would be to say that it
>>  denotes some unknown but arbitrary thing which, whatever it is, is
>>  not a literal value. This adds a slightly odd technical extension to
>>  the definition of datatyped interpretation, which will now include a
>>  new mapping IBL from datatyped literals to things in IR that are
>>  *not* in LV, which are the 'things' that the literal will denote *if*
>>  it is badly typed.
>
>I think that I would prefer the interpretation of bad literals to be
>elements of LV that are not in L2V for any datatype.  I think that this is
>just a stylistic preference, but there may be consequences in
>more-expressive languages (such as OWL, but I can't think of any).  Perhaps
>the easiest way to go would be to require bad literals just not to denote
>anything in any datatype value space, and leave whether they are in LV
>open.

OK, I see what you mean, but not how to do it elegantly. There is no 
way to refer to the set of things in any L2V value space..... Of 
course I could introduce one, but then what is the point of having LV 
?

The difference in entailments is whether we want

aaa ppp <any literal, even a bad one>

-->

aaa ppp _:xxx .
_:xxx rdf:type rdfs:Literal .

Right now, it does not; this works only for good literals. If we say 
it does, then is there any way to distinguish good from bad literals?

Pat


>
>[...]
>
>>
>>  Pat
>
>peter


-- 
---------------------------------------------------------------------
IHMC(850)434 8903   home
40 South Alcaniz St.(850)202 4416   office
Pensacola              (850)202 4440   fax
FL 32501           (850)291 0667    cell
phayes@ai.uwf.edu          http://www.coginst.uwf.edu/~phayes
s.pam@ai.uwf.edu   for spam



