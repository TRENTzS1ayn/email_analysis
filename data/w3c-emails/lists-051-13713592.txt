docno="lists-051-13713592"
received="Tue Sep 24 08:43:28 2002"
isoreceived="20020924124328"
sent="Tue, 24 Sep 2002 15:41:18 +0300"
isosent="20020924124118"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: DECIDED: untidy semantics"
id="00bc01c263c7$ae1d4230$d74416ac@NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="OF52760780.5C67086F-ONC1256C3E.00422E46-C1256C3E.0044756A&#64;agfa.be"
expires="-1"


To:"ext Jos De_Roo"<jos.deroo.jd@belgium.agfa.com>
Cc:"Brian McBride"<bwm@hplb.hpl.hp.com>,"w3c-rdfcore-wg"<w3c-rdfcore-wg@w3.org>




[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com]


----- Original Message ----- 
From: "ext Jos De_Roo" <jos.deroo.jd@belgium.agfa.com>
To: "Patrick Stickler" <patrick.stickler@nokia.com>
Cc: "Brian McBride" <bwm@hplb.hpl.hp.com>; "w3c-rdfcore-wg" <w3c-rdfcore-wg@w3.org>
Sent: 24 September, 2002 15:27
Subject: Re: DECIDED: untidy semantics


> 
> [...]
> 
> > Perhaps I'm not fully understanding you. I'm still struggling to
> > see the added utility of the "typeless" literal over the string
> > typed literal, apart from perhaps syntactic sugar so one doesn't
> > have to type as much. They seem to be functionally equivalent.
> >
> > What am I missing?
> 
> well, it's a bit like the case of a uri
> you don't say xsd:string<uri> don't you
> "xyz" is also just an identifier

Yes, but a URIref is an identifier with unambiguous
and globally consistent meaning. A bare literal,
without any explicit or implicit datatype denotation
is ambiguous, so we have to prefix it with something
that denotes the datatype which constrains its
interpretation to a specific value. Whether the
datatype is denoted explicitly by URIref or implicitly
by systemID is a secondary issue.

So if you mean the actual string "xyz" then you say 
xsd:string"xyz". If you mean some value that is
represented by the string "xyz" (which also, by the
way, may be the actual string) you say _:x"xyz".

You don't have to prefix a URIref with anything else
in this way because its meaning is already unambiguous.

Eh?

Patrick



