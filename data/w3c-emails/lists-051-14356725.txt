docno="lists-051-14356725"
received="Thu Sep 26 09:23:05 2002"
isoreceived="20020926132305"
sent="Thu, 26 Sep 2002 16:22:57 +0300"
isosent="20020926132257"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: Some excerpts from AdobeXMP SDK Documentation"
id="00f801c2655f$d3fbfac0$d74416ac@NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="5.1.0.14.0.20020926134941.02165128&#64;0-mail-1.hpl.hp.com"
expires="-1"


To:"w3c-rdfcore-wg"<w3c-rdfcore-wg@w3.org>,"ext Brian McBride"<bwm@hplb.hpl.hp.com>




[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com]


----- Original Message ----- 
From: "ext Brian McBride" <bwm@hplb.hpl.hp.com>
To: "Patrick Stickler" <patrick.stickler@nokia.com>; "w3c-rdfcore-wg" <w3c-rdfcore-wg@w3.org>
Sent: 26 September, 2002 16:00
Subject: Re: Some excerpts from AdobeXMP SDK Documentation


> At 15:10 26/09/2002 +0300, Patrick Stickler wrote:
> 
> [...]
> 
> > >
> > > Oh, then my question must not have been clear.  You claim that XMP is
> > > untidy.  I am asking whether there is an objective test whether an API is
> > > tidy or not.
> > >
> > > That is a valid question, right?
> 
> Hmmm, you don't seem to have responded to this.

Sorry, yes, the latter is a valid question, but I don't
see the first and second formulations as equivalent.

> [...]
> 
> >I would say that Jena is fairly agnostic overall.
> 
> Yet that is not the result the test you described in:
> 
>    http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2002Sep/0300.html
> 
> would give.  I'm having a little trouble understanding what consistent test 
> you are applying.

I am saying that Jena is not applying any such test. Jena provides
various methods for some developer to apply such a test, but
Jena does not appear to provide any methods or functions which
force either a string-based or value-based interpretation
of inline literals. (and providing "literal" access to the
object as a string literal does not impose any interpretation
of that literal node, it's just letting applications get at
the form of expression).

> >  The single
> >equality comparison method suggests a syntactic comparison,
> >rather than a semantic comparision (which is understandable,
> >given the generic nature of Jena) and the fact that equality
> >is tested on the entire statement means that Jena has nothing
> >to say about whether the following entailment holds or not:
> >
> >IF
> >    Jenny age "10" .
> >    Movie title "10" .
> >THEN
> >    Jenny age _:x .
> >    Movie title _:x .
> 
> I suggested in:
> 
>    http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2002Sep/0284.html
> 
>   [[model.contains(c, d, a.getProperty(b).getObject())]]
> 
> was an accurate representation of the entailment.  Would you accept that?

I would accept it as *one* possible string-based interpretation
of inline literals expressed using the Jena API, but not any
fixed string-based interpretation mandated nor even suggested by 
the Jena API.

You could also have made the comparision of objects based on 
the Jena API by converting the inline literals to values
and comparing the values.

Also, the above entailment could be made impossible to arrive at
if inline literals would have unique labels, such that for any two
inline literals, the above contains() method would always
be false, if it reflects syntactic equality, that is.

Thus *Jena* does not say whether the above entailment holds,
even though a developer might implement a comparison function
(as you have done) which reflected that entailment, or implemented 
a comparison function that precluded that entailment.

Furthermore, one might very well have both string-based and
value-based comparision functions, as Jeremy, Frank, myself
and others have at various times suggested, which reflect equality 
of form (a kind of "syntactic entailment") versus equality of meaning
("semantic entailment"). 

But in the end, it is the developer who is imposing either the 
string or value based interpretation. Not the Jena API. 

Patrick



