docno="lists-051-14709632"
received="Fri Sep 27 07:39:40 2002"
isoreceived="20020927113940"
sent="Fri, 27 Sep 2002 07:54:55 -0400"
isosent="20020927115455"
name="Frank Manola"
email="fmanola@mitre.org"
subject="Re: why I object (was: Intentions of XMP)"
id="3D94470F.6090601@mitre.org"
charset="us-ascii"
inreplyto="832E0FE1-D1D4-11D6-B387-003065F376B6&#64;aaronsw.com"
expires="-1"


To: Aaron Swartz<me@aaronsw.com>
CC: RDF Core<w3c-rdfcore-wg@w3.org>


Aaron--

I agree that we need to take into consideration how people are really 
using RDF (and what they are using it for).  However, I for one need 
some clarification of your points (and also of corresponding issues 
being raised by others).  In particular:

1.  Does the complexity you refer to here include the datatyping 
facility itself (which I thought we'd generally agreed on), or just an 
interpretation of value-based semantics for in-line literals?

2.  On re-looking at the datatype working proposal of 29 August 2002, 
Part 2 section C contains a discussion of the semantics of in-line 
literals, and goes over the two options.  Section C2 discusses the 
ramifications of picking value semantics, and in particular C2.2.2.1 
states that "legacy RDF/XML remains valid, albeit underspecified".  It 
also says that "perpectually untyped literals [I assume this means those 
not governed by explicit range declarations in schemas] remain 
acceptable property values, and their significance to applications and 
users is as lexical forms, to be interpreted outside the scope of RDF." 
  Now, I may be wrong, but this sounds to me like what people 
effectively do now (that is, they are perfectly aware that the "10" in 
<age>10</age> is a representation of an integer).  Perhaps we could now 
take up part 2 of this datatype working proposal as at least part of the 
basis of the new analysis we are now engaged in.  In particular, on 
looking at the description of the two options in part 2 of that 
proposal, do people think that analysis is right or wrong?  Either way, 
do they think that analysis needs to consider additional things in order 
to be complete?

Finally, I agree that we need to shield RDF users (and, the extent we 
can, implementors) from unnecessary complexity.  But one of the issues 
we have to address in this discussion is where any added complexity we 
are now discussing will appear, and whether it will change the way any 
of our "stakeholders" actually do things.  If it's only "specification 
complexity", for the purposes of precise definition, that's one thing. 
If there's a lot of legacy code or legacy data that has to change, 
that's another (it still may be appropriate to require the change, but 
the point I'm making is that that's a weightier matter).  I'd like to 
see a better separation of these issues in the discussion.

--Frank


Aaron Swartz wrote:

> 
> An Adobe XMP developer wrote:
> 
>> We store as RDF because it works. We are not RDF theory centric. We 
>> are not
>> at all concerned with the formalisms of triples. The Adobe toolkit has no
>> notion of triples and tries to not explicitly expose RDF.
> 
> 
> I believe this is the kind of reality this group needs to confront.
> 
> As long as we continue to throw more needless things into the core like 
> this, we will confuse and alienate such key developers. If this working 
> group wants RDF to be popular, it should focus on simplifying it rather 
> than make it more complicated.
> 
> As XMP demonstrates, if apps want to do value-based comparisons, they 
> will do so with or without a decision from us. Let's stop enforcing 
> complexity on all for the benefit of few.
> 


-- 
Frank Manola                   The MITRE Corporation
202 Burlington Road, MS A345   Bedford, MA 01730-1420
mailto:fmanola@mitre.org       voice: 781-271-8147   FAX: 781-271-875



