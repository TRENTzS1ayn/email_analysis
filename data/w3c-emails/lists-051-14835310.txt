docno="lists-051-14835310"
received="Fri Sep 27 12:25:16 2002"
isoreceived="20020927162516"
sent="Fri, 27 Sep 2002 12:24:31 +0100"
isosent="20020927112431"
name="Graham Klyne"
email="Graham.Klyne@MIMEsweeper.com"
subject="Re: a cunning plan (was: Re: On Consensus)"
id="5.1.0.14.2.20020927121734.03a98070@127.0.0.1"
charset="us-ascii"
inreplyto="003901c265f6$86d74410$e180720a&#64;NOE.Nokia.com"
expires="-1"


To:"Patrick Stickler"<patrick.stickler@nokia.com>
Cc:<w3c-rdfcore-wg@w3.org>


At 10:21 AM 9/27/02 +0300, Patrick Stickler wrote:

>Why is it such a chore for folks who want inline literals
>to be interpreted as strings to simply declare the intended
>string datatype for those properties, allowing troublefree
>syndication of knowledge from arbitrary systems? E.g.
>
>    dan:age rdfs:range xsd:string .
>    pat:age rdfs:range xsd:integer .

I think there are many cases (e.g. dublin core, RSS, W3C picture metadata, 
etc) where this level of simplification just wouldn't work.  These are 
systems from the "scruffy" tradition that just aren't too concerned about 
whether the values are strings or not, as long as the software can figure 
it out.

In terms of formal semantics, this corresponds to properties whose objects 
can denote strings OR other values. dc:creator comes to mind:  I think the 
dublin core folks would accept either of these:

     aBook dc:creator "Paperback Writer" .

or

     aBook dc:creator _:x .
     _:x rdf:type Person .
     _:x foaf:name "Paperback Writer" .
     _:x foaf:mbox <mailto:writer@paperback.com> .

as legitimate uses for dc:creator.

#g


-------------------
Graham Klyne
<GK@NineByNine.org>



