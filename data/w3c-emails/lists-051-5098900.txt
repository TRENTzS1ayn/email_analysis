docno="lists-051-5098900"
received="Mon Nov 25 14:51:51 2002"
isoreceived="20021125195151"
sent="Mon, 25 Nov 2002 19:51:26 +0000"
isosent="20021125195126"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="Re: Action DanC? [was Re: More on XSD in RDF]"
id="3DE27F3E.7070004@hpl.hp.com"
charset="UTF-8"
inreplyto="1038251090.5318.225.camel&#64;dirk"
expires="-1"


To: Dan Connolly<connolly@w3.org>
CC: Brian McBride<bwm@hplb.hpl.hp.com>, Patrick Stickler<patrick.stickler@nokia.com>, ext Jeremy Carroll<jjc@hplb.hpl.hp.com>,w3c-rdfcore-wg@w3.org




>>It seems to me that what we need, as well as test cases, is an RDF Schema 
>>for XML Schema datatypes.  If we are going to expect an xsd datatypes aware 
>>processor to be aware of the class hierarchy,
>>
> 
> ???
> 
> where does that come from?
> 


I think that one's my fault ...

Suppose we have an entailment like:

_:b rdf:type xsd:nonNegativeInteger .
_:b rdf:type xsd:nonPositiveInteger .
<eg:a> <eg:b> _:b .

entails

<eg:a> <eg:b> "0"^^xsd:decimal .

It is not clear:
- whether we expect RDF reasoners to find this.
- how much help we should be giving implementors.

A complete XSD reasoner (i.e. one that is able to find all such 
entailments, including with user defined types, and maybe with OWL stuff as 
well) would be a lot of work!! (It requires being able to use a mixture of 
any number of patterns, on the lexical space, and min and max values, as 
well as dealing with the lexical-to-value mappings of float and double that 
are complex).
Providing, once for all, the class hierarchy of XSD, which I am working 
towards in:

   http://sealpc09.cnuce.cnr.it/jeremy/xsd-rdf-2002-11-25/

seems at least an appropriate concession towards implementors.
Particularly if it's controversial (which seems likely) it is better to get 
it nailed down.

Jeremy


PS - the format proposal got thrown out because it can't do the job for 
webont. I think you need to address how to do cardinaliy constraints 
without ever considering values .... Yes, it is conceptually simpler, but 
no, it isn't datatyping. Hmmm, format constrained to canonical forms would 
cope with cardinality constraints ... we could make it part of the concrete 
syntax to abstract syntax mapping that lexical forms were canonicalized, 
then we could avoid thinking about values. This would give us yet another 
version of equality, which differed even more from that in XML schema.
I don't think we can duck the problems.



