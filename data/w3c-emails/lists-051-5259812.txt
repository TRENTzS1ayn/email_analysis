docno="lists-051-5259812"
received="Tue Nov 26 12:46:55 2002"
isoreceived="20021126174655"
sent="Tue, 26 Nov 2002 18:46:15 +0100"
isosent="20021126174615"
name="Jos De_Roo"
email="jos.deroo.jd@belgium.agfa.com"
subject="Re: Yet more XSD/RDF"
id="OF3C2578B5.A4EC3D89-ONC1256C7D.005F9B4E-C1256C7D.00619EA7@agfa.be"
charset="us-ascii"
inreplyto="Yet more XSD/RDF"
expires="-1"

To:"Jeremy Carroll<jjc"<jjc@hpl.hp.com>
Cc:w3c-rdfcore-wg@w3.org




> I completed my investigation doc.
>
> See:
>
>
http://lists.w3.org/Archives/Public/www-archive/2002Nov/att-0092/02-index.html


that's an impressive work!

> More important points are:
>
> - there are issues with the XSD document: most is clear, a small part is
> clear in the opposite direction.
> - types derived by restriction correspond to rdfs:subClassOf
> - don't use xsd:QName, xsd:ENTITY, xsd:ENTITIES

right

> - even if we stick to the bits that are clear then implementation looks
> hard.
> Particularly any test that relies on finiteness of a datatype, or of an
> intersection between datatypes.

right

>
> Another hard entailment:
>
> _:a rdfs:subClassOf xsd:postiveInteger .
> _:a rdfs:subClassOf xsd:byte .
>
> entails
>
> _:a rdfs:subClassOf xsd:unsignedLong .
>
>
> (I don't think my paper helps much with that one).

well, at least it helped to have some rules such as in
http://www.agfa.com/w3c/euler/xsd-rules
e.g.

  { ?s a xsd:int, xsd:nonNegativeInteger } => { ?s a xsd:unsignedLong } .
  { ?s a xsd:short, xsd:nonNegativeInteger } => { ?s a xsd:unsignedInt } .
  { ?s a xsd:byte, xsd:nonNegativeInteger } => { ?s a xsd:unsignedShort } .

but we can indeed forget about completeness ;-)

on the other hand it is surely the case that
"1.0"^^xsd:decimal and "1.0"^^xsd:float
denote the *same* number (they unify)
and that can be clearly realized
e.g. by checking that they are
numeric and then do a compare
after some type promotion

-- ,
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/



