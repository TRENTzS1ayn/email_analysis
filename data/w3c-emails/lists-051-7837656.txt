docno="lists-051-7837656"
received="Wed Oct 23 09:10:11 2002"
isoreceived="20021023131011"
sent="Wed, 23 Oct 2002 16:10:05 +0300"
isosent="20021023131005"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: simple entailments for numerals"
id="001901c27a95$81604140$1381720a@NOE.Nokia.com"
charset="iso-8859-1"
inreplyto="200210231418.15752.jjc&#64;hpl.hp.com"
expires="-1"


To:"ext Jeremy Carroll"<jjc@hpl.hp.com>,<w3c-rdfcore-wg@w3.org>




[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com]



> but, for Patrick's preferred? non-standard datatyping

I have nothing against XML Schema datatypes and use
them myself for alot of things, as well as a basis
for proprietary, more constrained datatypes internally.

But as the UAProf Boolean vs. XML Schema Boolean or the
Scheme Integer vs. XML Schema Integer examples both
show, just because a given subclass of an XML Schema
datatype has a shared value space, that doesn't mean it
will have a shared lexical space or L2V mapping, and
that should be clear to RDF users, and the mechanisms
provided by RDF or recommended for use with RDF should
also take that into account.

I'm not saying we shouldn't recommend and prefer XML Schema
datatypes, but we should be up-front about the fact that
RDF Datatyping has a broader scope, in order to support
cases such as UAProf -- and surely many more cases will
come along in the future.

> I think we have done our bit for XSD by making it the preferred RDF datatyping 
> mechanism - IMO it doesn't need to be built-in as such.

I agree.

Patrick



