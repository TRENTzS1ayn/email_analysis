docno="lists-052-11700675"
received="Mon Jan 27 09:28:19 2003"
isoreceived="20030127142819"
sent="Sun, 26 Jan 2003 11:50:51 +0000"
isosent="20030126115051"
name="Graham Klyne"
email="GK@NineByNine.org"
subject="Re: problems with RDF datatyping"
id="5.1.0.14.2.20030126114115.00a23840@127.0.0.1"
charset="us-ascii"
inreplyto="p05111b0cba534b68c869&#64;[10.0.100.247]"
expires="-1"


To: pat hayes<phayes@ai.uwf.edu>
Cc:"Peter F. Patel-Schneider"<pfps@research.bell-labs.com>,bwm@hplb.hpl.hp.com,w3c-rdfcore-wg@w3.org


At 12:27 PM 1/21/03 -0700, pat hayes wrote:
>>Then what good is RDF datatyping?
>
>It presumes some extrnal scheme for locating datatypes (datatyping 
>inforamation, if you like) by usiung urirefs.  It does not provide a means 
>to create such information or to attach it to a uriref; that is the 
>business of the definer of the datatypes in question. RDF can use it, 
>however, once it is defined.

Maybe of interest... as a result of some recent work I did to try and 
describe access control transformations in RDF [1], I'm looking into using 
Haskell [2] as an inference layer for RDF.  I just spent a happy plane 
journey trying to understand how to do lexical->value transforms in a 
purely functional environment using higher order functions.  Being a *pure* 
functional programming environment, Haskell has some nice program 
provability properties which I think would lend well to this area of 
formally defining datatypes.

#g
--

[1] http://www.ninebynine.org/SWAD-E/Intro.html#HomeNetAccessDemo
(I think the URI is correct, but can't be sure as I've no Internet right now)

[2] http://www.haskell.org/


-------------------
Graham Klyne
<GK@NineByNine.org>



