docno="lists-052-15442726"
received="Thu Jul 24 09:23:25 2003"
isoreceived="20030724132325"
sent="24 Jul 2003 14:19:47 +0100"
isosent="20030724131947"
name="Brian McBride"
email="bwm@hplb.hpl.hp.com"
subject="Re: first pass parseType=&quot;Literal&quot; text for primer"
id="1059052787.2327.53.camel@dhcp-91-136.hpl.hp.com"
inreplyto="4.2.0.58.J.20030721142727.052bf5e8&#64;localhost"
expires="-1"

To: Martin Duerst<duerst@w3.org>
Cc: rdf core<w3c-rdfcore-wg@w3.org>, i18n<w3c-i18n-ig@w3.org>



Martin,

Thanks for the comments.  I'll send out new text shortly that adopts
them.  Your last comment is perhaps a little metaphysical, in that it
hinges on what is meant by application, so I've rewritten without that
term.

New version follows ...

Brian

On Mon, 2003-07-21 at 19:33, Martin Duerst wrote:
> Thanks for moving this forward.
> 
> At 18:21 03/07/21 +0100, Brian McBride wrote:
> 
> >4.5 parseType="Literal"
> >
> >The RDF/XML syntax is designed to make it easy for the values of
> >properties to be fragments of XML.  Whilst this feature is may be used
> >with arbritary fragments of XML, it was designed specifically to enable
> >the values of properties to be rich text represented as XML markup.
> >
> >For example, A publisher might maintain RDF meta data that includes the
> >titles of books and articles.  Whilst such titles are often just simple
> >strings of characters, this is not always the case.  The titles of books
> >on mathematics may contain mathematical formulae, that could be
> >represented using MathML [@@REF].  Titles may include HTML markup.
> 
> Titles may be multilingual. Titles may need markup for bidirectional
> rendering. Titles may contain Ruby Annotations or special glyph
> variants.
> 
> 
> >For example  [@@complete namespaces etc]:
> >
> >   <rdf:Description>
> >     <dc:title rdf:parseType="Literal">  <!-- @@spelling? -->
> >       <span xml:lang="en">
> >         The <em>&lt;br /&gt;</em> Element Considered Harmful.
> >       </span>
> >     </dc:title>
> >   </rdf:Description>
> >
> >describes a graph containing one triple:
> >
> >   _:a <dc:title> " \
> >       <span xml:lang="en" xmlns:dc="@@"> \
> >         The <em>&lt;br /&gt;</em> Element Considered Harmful. \
> >       </span>"^^rdf:XMLLiteral .  # @@ needs checking
> >
> >The rdf:parseType="Literal" attribute in the RDF/XML indicates that all
> >the XML within the <dc:title> element is an XML fragment that is the
> >value of the dc:title property.
> >
> >The value of the property is a typed literal, whose datatype,
> >rdf:XMLLiteral
> 
> add a comma here
> 
> >is defined by RDF, specifically to represent fragments of
> >XML.  The XML fragment is canonicalized according to the XML Exclusive
> >Canonicalization recommendation [@@ref].  This causes declarations of
> >used namespaces to be added to the fragment, the escaping of reserved
> >characters such as '<', '>' and '&', and possibly, the re-ordering of
> >attributes.  Contextual attributes, such as xml:lang and xml:base are
> >not inherited from the RDF/XML document, and, if required, must, as
> >shown in the example, be explicitly specified in the XML fragment.
> >
> >This example illustrates that designers should take care when designing
> >RDF data.  In cases where the value of a property may sometimes contain
> >rich text and sometimes not, the designer should either use
> >rdf:parseType="Literal" throughout, or design the application to handle
> >both plain literals and rdf:XMLLiteral's.
> 
> As I have tried to explain in another mail, the last point here is
> really where I'm very sceptical. There is no 'Web applications', the
> Web is one single big application. Similarly, there should not really
> be anything called an 'RDF application'. All RDF together should be
> the application.
> 
> Regards,    Martin.



