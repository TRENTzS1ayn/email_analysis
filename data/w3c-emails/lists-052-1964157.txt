docno="lists-052-1964157"
received="Sat Apr 26 15:19:09 2003"
isoreceived="20030426191909"
sent="Sat, 26 Apr 2003 21:19:18 +0300"
isosent="20030426181918"
name="Jeremy Carroll"
email="jjc@hpl.hp.com"
subject="danc-04 add a triviallyTrue predicate"
id="200304262119.18618.jjc@hpl.hp.com"
charset="us-ascii"
expires="-1"

To:w3c-rdfcore-wg@w3.org




DanC suggests:
[[
Consider adding to RDFS a triviallyTrue predicate;
specification:

  ?S rdfs:triviallyTrue ?O.

is true for all ?S and ?O.

Rationale:

(1) jeremy's digital signature application needs
to number bnodes

(2) folks are asking for all uses of rdfs:comment
to be vacuously true. This would provide that
functionality.
]]

http://lists.w3.org/Archives/Public/www-rdf-comments/2003AprJun/0071.html

DanBri says:
[[
Can you make a case for including triviallyTrue in the RDF Core specs,
rather than (for eg) in a utility vocabulary of some kind published (eg)
as a Note? There are lots of neat things we _could_ add if we had the time,
eg. conventions for XHTML markup in comments, modelling of versioning etc.
Is there something about triviallyTrue that jumps it to the top of the 
wishlist?
]]

I argue that, at least for my application, there is not such a case.
I currently quite happily follow DanBri's advice of defining it in a utility 
vocabulary. 
If I wish to use a standard, the following will do me:

<owl:DatatypeProperty rdf:ID="triviallyTrue">
  <rdfs:range rdf:resource="&xsd;long"/>
</owl:DatatypeProperty>

<rdfs:Resource>
  <owl:equivalentClass>
    <owl:Restriction>
      <owl:onProperty rdf:resource="#triviallyTrue"/>
      <owl:cardinality 
rdf:datatype="&xsd;nonNegativeInteger"
>18446744073709551616</owl:cardinality>
    </owl:Restriction>
  </owl:equivalentClass>
</rdfs:Resource>

which makes triviallyTrue hold between all resources and all longs, which in 
practice will be enough.

The rdfs:comment use case (in which we would declare

triviallyTrue rdfs:subPropertyOf rdfs:comment .

to turn comments into true comments) is not addressable in this fashion.

Jeremy



