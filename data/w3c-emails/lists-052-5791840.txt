docno="lists-052-5791840"
received="Wed Aug 27 05:44:27 2003"
isoreceived="20030827094427"
sent="Wed, 27 Aug 2003 12:44:21 +0300"
isosent="20030827094421"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: pfps-06 hold off?"
id="A03E60B17132A84F9B4BB5EEDE57957B5FBC4A@trebe006.europe.nokia.com"
charset="iso-8859-1"
inreplyto="pfps-06 hold off?"
expires="-1"


To:<Patrick.Stickler@nokia.com>,<phayes@ihmc.us>,<bwm@hplb.hpl.hp.com>
Cc:<w3c-rdfcore-wg@w3.org>,<Patrick.Stickler@nokia.com>



Just to make a particular point: Xerces, and similar tools
applied to XML Schema simple datatypes, are intended for the 
interpretation of lexical forms in an *XML Context*.

If those tools are not suitable for interpretation of
lexical forms in an *RDF Context* then they are simply
not suitable, period, end of story, game over, move on.

That's not to say that I am not sympathetic to RDF implementors
looking for the most straightforward way to add support for
XML Schema datatyped literals, but using the shortcomings
of an XML tool when applied in a context it was never intended
to be used in as a justification for bastardizing our design
is completely unacceptable to me.

It's the tail wagging the dog, big time.

Both the XML Schema specs and our present drafts are crystal
clear about what the lexical space of XML Schema simple types
are and what the L2V mapping involves in an RDF context.

Unless someone presents me with overwhelming justification,
I will strongly oppose the inclusion of whitespace processing as
a part of the formal L2V mapping for RDF datatyping.

That said, I really don't understand the problem some folks
have with the MAY we introduced into the latest draft. We're
not saying that a lexical form is valid if it requires whitespace
processing, only that an implementation is free to recover
from such *errors* gracefully if it feels that the lexical form
can be safely coerced to a value dispite the illegal whitespace.

Maybe we need to state explicitly the fact that a lexical form
requiring whitespace processing (or any preprocessing of any kind)
is invalid, if some folks seem confused about that.

Or perhaps we simply need to "punt" the issue and remove all test
cases involving XML Schema datatypes, so that implementations
can pass all test cases yet still remain free to employ smoke
and mirrors so they can waffle about with Xerces to process
technically invalid but still usable lexical forms.

But adding whitespace processing to the formal L2V mapping
just because Xerces is not RDF-savvy is just plain dumb.

[Apologies if my views offend anyone]

Patrick


> -----Original Message-----
> From: Stickler Patrick (NMP/Tampere) 
> Sent: 27 August, 2003 12:28
> To: 'ext pat hayes'; Brian McBride
> Cc: w3c-rdfcore-wg@w3.org; Stickler Patrick (NMP/Tampere)
> Subject: RE: pfps-06 hold off?
> 
> 
> 
> 
> > -----Original Message-----
> > From: ext pat hayes [mailto:phayes@ihmc.us]
> > Sent: 27 August, 2003 04:16
> > To: Brian McBride
> > Cc: w3c-rdfcore-wg@w3.org
> > Subject: Re: pfps-06 hold off?
> > 
> > 
> > 
> > >Pat,
> > >
> > >I'm wondering whether we should hold off your following up 
> > pfps on pfps-06 as:
> > >
> > >   1) the xml schema lex 2 val mapping may be about to change
> 
> Honestly, Brian, I'm wondering how this could happen. We do
> not define the XML Schema L2V mapping, and the XML Schema
> specs are quite clear that the L2V mapping does *not* include
> whitespace processing, so I remain very puzzled at your
> suggestion that this could change.
> 
> All that we could do ourselves would be to say that the RDF
> L2V mapping, for XML Schema datatypes, includes the whitespace
> processing, but such a position creates such blatant dependencies
> and other nastiness in our design that simply thinking about
> such a thing happening makes my ass start to twitch.
> 
> Can you please, if possible, clarify what basis you have for
> suggesting that the XML Schema L2V mapping might change, or
> that the RDF L2V mapping would not be the same for XML Schema
> datatypes as defined by XML Schema?
> 
> The few comments that we have recieved from implementors regarding
> the looseness of the Xerces implementation does not IMO even 
> begin to justify any such changes.
> 
> Thanks,
> 
> Patrick
> 



