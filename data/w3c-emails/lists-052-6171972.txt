docno="lists-052-6171972"
received="Thu Aug 28 13:48:44 2003"
isoreceived="20030828174844"
sent="Wed, 27 Aug 2003 11:26:42 +0100"
isosent="20030827102642"
name="Graham Klyne"
email="gk@ninebynine.org"
subject="Re: xmlsch-02"
id="5.1.0.14.2.20030827112225.023fbf90@127.0.0.1"
charset="iso-8859-1"
inreplyto="3F4B20A1.6030404&#64;hplb.hpl.hp.com"
expires="-1"


To: Brian McBride<bwm@hplb.hpl.hp.com>,Patrick.Stickler@nokia.com
Cc:w3c-rdfcore-wg@w3.org


At 09:56 26/08/03 +0100, Brian McBride wrote:
>Patrick.Stickler@nokia.com wrote:
>
>
>[...]
>
>>UGH! Please, no.
>>If Peter or others are unhappy about our fudging, then we shouldn't
>>fudge, and we should take the stricter position that lexical forms
>>are lexical forms are lexical forms and no whitespace processing
>>is ever to be applied to any lexical form.
>
>Why is that preferrable?  This has come up at all because the most 
>commonly used library Xerces, implements the more forgiving function. It 
>has been suggested we should not specify something that most 
>implementations wont implement?  In effect this suggestion arises from 
>implementation feedback.

I'm insufficiently close to this issue to comment in detail, but it seems 
to me that the appropriate approach is for RDF to define the meaning of 
well-formed RDF.  If certain parsers also accept some RDF-like language and 
give it a reasonable RDF-like interpretation, it's not for us to say that 
the applications are wrong, they're just operating outside the scope of the 
RDF specification.

So the important things are:
(a) define what constitutes well-formed RDF/XML, and
(b) define how such well-formed RDF is interpreted.

While (reasonably, IMO) staying silent about what applications should do if 
faced with text that is not well-formed RDF.

#g



------------
Graham Klyne          _________
GK@ninebynine.org  ___|_o_o_o_|_?
                    \____________/
(nb Helva)       ~~~~~~~~~~~~~~~~~~   @Reading, River Thames
http://www.ninebynine.org/Travels/2003Aug-Thames/Intro.html



