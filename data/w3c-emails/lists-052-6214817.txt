docno="lists-052-6214817"
received="Fri Aug 29 04:52:25 2003"
isoreceived="20030829085225"
sent="Fri, 29 Aug 2003 09:50:18 +0100"
isosent="20030829085018"
name="Brian McBride"
email="bwm@hplb.hpl.hp.com"
subject="Re: xmlsch-02"
id="3F4F13CA.4080307@hplb.hpl.hp.com"
charset="us-ascii"
inreplyto="5.1.0.14.2.20030827112225.023fbf90&#64;127.0.0.1"
expires="-1"


To: Graham Klyne<gk@ninebynine.org>
Cc:Patrick.Stickler@nokia.com,w3c-rdfcore-wg@w3.org,"Peter F. Patel-Schneider"<pfps@research.bell-labs.com>


Hi Graham,

Its good that you are able to keep at least partialy in touch with things.

Graham Klyne wrote:

[...]

> 
> While (reasonably, IMO) staying silent about what applications should do 
> if faced with text that is not well-formed RDF.

What I write here is not advocacy, but I thought it might be helpful to 
pass on something I learned in a recent conversation with pfps.

A point made by pfps is that the object of the triple represented in:

   _:a eg:prop "ten"^^xsd:integer .

is well formed RDF according to the specs.

   "ten"^^xsd:integer

does not denote a Literal, but it does denote something that is not a 
literal (if I've understood semantics properly).  Similarly,

   " 10 "^^xsd:integer

does not denote a literal according to the current specs (given an 
xsd:integer aware interpretation).

Peter's point to me was that if it were an error, he would have no 
problem with suggesting automatic correction, but he does have a problem 
  correcting something that is not an error.

By analogy, imagine you are a comms driver and you get data with a 
hamming code for error correction.  If you get data with that fails 
parity, its ok to correct it, but if you get data that passes the 
integrity check, its not ok to say you don't like it, and correct it anyway.

Brian



