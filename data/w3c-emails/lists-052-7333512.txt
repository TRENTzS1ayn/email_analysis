docno="lists-052-7333512"
received="Tue Feb  4 13:26:24 2003"
isoreceived="20030204182624"
sent="Tue, 4 Feb 2003 19:25:19 +0100"
isosent="20030204182519"
name="Massimo Marchiori"
email="massimo@w3.org"
subject="RE: RDF Semantics: Interpretations and Modelling"
id="NGBBJNKIMLOPPCFHEJEMAEKLDBAA.massimo@w3.org"
charset="iso-8859-1"
inreplyto="p05111b35ba659b2c968b&#64;[10.0.100.86]"
expires="-1"

To:"pat hayes"<phayes@ai.uwf.edu>
Cc:<w3c-rdfcore-wg@w3.org>, Ossi Nyk?nen<onykane@butler.cc.tut.fi>,"Massimo Marchiori"<massimo@w3.org>



> It is always valid to take the union of two sets of triples, and the
> operation corresponds to simple propositional conjunction.

Uh-oh, Pat, now I see where the confusion we're having to understand each other comes from.

Ok, so let be a bit more formal, and let me try to explain better what the real issue is:
+ Define as "conjoin" the operator that does the straight set-union of graphs.
+ Call BAGAX the extra semantic rules you'd need to get the rdf:bag inferences.

Real-Question-of-the-Issue: can we support rdf:bag? I.e., does adding BAGAX cause inconsistency?

****

You are saying:
a) conjoin is a valid operator
b) adding BAGAX makes conjoin invalid

and using the above two, the claim in the Model Theory at the time, and Semantics doc now, is:

Because of a) and b), we can't add BAGAX
(which means, we can't support rdf:bag in the model theory)

***

What I am saying is:

Mmm, I see that there's a claim that we can't support rdf:bag
That means we can't add BAGAX....
... but, wait, we can add BAGAX, so that can't be the reason to ban the rdf:bag

------

Now, to solve the apparent contraposition:
what happens if we add BAGAX? That, conjoin becomes an invalid operator.
So, what? Who cares? There's no inconsistency. Just, don't use the "conjoin" straight on graphs.
(and, suggestion: you'd better use "merge" anyway... ;)


------

SUMMARY:

We can then turn the discussion into
"for some reasons (@@space to fill in here@@), I do want conjoin of graphs to be valid, so much that I'm willing to give up the
rdf:bag facility",

but that's a *totally different argument* from the straight
"we can't support the rdf:bag facility"

I hope this clarifies the viewpoints and the core of the issue.
As rdf:bag was the normative standard (with its implicit BAGAX), this is not a trivial issue at all.

Moral: we still need to document the proper reasons on why the rdf:bag support is dropped (if it is dropped)

-M



