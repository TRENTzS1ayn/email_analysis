docno="lists-052-7456279"
received="Tue Feb  4 19:50:05 2003"
isoreceived="20030205005005"
sent="Tue, 04 Feb 2003 19:49:53 -0500 (EST)"
isosent="20030205004953"
name="Peter F. Patel-Schneider"
email="pfps@research.bell-labs.com"
subject="Re: response to issue pfps-10"
id="20030204.194953.88945205.pfps@research.bell-labs.com"
charset="us-ascii"
inreplyto="p05111b2eba64b7d84292&#64;[10.0.100.86]"
expires="-1"


To:phayes@ai.uwf.edu
Cc:w3c-rdfcore-wg@w3.org


From: pat hayes <phayes@ai.uwf.edu>
Subject: response to issue pfps-10
Date: Tue, 4 Feb 2003 18:23:23 -0600

> 
> 
> I believe that untyped literals do not work correctly in the RDF model
> theory. The semantic constraint on rdfs:Literal is, from Section 3.3
> 
>      ICEXT(I(rdfs:Literal)) is a subset of LV
> 
> However, the denotations of untyped literals are only required to be
> in LV.   Therefore the denotation of "a" is not necessarily in
> ICEXT(I(rdfs:Literal)).
> 
> This situation has observable consequences.  For example
>          ex:foo ex:rel "a" .
> does not RDFS-entail
>          ex:foo ex:rel _:x .
>          _:x rdf:type rdfs:Literal .
> 
> The situation is made even stranger in datatyped interpretations.  If
> there is a datatype whose value spaces includes the string "a", then
> entailment over this datatype has the above entailment.
> -----
> 
> This comment is substantially correct. The design was deliberate, 
> partly to keep rdfs-entailment simpler,  but I now tend to agree with 
> Peter that it would be preferable to make the untyped case more 
> aligned with the typed case, and Patrick has indicated that this was 
> his understanding of what should have been done in any case.
> 
> I therefore propose to make changes to the model theory, as follows. 
> This is the only proposed change which materially affects normative 
> parts of the semantics document. Of these, 1. is simply a matter of 
> mathematical style; 2 is the substantial change which requires the 
> new rules (detailed below); the rest are clarifications of existing 
> intentions which can now be more simply expressed in the light of 2. 
> 4. has the consequence that all aspects of the built-in datatype that 
> can be expressed using the RDF namespace are now incorporated into 
> RDF entailment, which seems appropriate.
> 
> 
> 1. LV will be considered part of an interpretation, like IP and IC. 
> The semantic conditions on literals are then conventional semantic 
> constraints on interpretations. This also deals with an issue raised 
> by Graham. In many ways this makes the model theory more 
> 'conventional'.
> 2. ICEXT(I(rdfs:Literal)) = LV (not a subset of LV) in all RDFS 
> interpretations.
> 3. All ill-formed typed literals denote non-literal values (ie not in LV)
> 4. Similar conditions for XML literals will be added to the RDF semantics.
> 5. In datatyped interpretations, If x is in D, then ICEXT(x) is a subset of LV
> 
> In the rules this has the following corresponding changes:
> 
> add the following rdf inference rule:
> -----
> xxx aaa lll .
> where lll is a well-formed XML typed literal .
> ==>
> xxx aaa _:n .
> _:n rdf:type rdf:XMLLiteral .
> where _:n is a new bNode.
> ----
> and the following rdfs inference rule:
> -----
> xxx aaa "sss"[@tag] .
> ==>
> xxx aaa _:n .
> _:n rdf:type rdfs:Literal .
> 
> where _:n is a new bNode.
> ------
> 
> and the axiomatic triple
> 
> rdf:XMLLiteral rdfs:subClassOf rdfs:Literal .
> 
> --------
> There will also be some corresponding changes to some of the proofs 
> in the appendix; I will not try to summarize these here.
> 
> The first of these rules corresponds exactly to rule rdfD 1 for typed 
> literals, and the second also corresponds if we interpret untyped 
> literals as having a 'trivial' type where L2V is the identity 
> mapping.  This is therefore a completely uniform treatment for all 
> literals.
> 
> 
> I hope to have an editors draft incorporating these changes ready by 
> tomorrow (Wednesday).
> 
> 
> Pat

These are significant changes to the RDF Semantics, enough to require a
complete re-review of the entire document.

peter



