docno="lists-052-7886462"
received="Tue Feb 11 20:43:56 2003"
isoreceived="20030212014356"
sent="Tue, 11 Feb 2003 17:39:14 -0800"
isosent="20030212013914"
name="Seth Russell"
email="seth@robustai.net"
subject="Re: Two questions about bagid"
id="3E49A5C2.8020502@robustai.net"
charset="ISO-8859-1"
inreplyto="p05111b41ba6f325672d5&#64;[10.0.100.86]"
expires="-1"


To: pat hayes<phayes@ai.uwf.edu>
CC: Tim Berners-Lee<timbl@w3.org>, Jan Grant<Jan.Grant@bristol.ac.uk>, RDF Core<w3c-rdfcore-wg@w3.org>, www-rdf-comments<www-rdf-comments@w3.org>


pat hayes wrote:

>
>> On Tue, 11 Feb 2003, Tim Berners-Lee wrote:
>>
>>>  Another question is about the semantics.
>>>  I understand that an id  :i  on the statement  { :superman :can :fly}
>>>  should generate the statements
>>>
>>>  :i a rdf:Statement;  rdf:subject :superman;   rdf:predicate :can;
>>>  rdf:object :fly.
>>>  :superman :can :fly.
>>>
>>>  and I might want to use this to generate attribution:
>>>
>>>  :lois :thinks :i.
>>>
>>>  This would suggest that an owl reasoner (say) that knows that 
>>> :superman
>>>  and
>>>  :clarkekent are daml:equivalent should be able to infer that
>>>
>>>  :i a rdf:Statement;  rdf:subject : clarkekent;   rdf:predicate :can;
>>>  rdf:object :fly.
>>>  : clarkekent :can :fly.
>>>  :lois :thinks :i.
>>>
>>>  This seems counterintuitive, as one would expect it allow one to
>>>  conclude
>>>  that the modified statement is due to the original source.
>>>  Some form of quoting around the subject, predicate
>>>  and object would seem necessary.
>>
>
> Right. This arises from the way that RDF handles reification. The 
> obvious, and simplest, way to understand the above would be one where 
> the reification :i refers to the triple itself, ie to its syntactic 
> form, in effect quoting it.  Then the equality substitution would not 
> be valid, since even though :clarkekent = :superman, the *triples* 
> expressing the propositions that Clarke can fly, and that Superman can 
> fly, are distinct piece of syntax.   But this way of understanding 
> reification was rejected by the WG in favor of one where the 
> reification is understood to refer to the things that the original 
> triple referred to, so that for example the subject of the reified 
> triple is not the subject NODE of the triple, but the thing that node 
> refers to, which is that same flying guy, no matter what name you use 
> to refer to him by. 

Huh .... How did :clarkkent and :superman suddenly end up refering to 
the same object?   That fact is not in the example you site, nor in the 
triples that you have specified above.  It is rather in our background 
knowledge of the story.   So my interpertation of  the triples 
"clarkekent can fly" and "superman can fly" is that we have two flying 
guys .. not just the one in your interpertation.   Now if someone 
actually asserted some dumb thing like "clarkekent daml:equivalentTo 
superman" they would be destroying the story.    What am I missing?

> This might be called a de-re rather than a de-dicto interpretation of 
> reification. This allows equality substitution, but it does not allow 
> a reification to be coherently used as a de-dicto object of a 
> psychological modality like 'thinks' or 'believes'. 

Where is it written that we *can* do substitutions of equivalent names 
in RDF reified statements and preserve the authors meaning ?

>
> We could have gone either way on this. But we can't go both ways at once.
>
>>  >
>>
>>>  I have been guilty of ignoring this rather complicated bit of the 
>>> spec,
>>>  and wonder whether others have done the same.
>>>
>>>  A developer.
>>
>>
>> I've had this conversation with Danbri before. The owl reasoner you
>> posit has superman and clarkkent denoting the same thing (ie, it applies
>> an interpretation that a comic reader would agree with). Strictly
>> speaking, from the comic reader's point of view (ie, in that
>> interpretation) the conclusion is correct: Lois thinks that the person
>> denoted by "Clark Kent" can fly, which he can, 'cause he's super.
>>
>> Lois wouldn't reason using the same interpretation, so her conclusions
>> would be different.
>
>
> Right. This is the classical de-re/de-dicto distinction. Sentences 
> like 'thinks' ('believes', 'knows', etc.) which express a relationship 
> between a cognitive agent and a proposition can always be read in one 
> of two ways, depending on whether the statement of the proposition in 
> the assertion itself is supposed to be a factual statement of the way 
> things actually are (de re), or a statement that the agent themselves 
> would be willing to assent to (de dicto). And, notoriously, these are 
> often not the same, since if the agent's beliefs are factually wrong, 
> they would often be inclined to deny sentences or claims  which 
> express propositions that they in fact believe, but which use names in 
> ways that are denied by their false beliefs.  The net result of all 
> this is that modal logics are referentially opaque, ie a name 
> occurring inside a modal context (or in a reified triple being used as 
> the de-dicto object of a modal property) cannot be understood in the 
> same sense as a name outside such a context; you can't use equality 
> reasoning on it safely. So if you want to use names transparently (and 
> we have effectively mandated this use in RDF reification now) then you 
> can't use psychological modalities as simple properties.
>
> In a nutshell, :thinks isn't a relationship between an agent and an 
> RDF reification, so it can't be an RDF property. 

I find that hard to live with.  So, if the WG had chosen that reified 
statements were to be interperted de-dicto, then ":thinks" could have 
been a RDF property?    In which case, if the WG wanted that RDF reified 
statements to be considered statings, and since substituting equivalent 
names into statings do not necessarily preserve the author's  intended 
meaning, then imho the WG goofed.   Gick .. what am i missing?

For your amusement some mentographic sudies of the matter that I did 
last year.
http://robustai.net/mentography/reificationContext.gif
http://robustai.net/mentography/context_lex_knows.gif

Seth Russell
http://robustai.net



