docno="lists-052-8751578"
received="Mon Feb 24 10:22:16 2003"
isoreceived="20030224152216"
sent="Mon, 24 Feb 2003 16:06:26 +0100"
isosent="20030224150626"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="reagle-01, reagle-02 issues"
id="BHEGLCKMOHGLGNOKPGHDGEDMCBAA.jjc@hpl.hp.com"
charset="iso-8859-1"
expires="-1"

To:<w3c-rdfcore-wg@w3.org>




(Note reagle-01 has also been submitted as part of the webont consensus
review).

These issues concern the design of rdf:XMLLiteral and
rdf:parseType="Literal".

Reagle reviewed on behalf of the C14N group (Digital Signatures).
I had indicated that we were seeking expert feedback as to how well we had
used their work.

Reagle suggested:
- we should use the same type of C14N throughout - I think this was intended
for clarity - it is difficult to assess what our solution does with its mix
of both exc-C14N and incl-C14N.
- to remove implementation variability

WebOnt
- request removing implementation variability from RDF/XML thru to domain of
discourse
- suggest removing all implementation variability (as an example of how to
satisfy request)

======

I see the choice space as:

1: Leave things as they are
2: Choose a form X of canonicalization,
   require parser to implement X
   define lexical to value mapping as X
3: Choose a form X of canonicalization
   define lexical to value mapping as X
   leave text in Syntax largely unchanged (except use X in place of current
"exclusive canonicalization without comments"). This allows cheap and
cheerful parsers that do not canonicalize.

=====
3 is now my preference - I realise it needs expansion, but before I do that
I wish to list pros and cons, and get feedback from WG.
=====

Consider three use cases:
A) cheap and cheerful RDF impl using embedded XHTML
B) OWL or other semantically advanced use where it is desired that
representation in domain of discourse is not implementation dependent.
C) Embedding XSLT document inside and rdf:XMLLiteral (hence requiring
support for preservation of not visibly used namespaces)


1:
A - works
B - doesn't really work, because of comments and not visibly used namespaces
C - might work depending on having an implementation that knows when to
preserve not visibly used namespaces

2:
A: expensive
B: works
C: does not work

3:
A: works
B: works
C: does not work

i.e. our current position works non-interoperably for XSLT in RDF - a use
case that we have not seen, and that is its only advantage over soln 3 which
interoperably does not work for XSLT in RDF.

====

If we go for soln 2 or soln 3 we have to reconsider whether we wish to
preserve comments, and which not visibly namespaces we preserve.
I suggest preserve comments, and no namespaces that are not visibly used.

BTW - if we go for 2 or 3 ARP will need updating - it has some support for
preservation of not visibly used namespaces. I could ask on jena-dev whether
anyone is using this feature.

Jeremy



