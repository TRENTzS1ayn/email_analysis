docno="lists-052-8770567"
received="Mon Feb 24 10:38:35 2003"
isoreceived="20030224153835"
sent="Mon, 24 Feb 2003 15:35:59 +0000"
isosent="20030224153559"
name="Dave Beckett"
email="dave.beckett@bristol.ac.uk"
subject="Re: reagle-01, reagle-02 issues"
id="12277.1046100959@hoth.ilrt.bris.ac.uk"
inreplyto="jjc&#64;hplb.hpl.hp.com"
expires="-1"

To: Jeremy Carroll<jjc@hplb.hpl.hp.com>
cc: w3c-rdfcore-wg<w3c-rdfcore-wg@w3.org>



>>>Jeremy Carroll said:

<snip/>
> I see the choice space as:
> 
> 1: Leave things as they are
> 2: Choose a form X of canonicalization,
>    require parser to implement X
>    define lexical to value mapping as X

  and change what docs?

> 3: Choose a form X of canonicalization
   define lexical to value mapping as X
>    leave text in Syntax largely unchanged (except use X in place of current
> "exclusive canonicalization without comments"). This allows cheap and
> cheerful parsers that do not canonicalize.


The other question is: which X?  I assume the choices are Exclusive
or Canonical, with/without comments.  Did we get a recommendation or
suggestion from the commenters?


> =====
> 3 is now my preference - I realise it needs expansion, but before I do that
> I wish to list pros and cons, and get feedback from WG.
> =====
> 
> Consider three use cases:
> A) cheap and cheerful RDF impl using embedded XHTML
> B) OWL or other semantically advanced use where it is desired that
> representation in domain of discourse is not implementation dependent.
> C) Embedding XSLT document inside and rdf:XMLLiteral (hence requiring
> support for preservation of not visibly used namespaces)
> 
> 
> 1:
> A - works
> B - doesn't really work, because of comments and not visibly used namespaces
> C - might work depending on having an implementation that knows when to
> preserve not visibly used namespaces
> 
> 2:
> A: expensive
> B: works
> C: does not work
> 
> 3:
> A: works
> B: works
> C: does not work
> 
> i.e. our current position works non-interoperably for XSLT in RDF - a use
> case that we have not seen, and that is its only advantage over soln 3 which
> interoperably does not work for XSLT in RDF.
> 
> ====
> 
> If we go for soln 2 or soln 3 we have to reconsider whether we wish to
> preserve comments, and which not visibly namespaces we preserve.
> I suggest preserve comments, and no namespaces that are not visibly used.

OK, this is your X choice.  Did DigSig group express a preference?


From my experience, I think preserving comments will be tricky to
implement on top of the C SAX API so slightly prefer not preserving
them.  I will investigate, however.   I have no preference on the
namespaces.

Is 3 still too lax for "removing implementation variability from RDF/XML"?

> BTW - if we go for 2 or 3 ARP will need updating - it has some support for
> preservation of not visibly used namespaces. I could ask on jena-dev whether
> anyone is using this feature.

Yes, well, all the (updated) RDF parser implementations will have to
change for 2 or 3.  Since there are some that already claim
conformance to the revised syntax.

Dave



