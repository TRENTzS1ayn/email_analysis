docno="lists-052-9509772"
received="Fri Feb 28 18:52:25 2003"
isoreceived="20030228235225"
sent="Fri, 28 Feb 2003 23:52:06 +0000"
isosent="20030228235206"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="Re: reagle-01, reagle-02 issues"
id="3E5FF626.7050406@hpl.hp.com"
charset="UTF-8"
inreplyto="p05111b0fba8528ad222e&#64;[10.0.100.86]"
expires="-1"


To: pat hayes<phayes@ai.uwf.edu>
CC: Jeremy Carroll<jjc@hplb.hpl.hp.com>,w3c-rdfcore-wg@w3.org



> I took this comment as a rhetorical question meaning, "why bother even 
> getting into canonicalization if you have implementation variance?" and 
> hence suggesting a fourth option, which you did not consider:
> 
> D. Ignore XML canonicalization and treat XML literals as strings, ie the 
> L2V mapping is the identity.
> 
> Then the entire rdf:XMLliteral datatype machinery is just an elaborate 
> way of encoding the old 'XML bit', which I thought was the original 
> intent in any case. Introducing XML canonicalization seems to have been 
> one those neat ideas that got slipped in without too much discussion and 
> has turned out to be a tar-pit. I am particularly concerned that this 
> ugly mess is now centrally included in the very core of RDF. I would 
> hope that many 'cheap and cheerful' RDF engines wouldn't even want to 
> know about XML, still less about XML canonicalization.

This really does not meet the requirements ...

XML parsers really really have variability, when building RDF/XML parsers 
we have to work out how to deal with that.

So the simple webont examples where they want a single well-defined 
denotation of some literal constructed with an rdf:parseType="Literal" 
cannot be addressed simply by saying "use the original string".

In some real contexts there isn't a string to use (e.g. parsing a DOM tree).

We could have put all the work in the parser, and then the semantics could 
just use the string - that may be your preference, but it's too late now.
In practice I would expect a webont impl to work that way. However, I also 
believe in practice that there will be cheaper parsers for low footprint 
environments which don't do this.

Jeremy



