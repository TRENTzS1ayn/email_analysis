docno="lists-053-13803903"
received="Fri Sep 19 08:15:30 2003"
isoreceived="20030919121530"
sent="Fri, 19 Sep 2003 15:15:21 +0300"
isosent="20030919121521"
name="Patrick.Stickler@nokia.com"
email="Patrick.Stickler@nokia.com"
subject="RE: I18N Issue alternative: a passing thought."
id="A03E60B17132A84F9B4BB5EEDE57957B02630350@trebe006.europe.nokia.com"
charset="iso-8859-1"
inreplyto="I18N Issue alternative: a passing thought."
expires="-1"


To:<phayes@ihmc.us>
Cc:<w3c-rdfcore-wg@w3.org>




> -----Original Message-----
> From: ext pat hayes [mailto:phayes@ihmc.us]
> Sent: 18 September, 2003 20:24
> To: Stickler Patrick (NMP-MSW/Tampere)
> Cc: w3c-rdfcore-wg@w3.org
> Subject: Re: I18N Issue alternative: a passing thought.
> 
> 
> 
> >It does offer a few benefits. Two significant
> >changes are that it would
> >require equality of values, even plain literals, to
> >be defined by rule, rather than node equality
> >in the graph syntax.
> 
> ? No, I don't think so. That is, each node will denote a single 
> value. Of course two different nodes could denote the same value, but 
> then that is already the case and has always been.  Even in our 
> present design, there is nothing to stop a bnode denoting the same 
> thing as a literal.

But you have to look at statements *about* those bnodes to
determine what those values are, not at the node (or node
label) itself.

Thus, equality is based on some rule that equates constellations
of statements in the graph with each other, not nodes based
on their expression alone in the abstract graph syntax.

> >It would also make literal values untidy
> 
> The bnodes (or URIs ) are just as tidy as the rest of the graph.

Eh? What?

Are you telling me that 

<rdf:Description rdf:about="#foo">
   <ex:bar rdf:datatype="&xsd;integer">10</ex:bar>
   <ex:bar rdf:datatype="&xsd;integer">10</ex:bar>
</rdf:Description>

is going to map to 

   <#foo> ex:bar _:g .
   <#foo> ex:boo _:g .
   _:g xsd:int "10" .

merging the value nodes because they denote the same value,
rather than

   <#foo> ex:bar _:g .
   <#foo> ex:boo _:k .
   _:g xsd:int "10" .
   _:k xsd:int "10" .

???

I think the latter is what we'd have to get, since otherwise,
it demands that RDF parsers fully grok every single datatype
encountered in the RDF/XML, and the latter is most certainly 
*not* tidy.

Patrick



