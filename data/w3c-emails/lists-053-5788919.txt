docno="lists-053-5788919"
received="Wed May  7 22:44:06 2003"
isoreceived="20030508024406"
sent="Thu, 8 May 2003 00:04:37 +0300"
isosent="20030507210437"
name="Jeremy Carroll"
email="jjc@hpl.hp.com"
subject="Re: ACTION 20030502#3 gk: review 4.1 of OWL AS&amp;S"
id="200305080004.37287.jjc@hpl.hp.com"
charset="us-ascii"
inreplyto="ACTION 20030502#3 gk: review 4.1 of OWL AS&amp;S"
expires="-1"

To:w3c-rdfcore-wg@w3.org




Sorry I've been sleeping (false: getting a LCC out the door)

Pick and mix comments on the thread so far:

"individual ID" means a URI ref used to name something other than a property 
or a class.

gk:
>"Non-deterministic"?  Scary,
...
> 2. My concern is that it is not obvious to me that the reverse 
> transformation would be unique. 

The mapping rules are non-deterministic in both directions.

Given an RDF graph there are zero or more abstract syntax trees, given an 
abstract syntax tree there is one or more RDF graph.
The reverse mapping is necessary.

Some of the theorems supposedly proved in the appendix show that the meaning 
of an RDF graph and the meaning of a corresponding abstract syntax tree are 
the same (although the latter is normative). Thus

ir g1 ~ as1 ~ g2 ~ as2 

then the meaning of both abstract syntax trees and both graphs are the same.

As an example, consider the construct

restriction( #p cardinality=2 someValuesFrom( #Foo ) )

This corresponds to the triples

_:v rdf:type owl:Class
_:v owl:intersectionOf _:l
_:l rdf:type rdf:List
_:l rdf:first _:r1
_:l rdf:rest _:l2 
_:l2 rdf:type rdf:List
_:l2 rdf:first _:r2
_:l2 rdf:rest rdf:nil

with _:r1 and _:r2 corresponding to
restriction( #p cardinality=2 )
and
restriction( #p  someValuesFrom( #Foo ) )

Thus this also corresponds to

intersectionOf( restriction( #p cardinality=2 ), 
   restriction( #p  someValuesFrom( #Foo ) ) )

and a study of the direct semantics (section 3) shows that these two abstract 
syntax expressions mean the same thing.

bwm:
>You have incoming RDF/XML off the wire - is it Owl FULL, DL or Lite?
>I was imagining that the abstract syntax might be a good abstraction on 
>which to build an implementation. So if your implementation is based on 
>the abstract syntax, you'll need to translate incoming rdf/xml into that 
>syntax for processing.

people are trying to do this.
Suggestions as to how to make it easier for such implementors will improve the 
OWL recs in a way that will benefit the semantic web.

(Just lost my connection ...)
Another comment from Graham was why was there so many options.

Initially there were none (I believe).
I argued for some for a varierty of reasons.
1) where there was a natural way to write the RDF/XML it seemed odd to 
arbitrarily exclude it from OWL Lite or OWL DL
2) When we have some RDFS which we wish to import into OWL Lite or OWL DL, it 
should, usually, be possible.
An example is:

<rdf:Property rdf:about="&dc;creator" />

can be imported into an OWL Lite document, including an additional type triple  
such as

<owl:AnnotationProperty rdf:about="&dc;creator" />


Without the option of generating the rdf:Property triple it would not be 
possible to use dc:creator in OWL Lite.

3) Peter listened to my suggestions and went further than I intended ... as 
far as I can tell Peter has been trying to make as many RDF graphs into OWL 
Lite or OWL DL as possible. i.e. only exclude graphs when there is a 
rationale to exclude them.
Thus, rather unusual graphs such as:

<rdfs:Class rdf:nodeID="a"/>
<owl:Class rdf:nodeID="a">
   <owl:complementOf>
         <owl:Class rdf:ID="c"/>
   </owl:complementOf>
</owl:Class>

I cannot imagine any reason for putting the redundant rdfs:Class type triple 
in (the blank node cannot be shared between an OWL file and an RDFS file).

Similarly I do not agree with the optional rdf:type owl:Class triple on 
restrictions.

Jeremy



