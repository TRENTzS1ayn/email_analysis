docno="lists-053-8971566"
received="Wed Nov 12 15:47:50 2003"
isoreceived="20031112204750"
sent="Wed, 12 Nov 2003 14:47:48 -0600"
isosent="20031112204748"
name="pat hayes"
email="phayes@ihmc.us"
subject="Re: Error in current WG test cases?"
id="p06001f0ebbd849032320@[10.1.31.1]"
charset="us-ascii"
inreplyto="3FB27194.1020804&#64;hplb.hpl.hp.com"
expires="-1"


To: Dave Reynolds<der@hplb.hpl.hp.com>
Cc:w3c-rdfcore-wg@w3.org


>pat hayes wrote:
>
>>>I guess this would be framed as a negative entailment test of the form:
>>>
>>>    "does the empty graph entail the graph:
>>>    _:a rdf:type rdfs:ContainerMembershipProperty ."
>>>
>>
>>OK, in that form the answer is "yes" both in the LC version and the 
>>modified version. It does entail it.
>
>OK. I had thought that was not true at LC2 but reading that part of 
>the LC2 again more closely I see that it is entailed.
>
>Well, the MT doesnt specify a semantics for a query language, so I 
>don't quite know how to deal with this. BUt take as an analogy 
>simple propositional calculus, where any tautology is entailed by 
>the empty set of assertions.
>
>I'm not sure that's a great analogy for precisely that reason.
>
>Had the closure of an RDF graph been finite

Well, we can define a notion of closure which is finite, but it can't 
be just the set of *all* valid entailments.  For example, there is a 
notion of a closure w.r.t. a vocabulary (all triples using only this 
vocabulary which are entailed, only introducing one new bnode per 
vocabulary item) which is finite if the vocabulary is finite.  Still 
more restrictive would be to only use bnode generalization on 
literals, which is all that is really needed in any case (see the way 
that the closures are defined in the current versions of the 
entailment lemma proofs, note the stage-by-stage use of the rules and 
how rule lg restricts the generalizations).

>then it would be reasonable to define a query semantics of syntactic 
>query over the closure of the graph.

I think it would be reasonable to define it over the restricted 
vocabulary closure. It isnt reasonable to expect a wildcard-match 
process to be able to catch all possible entailments, even for 
vocabulary that isn't used in the KB. We had to put that sort of a 
restriction into the design of the DAML query language for just that 
reason: variables in queries range over vocabulary items, i.e. 
*named* things, not over all genuine things like a real quantifier 
would. Otherwise in OWL you might have a query l.ike
?x parent Joe .
needing to be answered by a KB that knows that the cardinality of the 
set of Joe's kids is three, but not knowing what their names are: 
totally impractical. In a nutshell, what you get back from a query 
depends in part on how you phrase the query. Nobody knows any general 
way around this: to do it using entailment means that the query 
language is more expressive than the KB language, which hurts real 
bad.

>The closure rules and the discussion on comprehension principles for 
>the CMPs in earlier drafts seemed to encourage this approach. I had 
>thought at one point in the working group drafts the closure had 
>been intended as finite

Yes, we did do that for this kind of reason, and at the time I 
thought I was being ever so clever, but the semantic machinery turned 
around and bit me.

>  but it clearly isn't so now and no doubt I'm wrong it was ever the case.

No, mia culpa for not drawing louder attention to this before LC2. I 
didnt realize that y'all were relying on that finiteness stuff so 
much; and I was focussed rather intently on the proofs.

Pat

-- 
---------------------------------------------------------------------
IHMC(850)434 8903 or (650)494 3973   home
40 South Alcaniz St.(850)202 4416   office
Pensacola(850)202 4440   fax
FL 32501(850)291 0667    cell
phayes@ihmc.us       http://www.ihmc.us/users/phayes



