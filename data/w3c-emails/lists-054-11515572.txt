docno="lists-054-11515572"
received="Sun Oct 20 19:03:46 1996"
isoreceived="19961020230346"
sent="Sun, 20 Oct 1996 19:08:13 -0400"
isosent="19961020230813"
name="David G. Durand"
email="dgd@cs.bu.edu"
subject="Re: ERB decisions on A.17, B.9, and other questions"
id="v02130503ae905dad4db6@[128.148.157.46]"
charset="us-ascii"
inreplyto="ERB decisions on A.17, B.9, and other questions"
expires="-1"


To:w3c-sgml-wg@w3.org

At 2:03 PM 10/20/96, lee@sq.com wrote:
>> Both David Durand and Lee Quin seem to be interpreting SDATA
>> entities as things which provide a system-independent specification
>> of characters or glyphs, in particular full names of the character or
>> glyph, in the style familiar from ISO character-set standards.
>>
>> Since I had understood SDATA to be intended to hold system-*de*pendent
>
>I am actually not so interpreting SDATA entities, which is why I pointed
>to TEI WSDs and Harry Gaylord's article in my message.

Nor am I, exactly. I can put system independent data in my system dependent
string, if I want. No harm, and much good results. The XML convention
should be that SDATA (or whatever other mechanism we choose) information
should be _preferably_ machine-processable, and _certainly_
human-meaningful. With an open set we can do little more. I agree that full
WSDs would be nice, but I can live without that a lot easier than I can
live with magic numbers.

>I care not one whit about SDATA, as I have said.

>What I do care about is retaining the ability to give a
>human-readable description of a character or glyph in such
>a way that an application can be expected to present it to the user,
>rather like the ALT attribute to an image in HTML.

Yes. Exactly.

>SDATA entities give you a way of doing that today -- if you like,
>you can do
>    <!Entity x SDATA "the latin letter small x">
>The ISO 10646 user space alone does not do that.

Yes, exactly!

>James' suggestion of the form
><!Entity Klingon.W '<char alt="Klongon letter W">W</char>'>
>is a good one and I could live with it, but would like it explicitly
>mentioned somewhere in the Famous Twenty Pages.

If we go this route, it must not _require_ declarations in the DTD, though
a user might prefer to create entoties to reference common "glyph tags".

We need a built-in mechanism to solve this. We can reserve some syntactic
form to accomodate ISO-standard WSDs or whatever in the next revision.

>James mentioned the use of DSSSL, but I have not been assuming that
>every XML implementation would be required to support DSSSL.
>If they are, I'm out of here right now.

A good point. We are going to have to specify (yechhhh!) how we (*shudder*)
will attach cascading style sheets (^blarg^) to our XML documents. We may
not ever get anything better in wide use.

>> When we return to this topic in preparing future revisions, perhaps
>> the TEI WSD can be considered as a mechanism for documenting and
>> making out-of-band agreements for the private use area of 10646.
>> For now, XML leaves this problem where we found it:  private use
>> areas, and privately created character sets or glyph sets, require
>> private agreement out of band.  If SDATA provided a readymade
>> method of handling this problem, then I'd be happy to keep it.  But
>> it doesn't seem to me that it does.
>
>Again, I'm not arguing for keeping SDATA, but only for having a
>mnemonic string.  The WSD would be a good way to do it, but I
>can live with James' hack if necessary.  I gree with you that
>SDATA doesn't handle all of te problem either.

But it does solve an important part of the problem.

>Lee

   -- David

RE delenda est.
I am not a number. I am an undefined character.
_________________________________________
David Durand              dgd@cs.bu.edu  \  david@dynamicDiagrams.com
Boston University Computer Science        \  Sr. Analyst
http://www.cs.bu.edu/students/grads/dgd/   \  Dynamic Diagrams
--------------------------------------------\  http://dynamicDiagrams.com/
MAPA: mapping for the WWW                    \__________________________
http://www.dynamicdiagrams.com/services_map_main.html



