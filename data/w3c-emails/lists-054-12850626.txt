docno="lists-054-12850626"
received="Fri Oct 25 01:06:30 1996"
isoreceived="19961025050630"
sent="Thu, 24 Oct 1996 22:06:23 -0700 (PDT)"
isosent="19961025050623"
name="Bill Smith"
email="bill.smith@Eng.Sun.COM"
subject="Re: C.4  Undeclared entities?"
id="libSDtMail.9610242206.28904.bsmith@providence"
charset="us-ascii"
inreplyto="C.4  Undeclared entities?"
expires="-1"

To:w3c-sgml-wg@w3.org


Charles Goldfarb wrote:

> O.K. It is now clear that in XML a document "without a DTD" means literally
> that, and not just "parsable without reference to  its DTD". I think this is
> unfortunate because I believe it will render XML a non-starter in the
> marketplace.

Yes without means as if it didn't exist - because it might not. As for XML being 
a non-starter as a result, I'd have to take the other side of the argument. DTDs 
add complexity and formalism where it isn't required. Useful applications based 
on extensible markup can be developed and successfully marketed without 
requiring DTDs. I and others have been there. It works.

This doesn't mean that DTDs and formalism aren't useful or required in many 
applications. Quite the opposite is true and I would argue for the inclusion of 
DTDs for those applications. Strategically, DTDs are an essential part of XML 
but tactically, their inclusion at present is not timely. For those that require 
them now, ISO 8879 tools provide excellent support.

> XML without a DTD is no different from HTML extended by the ability to "add
> tags
> and attributes" just by defining processing for the additions in a style sheet
> (cascading or otherwise).

Actually it would be slightly different. Structure would be explicit and 
obvious. HTML's ill-conceived constructs/quirks wouldn't be there. But other 
than that, the statement is accurate. XML would be a simple, extensible markup 
language.

I won't attempt to rebut the proposition since I happen to agree with it. This 
is what XML 1.0 should be - perhaps with a few well-chosen additions. XML 2.0 
should be where we bring in more of SGML's "useful" features.

I suspect I'm alone in this opinion but I take "as simple as possible" quite 
literally. We can make XML a clean, simple, extensible markup language, HTML++ 
or we can turn it into something else, SGML--. To the masses, XML will need to 
be positioned as HTML++. Perhaps we should think that way too so that we can 
stop lamenting all those great SGML features that won't be included in XML 1.0. 
But they will be in XML 2.0.



