docno="lists-054-12902847"
received="Fri Oct 25 10:11:51 1996"
isoreceived="19961025141151"
sent="Wed, 23 Oct 96 23:53:32 EDT"
isosent="19961024035332"
name="lee@sq.com"
email="lee@sq.com"
subject="Re:  documentation for UA interoperability"
id="9610240353.AA06150@sqrex.sq.com"
inreplyto=" documentation for UA interoperability"
expires="-1"


To:w3c-sgml-wg@w3.org

Lauren wrote:
> One of the things we haven't yet discussed (or did I miss something?) is the
> interaction between different XML systems and what this might necessitate in
> terms of documentation.  [...]
> [...] In HTML, there is no need for documentation on elements,
> as long as all UAs read and implement the HTML spec. This is not necessarily
> the case for XML, where UAs will need documentation on elements to enable
> interoperability.

I would very much like to see a formal way of describing elements.
At the very least, a short readable string.

When a DTD is something private, used only within a department, the names
don't matter too much.  If I am publishing a DTD worldwide, people are
going to create style sheets to view it, or set up conversion tables to
filter it into porridge, and they need to know what the elements mean.

I rule out the possibility of "put it in comments", as those are not
normally fed back to a client of a parser.

So it can go in an element or an entity.

If we have entities in XML, you could do
<!Element boy (name, age, height, picture, enrolled, class, parents)>
<!Entity element-desc.boy "information about one pupil at our school">

Lauren's examples seem closer to architectural forms, though.

Will XML have architectural forms?
I didn't think we had #FIXED attributes any more...

Without inheritance, arch forms are awfully inelegant, it seems to me,
but they are a kludge I could live with.

Lee



