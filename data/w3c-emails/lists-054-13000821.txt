docno="lists-054-13000821"
received="Fri Oct 25 11:35:55 1996"
isoreceived="19961025153555"
sent="Fri, 25 Oct 96 10:34:45 CDT"
isosent="19961025153445"
name="streich@austin.sar.slb.com"
email="streich@austin.sar.slb.com"
subject="Re: C.12 types of declared values for attributes?"
id="9610251534.AA00556@odie"
inreplyto="C.12 types of declared values for attributes?"
expires="-1"


To:w3c-sgml-wg@w3.org,dgd@cs.bu.edu

> >I agree.  You can always use CDATA instead and kludge it in the application.
> >
> >I would argue, in fact, that XML might as well not have an ID attribute
> >type at all.  Just CDATA.  Then have an application convention that a
> >string in an attribute of the form ref.xxx refers to a corresponding
> >(case sensitive) string in an attribute of the form ref.xxx, where the xxx
> >must be the same in both cases.
> 
> I prefer this to any of the options we have discussed. We should eliminate
> ID/IDREF altogether, add Lee's application convention, and generate
> warnings for attbitues called "ref.whatever" whose value does not occur on
> as the value of a "whatever" attribute elsewhere in the document.

Since a browser, search engine, etc. *shouldn't* validate and thus *can*
do without the DTD, and since an editor *should* validate and thus *should*
have the DTD, I don't see any benefit in having such a generalized
application convention. I don't mind using a few key names which are
already effectively linked to some semantic definition, but I'm uncomfortable
with extending this to a generalized solution.

I also don't really like the idea of partitioning the namespace. What I
had in mind for XML was another attribute where you could specify
additional IDs. This would be an application convention and you could
retain SGML compatibility by using one of the tokenized data types like
NAMES or NMTOKEN. The application convention would be that the values
on this attribute would be added to the ID namespace.

I don't feel too strongly about this feature, however, since any good
browser should be able to join arbitrary namespaces in its stylesheet
language. You don't have any assistance on the authoring side, but I've
overcome this in the past.

bob



