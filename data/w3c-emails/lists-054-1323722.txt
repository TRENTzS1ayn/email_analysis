docno="lists-054-1323722"
received="Mon Dec  2 18:54:36 1996"
isoreceived="19961202235436"
sent="Mon, 2 Dec 1996 18:52:30 -0500"
isosent="19961202235230"
name="Gavin Nicol"
email="gtn@ebt.com"
subject="Re: SGML and XML"
id="199612022352.SAA02282@nathaniel.ebt"
inreplyto="199612022259.RAA04845&#64;www10.w3.org"
expires="-1"


To:U35395@UICVM.UIC.EDU
CC:dgd@cs.bu.edu,w3c-sgml-wg@w3.org

Mr. McQueen writes

>The only remaining types of information for which a DTD is essential are:
>
>  - content models (for validation)

Not necessary for a parser per se. The parser can do it's job without 
validating it, and validation of content models could be performed
using the post-parse data structures (event stream/tree).

>  - attribute types and default values (for recognition of IDREFs
>    etc. and for full provision of all attributes which apply to each
>    element instance)

Yes. I would be interested in hearing why people wish to necessarily
have the entire attribute set appear on each element instead of just
the attributes that had values specified (ie. I wonder if applications
couldn't be built for the latter case that are effectively the same as
the former).

>  - entity declarations (for resolution of entity references)

Only really needed for the *type* of the entity, which, assuming
object labelling in storage managers, may be available elsewhere.

Resolution can begin with the name of the entity itself...

>  - element vs. mixed content (for elimination of white space in
>    element content)

This is not a strictly *necessary* distinction.



