docno="lists-054-14802187"
received="Thu Sep 12 14:09:27 1996"
isoreceived="19960912180927"
sent="Thu, 12 Sep 1996 18:55:41 +0100"
isosent="19960912175541"
name="Martin Bryan"
email="mtbryan@sgml.u-net.com"
subject="Re: Element Structure for XML (Clause 7)"
id="96Sep12.185608bst.60558(1)@u-net.net"
charset="us-ascii"
inreplyto="Element Structure for XML (Clause 7)"
expires="-1"

To:paul@arbortext.com(Paul Grosso),w3c-sgml-wg@w3.org


Paul Grosso wrote

>I don't understand and I disagree with the anti-PI sentiment. 
>
>What is so scary about PIs?  They're easy to recognize as PIs and easy to
>parse.  And they're as simple as comments to handle:  ignore them (unless
>you recognize them as being something you can and want to handle).

As far as parsing them is concerned PIs are a piece of cake: that is not the
problem. I have no problem at all with PI's that precede the base document
element. What I object to is PIs beyond that point. My problem is to do with
what is the role of XML. You seem to be under the impression that XML is
about creating interchangeable documents. I was under the impression that
XML was about providing a simple mechanisms of being able to receive and
understand an arbitrary document created by someone else using equipment I
probably could never afford!

To me PIs introduce the same level of complexity as company-specific tags in
HTML. You just have to look at the Frames war in the HTML arena to see that
if you get a document that has markup in that you cannot process the result
is likely to be a document that does not completely define what the document
generator intended. (Just try using Netscape to view a Microsoft site to see
what the problem really is!)

Whilst I have no problems with PI's being used as "hidden" info during
document generation I have strong reservations about allowing them to be
used to contain information that affects presentation or processing.
Personally I much prefer to have processing information within clearly
defined elements, such as HTML's <STYLE> and <SCRIPT> elements. Your point
about processing instructions being a way of easily extending an existing
DTD is invalid in the context of an eXtensible Markup Language. The whole
point it that XML provides a user-extensible environment, unlike HTML and CALS!

Martin Bryan
----
Martin Bryan, The SGML Centre, Churchdown, Glos. GL3 2PU, UK 
Phone/Fax: +44 1452 714029   WWW home page: http://www.u-net.com/~sgml/



