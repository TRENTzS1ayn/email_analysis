docno="lists-054-15287006"
received="Sat Sep 14 14:03:05 1996"
isoreceived="19960914180305"
sent="Sat, 14 Sep 96 12:56:07 CDT"
isosent="19960914175607"
name="Paul Grosso"
email="paul@arbortext.com"
subject="Re: XML and required DTDs"
id="9609141756.AA09572@atiaus.arbortext.com"
inreplyto="XML and required DTDs"
expires="-1"


To:w3c-sgml-wg@w3.org


> Date:         Fri, 13 Sep 96 19:33:02 CDT
> From: Michael Sperberg-McQueen <U35395@UICVM.UIC.EDU>
> 
> I'll try to answer your questions more directly this time.  Sorry for
> any confusion.

I think things are clearer for me, and we are probably in general
agreement except that I still tend to bring a different viewpoint
to the discussion which leads me to emphasize different things.

For one, when we hear "optional" you emphasize the 
potential existence, and I emphasize the potential non-existence.

> >
> >In other words, I'll have the instance and not the DTD.  Now, what is
> >an (XML or SGML) editor supposed to do?
> >
> >Now what about an XML Editor?   Do we envision such a thing as an
> >XML Editor that works without declarations?
> 
> I think such software is imaginable.  For some circumstances, it
> might be useful.  But I think an XML editor ought to be allowed to
> insist that declarations be provided.  (This would be a restriction
> on the All Apps Work on All Docs rule, but declarations can always be
> generated if the user really really wants to use your editor.)

In general, this is how I think:  if the user can get away with doing
something, they will (and why not!).  And then they'll want to know why
my product doesn't do what they want.  This will be particularly hard
to explain to people because the average person will think "XML is a
subset of SGML."

If DTDs are optional for XML editors, someone will write an XML editor
that edits a document without a DTD.  I would like to explore this
avenue more.  (I am not necessarily against this--I can see some
advantages--but I think it has lots of ramifications.)  

The scenario I see is as follows:  my customer uses Adept to create an
XML compliant document that conforms to a DTD and they send that to
someone else who uses a public domain XML editor that doesn't use
DTDs.  That other person will modify the document in the XML editor and
will very likely do something so that the document no longer complies
with the DTD my customer used to create it.  Then the other person
returns the document to my customer who tries to bring it up in Adept
and can't.  Or, maybe Adept is smart enough in "XML mode" to
auto-provide declarations for undeclared elements and to ignore
contexts that are not permitted by the DTD.  Then my customer goes to
re-insert that document into their SGML repository, the the database
integrated with Adept can't accept the invalid document.

Does all this give either my products and/or SGML itself a black eye?

I think the upshot is that my concerns are real, but they cannot be
addressed by this group.  It's more a question of market place
education and niche differentiation, and I better alert my marketing
department--and the marketing track of SGML Open--to the upcoming need
to position XML and SGML properly vis a vis each other.

paul



