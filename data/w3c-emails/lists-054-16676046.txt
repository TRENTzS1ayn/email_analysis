docno="lists-054-16676046"
received="Fri Sep 20 13:57:03 1996"
isoreceived="19960920175703"
sent="Fri, 20 Sep 96 12:53:00 CDT"
isosent="19960920175300"
name="Paula Angerstein"
email="paula@texcel.no"
subject="Re: XML vrs SGML tools"
id="9609201753.AA18922@atiaus.arbortext.com"
inreplyto="XML vrs SGML tools"
expires="-1"


To:w3c-sgml-wg@w3.org

> From: Len Bullard <cbullard@HiWAAY.net>
> 
> My reason for participating in this working group is not 
> to fix the existing generation of tools, applications, or 
> data ...
> 
> Make SGML easier to write applications for, and that is possible.  
> It opens up the real market for SGML.

I would like to second Len's opinions here. I feel the important
result of XML is that it will become feasible for integrators,
major software vendors, and little-guy "glue-type" software vendors
to use SGML/XML as the basis for totally new products and applications.

I would like to envision a whole slew of products that together form a
"toolkit" for enabling rapid applications built for SGML data stores.
Look at how many tools are out there for dealing with SQL data--as
developers and integrators, we should have a similar complete set of
tools to work with SGML. But they don't exist today because the barrier
to entry for SGML development is too high (even if I plan to use
SP, I've got to figure out how to use it and eventually understand
features of SGML I might not care about). It just hasn't been an
attractive area to developers looking for new areas because it initally
appears too hard.

The result of XML should be a more attractive starting point for
developing SGML tools, thus a more complete set of tools, thus when a
customer needs to solve a problem, he will choose SGML to solve a bigger
piece of that problem (maybe all of it) because he knows he can get all
the applications he needs to "play" with the SGML.

A complete SGML solution may not be appropriate for every problem, but
with proper tools and more applications, I could see SGML being used
where relational databases, PDM tools, and other specialized tools have
been used before.

The heavy-duty generalized components of a solution--document managers,
editors, and browsers--probably won't be affected greatly by XML. It's
the supporting pieces that provide specialized functions or help integrate
with other types of products that will be allowed to bloom and grow.

The final result is that the use of SGML becomes more pervasive and we
vendors of the generalized components have a bigger market. We are now
sharing it with more vendors of SGML/XML tools, but we are not losing
it to other solutions.



