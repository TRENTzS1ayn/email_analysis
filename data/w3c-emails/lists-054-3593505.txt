docno="lists-054-3593505"
received="Wed Dec 18 10:02:51 1996"
isoreceived="19961218150251"
sent="Wed, 18 Dec 1996 10:01:23 -0500"
isosent="19961218150123"
name="Gavin Nicol"
email="gtn@ebt.com"
subject="Re: RS/RE, again (sorry)"
id="199612181501.KAA00438@nathaniel.ebt"
inreplyto="199612181334.IAA10239&#64;calum.csclub.uwaterloo.ca"
expires="-1"


To:papresco@calum.csclub.uwaterloo.ca
CC:w3c-sgml-wg@w3.org

>It's becoming a little clearer. I'm starting to wonder if we're talking 
>apples and oranges.  Your proposal seems to define an application
>architecture (what components say what to what). But I don't understand
>how that translates into a *language* (what is valid, invalid, and what
>constructs mean).

Very simple. The XML *language* as I look at it, is completely
seperate from the language defined in a DTD. In other words, I am
concerned primarily with the meta-language language definition, while
you are primairly concerned with the language defined *using* the
meta-language, which I leave to the "validator".

>But in XML and SGML, the concept of "what is the parse" and "what is the 
>validator" are not as interesting to users as "what is the parser going to
>return to the application" and "what is the validator going to report as 
>correct." So separating the "parser" and the "validator" is only interesting
>to CS types. Although on other days I would find that fascinating, today I
>only care about the language.

This is very important for creating a clear language definition. I
think users care about that.

FYI. I am not a "CS type", but rather a "sociologist type"... I am
concerned about rigourous definition only in so far as it affects the
overall usability/dependability to the language.



