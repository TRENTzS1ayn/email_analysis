docno="lists-054-9819365"
received="Mon Oct 14 20:14:33 1996"
isoreceived="19961015001433"
sent="Mon, 14 Oct 1996 19:14:27 -0500"
isosent="19961015001427"
name="Len Bullard"
email="cbullard@HiWAAY.net"
subject="Re: B.7 Conditional inclusion in DTDs?"
id="3262D763.79BD@HiWAAY.net"
charset="us-ascii"
inreplyto="326a84c3.2874946&#64;mail.alink.net"
expires="-1"


To:Charles@SGMLsource.com
CC: Michael Sperberg-McQueen<U35395@UICVM.CC.UIC.EDU>, W3C SGML Working Group<w3c-sgml-wg@w3.org>

Charles F. Goldfarb wrote:
> 
> On Sat, 12 Oct 96 15:06:59 CDT, Michael Sperberg-McQueen
> <U35395@UICVM.CC.UIC.EDU> wrote:
> 
> >On 16 October 1996, the ERB will vote to decide the following question.
> >A straw poll indicates the question needs further discussion in the work
> >group.
> >
> >B.7 How should XML deal with the need for conditional inclusion of
> >markup declarations, if XML has no marked sections (10.4.1)?
> 
> XML shouldn't have conditional DTDs. They defeat the objective of simplicity.
> Those who need complex DTD management will be using full SGML and can easily
> generate XML from it.
> --
> Charles F. Goldfarb 

Also concur.  I would personally like to see reduced complexity in 
DTD design practice.  Right now, I am creating style sheets.
The complexity of the conditional DTDs I am working with is absurd.
Modularization by parameter entity, conditionals, inclusions, 
exclusions, just to hit the obvious ones, make the state space 
of these DTDs bigger than Pluto's Orbit.  While they are legal,
they make any menu or dialog system generated from them almost
worthless as a way to guide an author.  They would be much 
better in production if broken up into multiple DTDs.  This 
is a design habit I think XML can promote.  The next 
generation of DTDs would not give one the uncomfortable 
feeling of walking in the temples of ancient Mexico where 
one can admire the intricacy, but despair at the blood shed 
to stack rocks that high.  Authors are paying a high
price for the convenience of DTD version management which 
is really not that convenient and not done that often. The
rate of change isn't that high. While not a technical 
concern, promoting simplification for the sake of 
effective production is a worthy goal.

len



