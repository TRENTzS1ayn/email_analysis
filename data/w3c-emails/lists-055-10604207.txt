docno="lists-055-10604207"
received="Tue Jan  7 23:39:25 1997"
isoreceived="19970108043925"
sent="Tue, 7 Jan 1997 23:42:36 -0500"
isosent="19970108044236"
name="David G. Durand"
email="dgd@cs.bu.edu"
subject="Re: [dgd&#64;cs.bu.edu: BOS confusion (analysis; suggestion to  resolve Newcomb/Bryan conflict)]"
id="v02130502aef8bccb174a@[128.148.19.133]"
charset="us-ascii"
inreplyto="[dgd&#64;cs.bu.edu: BOS confusion (analysis; suggestion to  resolve Newcomb/Bryan conflict)]"
expires="-1"


To:w3c-sgml-wg@www10.w3.org

At 4:25 PM 1/3/97, W. Eliot Kimber wrote:
>But wouldn't anything else be a query and thus have to go after a "?".

   Queries _always_ invoke a server-side process. #-strings invoke a
client-side process, that depends on the MIME-type of the resource
deisgnated by the URL the #-string is attached to.

    If we want to put sub-resource (ie fragment of URL return value)
addressing into XML, the only way that can be put into a URL is via the #
string. This is nice because we have a way to point at IDs, (or arbitrary
attribute values), or arbitrary XML-dependent substructures.

    The kinds of feature that we are talking about (like TEI location
ladders) will not be useful if they depend on special servers. I don't
think XML addressing formats should require the use of a special server,
which Gavin's proposal would require. On the other hand, a client could
recognize that a particular #-string could be resolved by a particular
server if it wanted, and translate the URL.

    So, _if_ we want a URL to be able to encode locations within documents,
I think we have to use the #-string. I wanted to dump on this proposal when
Terry first made it, but I think it's the correct way for us to integrate
our XML-specific addressing modes into URLs.

    I stick with my earlier syntax proposal, something like:

    #-string := '#' NAME |
                '#' '(' ADDRESS-TYPE-NAME string ')'

    string := URLchars* | '(' string ')'

    Where all literals are tokens (i.e. Ws ignored implicitly, and parens
have to be %escaped if not part of the addressing scheme).

   Address types might be the following:

    ADDRESS-TYPE-NAME := "-XML-TEI" | "-XML-DSSSL"

If the first char is a '(' you have a structured location string of some
kind, else you have an ID. We make the convention that parens match in any
structured location string, and it's simple to parse even one that you
can't process. Actually, the latter condition is nice, but not necessary.

   I also liked the idea of having an attribute query, to allow DTD-less
processing, instead of and ID-style reference ... in which case the NAME in
the first production would change to "NAME '=' quoted-string" where quoted
string would have the obvious regexp definition.

   I do think we should have element (and pseudo-element) level addressing,
and that it should be accessible via a URL...

   -- David

I am not a number. I am an undefined character.
_________________________________________
David Durand              dgd@cs.bu.edu  \  david@dynamicDiagrams.com
Boston University Computer Science        \  Sr. Analyst
http://www.cs.bu.edu/students/grads/dgd/   \  Dynamic Diagrams
--------------------------------------------\  http://dynamicDiagrams.com/
MAPA: mapping for the WWW                    \__________________________



