docno="lists-055-11555481"
received="Tue Jan 14 10:48:30 1997"
isoreceived="19970114154830"
sent="Tue, 14 Jan 1997 09:46:01 -0900"
isosent="19970114184601"
name="W. Eliot Kimber"
email="eliot@isogen.com"
subject="Re: Using HyTime Arcform stuff (was Re: Ephemeral XML?)"
id="3.0.32.19970114092730.00c68a04@uu10.psi.com"
charset="us-ascii"
inreplyto="Using HyTime Arcform stuff (was Re: Ephemeral XML?)"
expires="-1"


To:dgd@cs.bu.edu(David G. Durand),w3c-sgml-wg@www10.w3.org

The original issue as presented by Joe English was:

>This sounds like a good approach, as long as the XML spec
>also mandates some form of declaration to enable specific
>architectures.

I simply pointed out that a specification for such a declaration exists
and, even more, *is currently implemented* by at least one parser (SP).

At 12:30 AM 1/14/97 -0500, David G. Durand wrote:

[...]

>In any case, rigamarole declarations like the above should not be required
>for XML linking: the use of the XML-linking architecture can imply _all_
>the declarations required by HyTime. In other words, given the lack of
>legacy data ans legacy processors for HyTime (as amended by the TC) I think
>that that level of compatibility is of minimal importance. Certainly, we
>fail the stoopid test if we tell our users that they have to type in
>anything like that to enable linking.

I presented the entirety of the HyTime spec to provide context and show the
options, but then I said:

                                      Or, you could consider the names
>in the ArcBase PI to imply notation declarations with omitted system
>identifiers if no notation declaration is present, at which point things
>like catalog lookup come into play and you could put the name-to-public ID
>mapping in an external catalog if necessary (which it's probably not 99.99%
>of the time).

Which means that *the most* you would ever need in practice is one PI
listing the architectures used by a document.  *IT MUST BE THE CASE* that
some XML documents will use architectures besides XML Link, therefore, XML
should provide a general mechanism for declaring the use of architectures.
I don't see how you could get much simpler than a PI that contains a list
of architecture names.

>I'm worried that they will be antsy at a declaration like
><?XML arch xml-linking xml-forms>
>which will be required by nearly every document.

It would only be required when you are not certain that your processing
application will assume the use of these architectures.  For example, both
Panorama and HyBrowse assume that they documents they are processing are
HyTime documents, whether you properly declare the architectures or
not--that's because they're both HyTime processors, so they just provide
the facilities by default, looking for attributes named "HyTime" and so on.
 But, if you want to use other architectures or if you want to do renaming
or use architecture control values other than the defaults, then you need
to provide the necessary declarations, so you need a syntax for doing it.
Certainly you could expect all purpose-built XML browsers to automatically
provide XML-Link or XML-whatever support whether declared or not.

Can we stipulate that it is assumed that nobody in this discussion will
knowingly suggest that any syntax be required if it can be reasonably
inferred?  I believe that's a basic design principle behind XML.

Cheers,

E.
--
W. Eliot Kimber (eliot@isogen.com) 
Senior SGML Consulting Engineer, Highland Consulting
2200 North Lamar Street, Suite 230, Dallas, Texas 75202
+1-214-953-0004 +1-214-953-3152 fax
http://www.isogen.com (work) http://www.drmacro.com (home)
"Rats in the morning, rats in the afternoon...if they don't go away, I'll be
re-educated soon..."                 --Austin Lounge Lizards, "1984 Blues"



