docno="lists-055-12811983"
received="Thu Jan 23 10:57:24 1997"
isoreceived="19970123155724"
sent="Thu, 23 Jan 1997 09:54:44 -0900"
isosent="19970123185444"
name="W. Eliot Kimber"
email="eliot@isogen.com"
subject="Re: Relationship Taxonomy Questions"
id="3.0.32.19970123095221.00b70da0@uu10.psi.com"
charset="us-ascii"
inreplyto="Relationship Taxonomy Questions"
expires="-1"


To:cbullard@hiwaay.net
Cc:w3c-sgml-wg@www10.w3.org

At 08:52 AM 1/23/97 -0600, Len Bullard wrote:

>Those are application systems, not "purviews".  One has a range of 
>applications which currently interoperate based on the use of the URL 
>specification and predefined schemes which in practice, work out to 
>be network protocols.  

Len and I are using the term "application" in different ways.  By
"application" I mean it in the SGML and database sense, meaning a
collection of data of specific types and semantics to which processing is
applied, rather than the processors themselves.  If I understand Len's use,
he means the actual system used to implement the application.  Many
programmers don't make a distinction between these two uses: the software
is inseparable from the data in their mind.  But this is a self-defeating
mindset because data tends to outlive software, thus binding data to
software to closely ensures the obsolescance of the data.

                                   Within a given application framework,
>inter-object 
>messaging is provided by the API for that framework.... err.. messages
>and 
>functions.  

I think there's a basic disconnect here.  The purpose of XML is to define
*data representation languages*, not functional ("programming") languages.
Hyperdocuments are not programs any more than relational databases are
programs. Thus, issues of "API", "messaging", "functions", etc. are not
relevant to the discussion of hyperlink *representation*.  They are, of
course, directly relevant to the issue of hyperlink *implementation*:
applying behavior to links, just as they are to the issue of SGML document
processing implementation in general.  But there will be many different
implementations for the same documents: that's the whole reason for using
indirections like SGML in the first place.  If you focus too quickly on
implementation details without first defining the overall data model, you
run a serious risk of building a self-limiting system.

Remember: there's no difference between a hyperlink represented in an
abstract data representation scheme and any other element type except the
type of processing that *might* be associated with it.

Cheers,

E.
--
W. Eliot Kimber (eliot@isogen.com) 
Senior SGML Consulting Engineer, Highland Consulting
2200 North Lamar Street, Suite 230, Dallas, Texas 75202
+1-214-953-0004 +1-214-953-3152 fax
http://www.isogen.com (work) http://www.drmacro.com (home)
"Rats in the morning, rats in the afternoon...if they don't go away, I'll be
re-educated soon..."                 --Austin Lounge Lizards, "1984 Blues"



