docno="lists-055-12891901"
received="Thu Jan 23 11:56:35 1997"
isoreceived="19970123165635"
sent="Thu, 23 Jan 97 11:56:15 EST"
isosent="19970123165615"
name="lee@sq.com"
email="lee@sq.com"
subject="Re: Relationship Taxonomy Questions"
id="9701231656.AA06182@sqrex.sq.com"
inreplyto="Relationship Taxonomy Questions"
expires="-1"


To:w3c-sgml-wg@www10.w3.org

Eliot wrote:
> Len and I are using the term "application" in different ways.  By
> "application" I mean it in the SGML and database sense, meaning a
> collection of data of specific types and semantics to which processing is
> applied, rather than the processors themselves.  If I understand Len's use,
> he means the actual system used to implement the application.  Many
> programmers don't make a distinction between these two uses: the software
> is inseparable from the data in their mind.  But this is a self-defeating
> mindset because data tends to outlive software, thus binding data to
> software to closely ensures the obsolescance of the data.

This is an absurd claim, and I assume it should be taken as
Religious Rhetorick, but if there is really a misunderstanding,
it's worth clearing up.

Calling a piece of software that processes data an application does not
in any way imply that software and data are inseperable.  It is merely
a difference in terminology.  Author/Editor is an application, in the
common, normally-accepted, non-SGML meaning of the term, as is HyMinder,
as is Adept, as is Microsoft Word, as is SoftQuad Panorama.  Only some of
these are also SGML Applications.

So an application can preserve a distinction between data, data format
and implementation if it wants.  I assume that Eliot meant data format
rather than data, or he really _is_ out to lunch.

Eliot, I stand by my claim that too much HyTime rots the brain :-)

Lee



