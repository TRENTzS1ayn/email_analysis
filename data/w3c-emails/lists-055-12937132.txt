docno="lists-055-12937132"
received="Thu Jan 23 12:53:41 1997"
isoreceived="19970123175341"
sent="Thu, 23 Jan 1997 12:57:18 -0400"
isosent="19970123165718"
name="Murray Altheim"
email="murray@spyglass.com"
subject="Re: Relationship Taxonomy Questions"
id="v02140b00af0d299156fe@[208.203.149.72]"
charset="us-ascii"
inreplyto="Relationship Taxonomy Questions"
expires="-1"


To:bosak@atlantic-83.Eng.Sun.COM(Jon Bosak)
Cc:w3c-sgml-wg@www10.w3.org

(Executive summary: Ramblings of the confused.)

Jon Bosak <bosak@atlantic-83.Eng.Sun.COM> writes:
[...]
>1. Contra some statements which have been made by various people over
>the last little while, it is not enough for XML to specify pure
>syntax.  XML has to *interoperate*.  No shared semantics, no
>interoperation.  The interesting, deep, and dangerous question is,
>which semantics are the right ones to share?

Some of the link discussion makes unclear to me the scope of the XML
specification. I hope I'm not coming off of Planet 9 on this one, but here
goes...

An argument could be made that the necessary semantics for XML should
extend not only to links and stylesheets, but to other features such as
user feedback (forms/CGI), etc., where we begin to move into the realm of
specifying HTML++. Rather than try to create a somewhat arbitrary threshold
of interoperability on including a specific feature or syntax, why not
create a simplified, structured method for sharing DTD components, plus a
method of binding the necessary relationships, behaviors, or presentational
information to the semantics described in those components? Are we looking
for a specification for this binding, or beginning to move into the
territory of specifying XML "features"?

[If a DTD-less XML document is a subset of the functionality of, let's say,
HTML, then we've haven't described a meta language, we've described an
extensible subset of HTML. Non?]

Rather than specify a recommended XML link syntax, an XML stylesheet
syntax, an XML table syntax, we could devise the method whereby a
document/DTD author can pull these components together in an structured
(and simplified) manner. Sort of an "architectural forms for dummies"
arrangement.

We could still go ahead with creating or recommending existing modules (a
TEI-like link spec and CALS tables come to mind), but would have then
abstracted their connection from the core of the XML specification. A
two-layer spec? Layer one describes the core XML syntax (basically what we
have now in 1.0) plus a "behavior-sheet" syntax and a binding method
between the two. Eliot's link semantics would be in the second layer, where
we recommend specific behaviors, relationship semantics, etc.

>The preceding comments have added virtually nothing to this
>discussion, but I hope that I have satisfactorily discharged my
>obligation as a member of the ERB to put my position on record.

I kinda feel this message may need the same disclaimer. For the record, I
was never one for conspiracy theories: just confused a bit by the process.

Quoting Aleksandr Lebed in today's NY Times: "There's got to be a time when
you stop stepping on the same rake."

Whack.

Murray

```````````````````````````````````````````````````````````````````````````````
    Murray Altheim, Program Manager
    Spyglass, Inc., Cambridge, Massachusetts
    email: <mailto:murray@spyglass.com>
    http:  <http://www.cm.spyglass.com/murray/murray.html>
           "Give a monkey the tools and he'll eventually build a typewriter."



