docno="lists-055-15341689"
received="Wed Jun  4 23:00:26 1997"
isoreceived="19970605030026"
sent="Wed, 4 Jun 97 23:00:23 EDT"
isosent="19970605030023"
name="lee@sq.com"
email="lee@sq.com"
subject="Re: KISS (was: Parameter entity references in WF docs)"
id="9706050300.AA03070@sqrex.sq.com"
inreplyto="KISS (was: Parameter entity references in WF docs)"
expires="-1"


To:w3c-sgml-wg@w3.org

Dan:
> I think they should be modelled not as syntactic, token
> pasting thingies, but as typed language elements.

Len:
> I agree.  That direction would give them a utility beyond 
> string substitutions.  This would be a worthy work item. 
> 
> Does everyone think it is needed for XML 1.0?
No.  I'm concerned that
(1) this is a fairly fundamental change to the SGML model of delimiter-based
    textual mode-specific substitution;
(2) such a fundamental change may have far-reaching consquences;
(3) It's nearly July.

XML doesn't even have lexical scope, let alone an abstract (or concrete)
type model.

The namespace proposals do not clearly separate the concepts of lexical
scoping, dynamic scoping and early/late/deep binding, and although not
all of these are meaningful perhaps for an embedded markup language,
I think this shows that we are at very early stages.

When it comes to adding lexical types, such as dates, integers, natural
numbers (Z and Z+ and N if you will) and primes and numbers-divisible-by-
three and French Verbs and Nasdaq ticker symbols and all the other things
that people have wanted in SGML and that have been implemented over the
years in various tools (including most or all of the above), where will it
ever end?  How should we decide?  A markup language is not at all like a
programming language.  Expressivity is measured not by Turing Completeness,
nor yet by Bertrand Russell's logic, nor can it be derived from axioms.

Expressivity of a markup language is derived from its neutrality with respect
to data types: in this sense, its lack of typing may actually be a virtue.
I am not sure.

Leave parameter entities there as macro string substitution.
It's well understood, and can be implemented easily.

Make the spec clearer where it needs to be.

Call it 1.0 and let's move on.

Namespaces, scoping, schemata, epimorphistic disclusion and other ephemera
can surely wait.  They have waited for ten years, and we are catching up
slowly.  By the time we reach them, they will have matured, ripened, and
yet we hope not soured, so that we can make fine wine.

Lee



