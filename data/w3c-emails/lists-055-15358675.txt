docno="lists-055-15358675"
received="Thu Jun  5 00:36:10 1997"
isoreceived="19970605043610"
sent="Wed, 04 Jun 1997 23:35:39 -0500"
isosent="19970605043539"
name="len bullard"
email="cbullard@hiwaay.net"
subject="Re: Re PEs"
id="3396421B.757A@hiwaay.net"
charset="us-ascii"
inreplyto="199706050220.TAA00911&#64;bolt.sonic.net"
expires="-1"


To: Terry Allen<tallen@sonic.net>
CC:w3c-sgml-wg@w3.org

Terry Allen wrote:
> 
> Len Bullard replying to Alex Milowski:
> | > Simplicity does not always equal functionality.
> |
> | True but it goes a long way toward first pass
> | implementation simplicity and as stated, "training wheels"
> | DTDs.  I don't find PEs hard; just rugs for hiding
> | domain messiness.
> 
> I have taken to heart much of what Len has said wrt PEs and complex
> DTDs, but I would like to know where in TEI or Docbook this valuable
> feature is used to cover over "domain messiness."

In these DTDs, the parameter entities are correctly applied.

In fact, DTDs at this complexity ARE hard to manage without 
them (or their equivalent).  Yet they are still just factored 
strings.  The semantic significance of those string sets 
is implied.

That Eve is working very hard on a translation is a sign 
of what is next.  No quarrel.  Good move.  My problem with 
them is the complexity required to understand, apply, and 
implement systems to apply them.  Do PEs change that? 

These are not the DTDs I expect to see large numbers of 
XML apps built around.  They are SGML and they are done.  :-)

Why do they need PEs?  Just for the absurdity of it, 
how would you organize those DTDs without them?
 
> | However, I like Dan Connolly's suggestion about functionality
> | beyond "pastie thingies" and think that should be
> | considered before a final decision about PEs is made.
> | This may be a very golden opportunity.
> 
> Are we still doing SGML?  If PEs go away in XML, the need
> for SGML DTDs increases without bound.  

There will be more <!DOCTYPEs I grant you.  It is still SGML. 

> If I need to maintain
> my DTD in SGML even when I'm going to output XML, why do I
> need an XML DTD?  

For what we've always used it for, first, validation.
For what we've always used typed elements for:  anything we want.
For what we might use it better for given Dan's suggestion: 

Dan wrote:

>>I think they should be modelled not as syntactic, token
>>pasting thingies, but as typed language elements.

>>I have done some work to embed typed parameter entities
>>into 8879 syntax. The result is that the types are
>>syntactically evident, ala hungarian notation.

If a parameter entity were a stronger form of typing, 
I'd like it better.  Right now they are aggregating 
strings.  It seems weird to make the parser 
(ooops... i used the p word...)  do the 
job of a pre-processor.

> Would it not be simpler to eliminate DTDs
> from XML entirely?  If some completely new markup language is
> to be defined (a legitimate goal), why cling to SGML conformance?

Obstinance?  Cussedness?

XML/SGML conformance seems to be the sticking point 
in so many discussions.  Our problem is we are maintaining 
two sets of books for one business and that is always a 
difficult problem to negotiate.  So far so good.

> ... "eliminate DTDs altogether"

Where are they used in a family of XML processors?

o Batch validation  
o Generator-initialization.
o ?

len



