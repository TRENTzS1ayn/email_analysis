docno="lists-055-16707109"
received="Thu Jun 12 20:44:15 1997"
isoreceived="19970613004415"
sent="Thu, 12 Jun 97 20:44:05 EDT"
isosent="19970613004405"
name="lee@sq.com"
email="lee@sq.com"
subject="requiring DTDs [was: RE Deleta est]"
id="9706130044.AA10557@sqrex.sq.com"
expires="-1"


To:w3c-sgml-wg@w3.org

Peter@ursus.demon.co.uk (Peter Murray-Rust) wrote:
> <PROPOSAL>
> All XML processors must read the DTD(s)
> </PROPOSAL>

If you do this, you've lost our good (if grubby) Dirty Perl Hacker.

If DTDs were in xml syntax, I don't think it would be a big issue,
since you've got to be able to parse that anyway.

<xml-head>
    <Entity>
      <name>Simon</name>
      <description>A former friend, long since gone</description>
      <contents>
anything you like as long as it's well-formed
      </contents>
    </Entity>
    . . .
</xml-head>
<xml-body>
  stuff
  . . .
  &Simon;
  . . .
</xml-body>

As it is, the decision was to use SGML syntax for DTDs, even though
at the time that desision was made, there seemed no possibility of getting
SGML changed in any way to support XML.

But now with every XML processor required to read an internal DTD subset,
perhaps we've lost the dirty perl hacker anyway.  If every XML processor
has to cope with
    <?XML stuff here?>
    <!Doctype marvin PUBLIC "not found" "marvin.dtd" [
<!Entity % hhg 'INCLUDE'>

<![%hhg;[
    <!Entity % fp 'INCLUDE'>
    <!Entity robot "Marvin">
]>

<!Entity % fp 'IGNORE'>

<![%fp;[
    <!Attlist android
pain (leftside|rightside) #REQUIRED
    >
    <!Entity robot "Robbie">
]>
    ]>
    <android pain="leftside">&robot;</android>

then I think things have got way too complicated.

I'd like to see the programming team working on a relational database
say
    ah yes, importing and exporting tables, let's allocate a programmer
    to XML suport for two weeks, that'll be good for marketing and
    we'll be able to interoperate with zzz and www and...

and not
    ah yes, XML, that's a complicated macro processing language,
    we don't need that, we'll just invent some extra tags and
    call it HTML/DB.


Lee



