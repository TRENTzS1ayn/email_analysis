docno="lists-055-3715594"
received="Thu Apr 17 15:12:00 1997"
isoreceived="19970417191200"
sent="Thu, 17 Apr 1997 12:10:26 -0700"
isosent="19970417191026"
name="Tim Bray"
email="tbray@textuality.com"
subject="Re: A serious detail point"
id="3.0.32.19970417120920.009dfc60@pop.intergate.bc.ca"
charset="us-ascii"
inreplyto="A serious detail point"
expires="-1"


To:w3c-sgml-wg@w3.org

At 04:51 PM 4/17/97 BST, Henry S. Thompson wrote:
><!ENTITY c "http://www.library-of-congress.gov/index/">
>...
><myptr href="&c;#ID(p324)..&c;#ID(p334)"/>

Actually, that should be <myptr href="&c;#ID(p324)..ID(p334)"/>

So the overhead is only (name-of-entity + 2) characters.  This looks
like a good solution to me.  Henry says it's

a) obnoxious [ which I'm sure he will agree requires more explication
   to be a useful argument ], and
b) inefficient in the absence of caching.  True, but that would also
   be true if you were to re-use URLs as HT proposes... I really don't
   see an efficiency win either way.

There's a big problem with remembering the last URL for re-use; the
problem of maintaining state.  If I have a collection of 5,000 such
URLs, and I need to insert one pointing at something else, then, I'm
going to have to remember to re-establish context after that pointer.
Second, if I use an XML-link from *outside* into that list of 5,000
pointers, if we use the #CURRENT-like method, I have to read them
all in series to make sure the one I'm pointing at is interpreted
correctly.  If I use the &c;#... method, then I only have to read
the internal subset before jumping to ID(p324). -T.



