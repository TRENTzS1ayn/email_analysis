docno="lists-055-4735193"
received="Mon Apr 28 07:58:10 1997"
isoreceived="19970428115810"
sent="Mon, 28 Apr 1997 18:43:43 +0700"
isosent="19970428114343"
name="James Clark"
email="jjc@jclark.com"
subject="Re: Another pseudo-element gotcha"
id="2.2.32.19970428114343.00eb85ec@jclark.com"
charset="us-ascii"
inreplyto="Another pseudo-element gotcha"
expires="-1"


To:w3c-sgml-wg@w3.org

At 19:29 27/04/97 GMT, Peter Murray-Rust wrote:
>I have been converting JUMBO internally to support some of my DTDs 
>(primarily non-textual) and in particular I have been changing to TEI format.
>I'd like to put in a strong plea to keep 'ALL' and '*CDATA' (not just because
>I have been converting my code to use them ;-)
>
>[I have routines like: 
>
>// start at 'this' Node by default (i.e. force 'HERE' behaviour)
>public NodeSet Node.TEISearch(Ladder ladder)
>public Node Node.TEISearchFirstNode(Ladder ladder)
>
>// start at root by default 
>public NodeSet Tree.TEISearch(Ladder ladder)
>public Node Tree.TEISearchFirstNode(Ladder ladder)
> 
>The two forms of each are essentially the difference between '1' and 'ALL'
>and differ because they have different return values.]

It sounds like you're using xpointers as a general-purpose processing tool
not just as a syntax for fragment specifiers in XML simple links and
extended links.  The purpose of XML xpointers is the latter not the former.
For the former all the features that I've suggested removing are useful --
in fact I think you need many other additional features for general
processing -- but for the latter I'm unconvinced.  Can you give real
examples of why these features are needed in the context of fragment
specifiers in XML xpointers in simple links and extended links in XML documents?

In fact, the more I think about it, the more xpointers seems hugely
over-complex for use in simple and extended links. Any element can be
addressed using an xpointer of the form

ROOT,CHILD(17,A)(21,B)

or

ID(FOO)CHILD(17,A)(21,B)

and such xpointers seem as robust as any.  Why do we need more than this?  I
can maybe see the need for HERE and ANCESTOR for links relative to the
current node, and maybe for DESCENDANT, but I'm having a hard time seeing
why PRECEDING, FOLLOWING, NEXT, PREVIOUS are part of the "minimum required
to declare victory".

James



