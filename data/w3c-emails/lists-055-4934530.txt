docno="lists-055-4934530"
received="Wed Apr 30 09:31:12 1997"
isoreceived="19970430133112"
sent="Wed, 30 Apr 1997 09:37:12 -0400"
isosent="19970430133712"
name="Paul Prescod"
email="papresco@calum.csclub.uwaterloo.ca"
subject="Re: Error handling: yes, I did mean it"
id="33674B08.72CB32A9@calum.csclub.uwaterloo.ca"
charset="us-ascii"
inreplyto="78DFE33066ABD0118B9200805FD431BA05914F&#64;RED-16-MSG.dns.microsoft.com"
expires="-1"


To: Jean Paoli<jeanpa@microsoft.com>, W3C SGML Working Group<w3c-sgml-wg@w3.org>

Jean Paoli wrote:
> To be short, I think that it is *essential* to state, from the
> beginning, what happens after the
> error(s) are reported.
> I do not buy Sperberg-McQueen saying that the problem in the HTML
> browsers was
> not error recovery but the lack of error messages. Error messages could
> always be turned off.

Why would they turn off the error messages on their own document? Do
most Word for Windows users turn off the spell checker? People want to
find and fix their mistakes, they just don't want to have to go to a
bunch of work to do it.

> Error messages means UI but there is a tons of applications of XML which
> do NOT have UI.
> (CDF, Database applications). 

I don't see error messages meaning UI. Error messages mean some
communications channel. Think of it this way: if error messages are
impossible without a UI then what you are proposing is that an XML
parser could just go silent in the middle of parsing a document without
telling the calling app that something has gone wrong.

> Error messages could happen in the middle
> of complex scripts and sometime you could skip them in the code.

Once again, this system is fundamentally broken. I would actually prefer
it try to recover and pretend nothing went wrong then use half the
document and pretend nothing went wrong which is what would happen
without error checking in the Bray proposal.

> When you describe mission-critical information like financial
> applications,
> you do not expect any error recovery. 

I don't know. I'm not in that business. I'd rather leave it up to them.
They are adults, just like us, and they can make their own decisions.

> When you write Java or C code,
> you do not expect error recovery. 

No, but when I write TeX, PostScript, HTML or SGML code I do. I don't
use that recovery as an execuse to not fix my mistakes, but sometimes
that recovery is a useful part of my workflow. XML is a markup language,
not a programming language. As a markup language it has a concept of a
"reader" who is the most important person in the chain. That reader has
a right to get as much access to the document as is possible. They ALSO
have a right to know that what they are looking at might be bogus.

> I think also that we must give a sign,
> a direction to
> the web community, being hardcore, from the beginning.

It keeps coming back to this. Are we creating a markup language or a
political party?

> If we do not do that, this means that incorrect documents are going to
> be published, that they will stay on the web because  some tools are
> going to be able to display
> or process them whithout requiring that their author modifies them.

As long as those tools pop up an error message, I think that they are
Doing the Right Thing. The reader's needs come first. I think it is a
rather sad view of authors that even when the tools to check and fix
their pages are freely and easily available that most will not do so. If
authors are really that stupid and lazy then they will find a hundred
ways to break XML: bad links, bad stylesheets, bogus URLs, bad metadata,
incorrect content, spelling mistakes etc. etc. Having a fascist rule for
dealing with the very lowest level doesn't get us any closer to overall
system reliability.

 Paul Prescod



