docno="lists-055-6388353"
received="Mon Feb 10 12:25:07 1997"
isoreceived="19970210172507"
sent="Mon, 10 Feb 1997 11:13:56 -0600"
isosent="19970210171356"
name="Len Bullard"
email="cbullard@hiwaay.net"
subject="Re: 1.2 link and 1.6 traversal"
id="32FF5754.5E1D@hiwaay.net"
charset="us-ascii"
inreplyto="3009.199702101609&#64;grogan.cogsci.ed.ac.uk"
expires="-1"


To:"Henry S. Thompson"<ht@cogsci.ed.ac.uk>
CC:w3c-sgml-wg@w3.org

Henry S. Thompson wrote:

We may have problems with "links in the ether" because that 
sounds an awful lot like a platonic form, but press on.

> Links (types) have a topology (number of ends, directionality), sub-structure
> (e.g. terminus roles) and contextually-bound semantics (see previous
> message about Application semantics vs. application behaviour).  Links
> (tokens) have actual end-points.

A record is a set of values which can be processed by some 
function.  I do not know what a "contextually-bound semantic" 
is.  I did not get that from the last post either, so please 
clarify.  Tag soup is still tag soup.
 
> Link descriptions have a syntax (GI, attribute names and values, etc.)
> and a semantics (what type of link they specify, how to instantiate
> individual links when processing a link description in a document
> context).

Ok.  I prefer "link representation" but that is a thin difference.
I also prefer element type definition where what is being described 
is in fact, an SGML element type.  What is missing is the notion 
of the class by which one can declare that element types in 
different DTDs are in fact, instances of a class (e.g, arch form).  

However, as soon as you say, "processing a link" we are out of the world
of declarative 
language and into functional language requirements.  Whether defined
axiomatically or indirectly, it is still a record or a structure.
 
So far, none of this is simpler or more usable than HyTime.  And 
in fact, it is getting harder to explain by the minute.

len bullard



