docno="lists-055-6972122"
received="Tue Feb 11 17:23:12 1997"
isoreceived="19970211222312"
sent="Tue, 11 Feb 1997 14:23:02 -0800 (PST)"
isosent="19970211222302"
name="Terry Allen"
email="tallen@fsc.fujitsu.com"
subject="XML process modelling [was No Metadocuments]"
id="199702112223.OAA08212@ishtar.fsc.fujitsu.com"
expires="-1"


To:w3c-sgml-wg@w3.org

Alex writes:
|Complex problems never cease to be complex problems and simple solutions rarely
| solve them.

Right.  Problems can be simplified.

| Here is, again, my opinion:
| 
| 1. The "Minimal-constructs-to-declare-success" is some kind of SO-catalog model.
|    It has its drawbacks which was well pointed out.
| 
| 2. The uniform and scalable infrastructure is a metadocument architecture or
|    whatever you want to call it--a bootstrapping document that starts the
|    whole process off.  This is more complex and, to some extent, will require
|    rejecting the premise that XML must be kept as simple to implement
|    quickly.

This is argument by assertion.  Let's begin at the beginning (where it would
have been useful to start last year).  Who's on first?  

I imagine that an XML pile-o'-stuff is first requested not by an XML
"processor" but by an app.  One scenario runs thusly:

 - App sends URL to URL-handling engine

 - URL-handling engine tickles the HTTP client to send a GET

 - Server responds by sending XML pile-o'-stuff, which can range
   from a single XML file (with pointers to other needful entities)
   to a complete set of entities, DTDs, and the like

 - This pile-o'-stuff is routed to the MIME unpacker (if need be)
   or to the app that requested it.  If to the MIME unpacker, then
   the unpacker and the app probably need to communicate with each
   other.  pile-o'-stuff gets unpacked suitably

 - App sends appropriate pieces of pile-o'-stuff to the XML parser
   (processor), possibly in a complex interaction

 - Parser returns parsed XML (for which there is, amazingly,
   no API specified) to the app, which may need to go back to
   square 1 to obtain additional info that wasn't included in
   the pile-o'-stuff

 - Eventually the app is happy and does something with the
   parsed XML that either the author or the user or the parser
   or the app or some combination decides is the Right Thang.

Now where in this scenario do you want to use 1) catalogues
and, or, 2) bootstrapping documents, and what is more complex
about 2 than 1?  Have I left out some steps?




Regards,
    Terry Allen    Fujitsu Software Corp.    tallen@fsc.fujitsu.com
"In going on with these experiments, how many pretty systems do we build,
 which we soon find outselves obliged to destroy?" - Benjamin Franklin
  A Davenport Group Sponsor:  http://www.ora.com/davenport/index.html



