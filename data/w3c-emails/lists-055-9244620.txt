docno="lists-055-9244620"
received="Sun Feb 23 20:23:01 1997"
isoreceived="19970224012301"
sent="Sun, 23 Feb 1997 19:22:58 -0600"
isosent="19970224012258"
name="len bullard"
email="cbullard@hiwaay.net"
subject="Re: SERIOUS concerns about implementation"
id="3310ED72.9EA@hiwaay.net"
charset="us-ascii"
inreplyto="v01540b0aaf3666a7c94b&#64;[207.60.235.10]"
expires="-1"


To: Dave Peterson<davep@acm.org>
CC:w3c-sgml-wg@w3.org

Dave Peterson wrote:

> At 2:38 PM 2/21/97, Len Bullard wrote:
>         *     *     *     *     *
> >Just quickly glancing, XML isn't an "application of SGML".
> >I think it is a proper subset.  HTML is an application of
> >SGML, and could be an application of XML.   That is, perhaps,
> >one way to get the point across.
> 
> We're losing sight of the subset/application spectrum.

Could be.  To me the boundary is the software that implements it.
That is where an SGML design becomes a proper application in my book.

XML retains SGML's meta-language aspects.  We also design 
for the software/application boundary the commons data types that 
make interoperability easy.  This is done within existing 
HTTP/URL semantics (sorry loose). 

What HTML demonstrates dramatically is how WELL this idea 
works when the element types are common.

Extensions are the province of the DTD writer for their DTDs.

XML lets them do that so they can use markup as requireed,
but it recognizes that where XML must work in application
software, the declaration of common data structures makes the 
software work.

> It seems to me that "subset" is
> an appropriate term for such a set of some-but-not-all of the decisions
> necessary to define an "application".

Not the one's that declare interoperable semantics.
Those have to be shared.  But that has always been 
the case with markup.  Look at the CALS Table, HTML, 
etc.  Unless XML systems share the application level as 
well as the subset level, they don't work.  I see your point. 
 
> According to this definition of "subset", an application is a subset in
> which all of the available decisions have been made.  (Or almost all--one
> could presumably still add more more-restrictive "application conventions".)
> 
> I pose three questions:  Is this "subset" a useful concept?  Is "subset"
> the right term?  And is this what you all have meant by "subset" when
> you've used the term?

The subset is the syntax and feature restrictions.
Application conventions are the special structures 
declared to enable interoperable software, eg, linking.

That leaves the processing specs.  Same deal:  libraries.

len



