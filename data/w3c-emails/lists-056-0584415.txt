docno="lists-056-0584415"
received="Tue Jun 17 21:13:58 1997"
isoreceived="19970618011358"
sent="Tue, 17 Jun 1997 18:13:28 -0700"
isosent="19970618011328"
name="Terry Allen"
email="tallen@sonic.net"
subject="About &quot;namespaces&quot;"
id="199706180113.SAA04036@bolt.sonic.net"
expires="-1"


To:w3c-sgml-wg@w3.org


Tim Bray wrote:
| The namespace discussion has been bubbling away very usefully.  Perhaps
| I can summarize a bit.

I don't think this is properly about name spaces, it is about scoping
within XML instances.  But anyway,

 ...
| 
| 2. Use Architectural Forms (maybe just calling them reserved attributes)
| 
| This was argued by quite a few people, most eloquently by James Clark.
| This has the appealing characteristic that no changes whatsoever are
| required, and you can do everything with an XML parser.  It has the
| downside that if you want to avoid huge masses of attributes on everything,
| you have to start parsing DTD syntax to get the defaults.  We are 
| encountering HUGE, MASSIVE resistance to this in web-land.  When we explain 
| that it's not that hard, we are told to go away, you've given us elements 

Yeah.  It's a tradeoff.  Maybe you haven't made the DTD syntax simple
enough.  OTOH, I'm still having a hard time seeing how any XML-compliant
processor can avoid reading the internal subset, so maybe "web-land"
isn't yet fully clued and the issue is a false one.

| and attributes, we like elements and attributes, why can't we do everything 
| with elements and attributes?  I've also heard claims that the AF technique 
| falls apart in certain examples, but I haven't seen those examples yet.

So what is the technical argument here?  that you should be able to do
everything you can do with a DTD without one?  

| This a semi-upside that if we need multiple inheritance (I think we
| don't, and would prefer to avoid it if we can) it's easy to express if
| not to understand.

I think this (#2, calling them what they are, FIXED attributes) is the
obvious winner, is modular, extensible, and Internet-friendly (if you use
URLs or URNs).  It has also already been proposed for WEBDAV, which
is covering much of the ground XML-beyond-XMLlang is traversing.

Within any particular application some processing instruction could
be defined to supply the semantic mappings for each element, so that
the need for XML attributes on every start-tag could be avoided.
So I don't think #3 has any particular virtue over #2.



Regards,
  Terry Allen    Electronic Publishing Consultant    tallen[at]sonic.net
                   http://www.sonic.net/~tallen/
    Davenport and DocBook:  http://www.ora.com/davenport/index.html
          T.A. at Passage Systems:  terry.allen[at]passage.com 



