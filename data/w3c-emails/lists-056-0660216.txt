docno="lists-056-0660216"
received="Wed Jun 18 14:09:26 1997"
isoreceived="19970618180926"
sent="Wed, 18 Jun 1997 11:11:25 -0700"
isosent="19970618181125"
name="Matthew Fuchs"
email="matt@wdi.disney.com"
subject="Re: Update on namespaces"
id="9706181111.ZM7869@scrumpox.rd.wdi.disney.com"
charset="us-ascii"
expires="-1"


To:w3c-sgml-wg@w3.org

On Jun 18,  1:27pm, lee@sq.com wrote:
> Subject: Re: Update on namespaces
> Matthew Fuchs <matt@wdi.disney.com> wrote:
> > On Jun 17,  4:52pm, Tim Bray wrote:
> > ...
> > > 2. Use Architectural Forms (maybe just calling them reserved attributes)
> > > 3. Use an all-instance syntax
> >
> > Occam's razor would indicate going with #2, since we need add nothing.
>
> Er, the idea is to provide the simplest solution that meets the needs,
> not the solution that requires least work on the part of the people
> writing the specification.
>
> The use of Architectuaral Forms might require all XML processes to
> read the DTD, in which case it might as well not be optional.

_part_ of the DTD.  I have to admit I do not understand why everyone quakes in
fear of the DTD! :-)  To tell the truth, I like #3.  But I do want to point out
we're opening the door for potential GI abuse.

>
> > The next step will be defining regular expressions for parsing the GI to
> > determine which extensions are being used.  I don't say  that's good or
bad,
> > but I suggest it will now be inevitable.
>
> I don't agree with this at all.  C++ has :: in much the same way as has
> been suggested for XML, and does not have regular expressions for parsing
> identifiers.
>
Maybe yes, maybe no.  They're very different beasts.  Besides, you just gave me
a great reason to overload  the GI - the more I overload the GI, the longer I
can avoid (oh, the horror!) reading the DTD.  Speaking of C++, Rick Jelliffe
has shown how to include casting - everyone's favorite,
good-engineering-seal-of-approval C/C++ construct - in XML.

Matthew Fuchs
matt@wdi.disney.com

-- 



