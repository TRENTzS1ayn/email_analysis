docno="lists-056-0708635"
received="Wed Jun 18 14:54:56 1997"
isoreceived="19970618185456"
sent="Wed, 18 Jun 1997 14:59:15 -0500"
isosent="19970618195915"
name="David G. Durand"
email="dgd@cs.bu.edu"
subject="Re: Update on namespaces"
id="v03007808afcdeaf3b734@[205.181.197.104]"
charset="us-ascii"
inreplyto="9706181727.AA21492&#64;sqrex.sq.com"
expires="-1"


To:w3c-sgml-wg@w3.org

At 12:27 PM -0500 6/18/97, lee@sq.com wrote:
>Matthew Fuchs <matt@wdi.disney.com> wrote:
>> On Jun 17,  4:52pm, Tim Bray wrote:
>> ...
>> > 2. Use Architectural Forms (maybe just calling them reserved attributes)
>> > 3. Use an all-instance syntax
>>
>> Occam's razor would indicate going with #2, since we need add nothing.
>
>Er, the idea is to provide the simplest solution that meets the needs,
>not the solution that requires least work on the part of the people
>writing the specification.
>
>The use of Architectuaral Forms might require all XML processes to
>read the DTD, in which case it might as well not be optional.

Without a notion of how to validate in the presence of "namespaces" you
might as well dump the notion of a DTD. Since suhc a model is not
forthcoming, I think they are a non-starter on the face of it. They
certainly fail the XML is SGML test. Which is supposedly one of the top 4
(non-negotiable) of our 10 principles.

I presented a very simple proposal that would eliminate the blot of the RMD
and require applications to parse only entity declarations and attribute
list declarations in the subset only. In what way is using features already
in the language rather than adding semantic and syntactic wildcards not a
simplest solution?

If someone could explain how the notion of validity could be plaubily
extended in the next 10 days to cover some GI-hacking proposal, my
objections don't have any weight. But even the advocates of such proposals
have not made that claim.

If you think that markup languages are enough like programming languages
that we can just import their conventions over wholesale, I've got a bridge
I'd like to sell you. Which leads to the next point...

>I don't agree with this at all.  C++ has :: in much the same way as has
>been suggested for XML, and does not have regular expressions for parsing
>identifiers.

C++ also does not have a need to allow arbitrary external processes other
than a C compiler to analyse C++ programs for widely varying tasks. C++
also does not have a syntax declaration mechanism intended to declare
constraints on the input language. Nor do :: qualified names in C++ cause
C++ syntactic constraints to be violated.

I don't buy these arguments from analogy, since the problem of C++  is
specifying computations and the problme of XML is to unambiguously delimit
the parts of (semi-)structured data objects according to a declared set of
structural constraints (DTD). There isn't much of an analogy, just some
similarities (they are both computer-parseable languages, and they do both
have identifiers, and they do share some common characters in their
syntax). Even the similarities are rather blatantly superficial.

  -- David

_________________________________________
David Durand              dgd@cs.bu.edu  \  david@dynamicDiagrams.com
Boston University Computer Science        \  Sr. Analyst
http://www.cs.bu.edu/students/grads/dgd/   \  Dynamic Diagrams
--------------------------------------------\  http://dynamicDiagrams.com/
MAPA: mapping for the WWW                    \__________________________



