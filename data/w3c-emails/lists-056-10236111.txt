docno="lists-056-10236111"
received="Mon May 19 17:27:12 1997"
isoreceived="19970519212712"
sent="Mon, 19 May 1997 17:17:44 -0400"
isosent="19970519211744"
name="Paul Prescod"
email="papresco@calum.csclub.uwaterloo.ca"
subject="Re: SD1 - Short End Tags"
id="3380C378.1106400B@calum.csclub.uwaterloo.ca"
charset="us-ascii"
inreplyto="199705191921.AA078679697&#64;hpsgml.fc.hp.com"
expires="-1"


To: Dave Hollander<dmh@hpsgml.fc.hp.com>
CC:w3c-sgml-wg@w3.org

Dave Hollander wrote:
> 
> > Paul Prescod wrote:
> > ... But the more I think about it the less I care
> > about those other applications. ...
> 
> I care because I would like to see client software develop that can do
> more with data/documents than they do now. If there is an acceptable XML
> solution to the database representation question, then it is more likely
> that XML clients will develop that support both data types and provide
> a end user more options in managing the view of the data.

If SoftQuad or Arbortext wants to extend their respective products to
handle relational database information they can trivially add a parser
for comma delimited data. That data can reside in the XML document as a
notation. Changing the XML syntax to handle this eventually just spreads
the work to everyone, including the many people who do not care about
relational-style data. Those that want to work with database files
should embed comma-delimited parsers just as those that want to work
with JPEGs must embed JPEG parsers. How far do we go in supporting
non-"text document" datatypes?

The same goes for those who want instance syntax for DTDs. I can work
with DTDs as groves in any SGML system that permits that. It doesn't
matter what the syntax (notation) was. It only matters what the internal
representation is. Therefore we should let the notations of different
data types evolve independently.

 Paul Prescod



