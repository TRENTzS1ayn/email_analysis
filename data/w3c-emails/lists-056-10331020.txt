docno="lists-056-10331020"
received="Mon May 19 20:30:42 1997"
isoreceived="19970520003042"
sent="Mon, 19 May 1997 20:22:32 +0000"
isosent="19970519202232"
name="bbauma1@cs.umbc.edu"
email="bbauma1@cs.umbc.edu"
subject="Re: SD1 - Short End Tags"
id="199705200030.UAA11407@algol.cs.umbc.edu"
charset="US-ASCII"
inreplyto="SD1 - Short End Tags"
expires="-1"


To:w3c-sgml-wg@w3.org

Let me say up front, that my leanings are against introducing short
end tags for two reasons.  First, because it does complicate certain
kinds of simple processing.  Second because the space savings argument
is not compelling. Especially after an XML file is compressed, the
space savings are minimal. I'm not certain about the argument for
error recovery.  I see error recovery as the responsibility of other
protocols.  On the other hand, I do feel very strongly that using XML
to represent database information is very important, and if allowing
short end tags in, just to satisfy the database people was what it
took, I would be sorely tempted.  

Why, consider using XML for representing database information?

1.  Because different sources of data and / or information, no matter
how they are stored (file system, relational database, object
database, text database) often need to be processed by the same
individual, and synthesized into a document.  A common format, and a
common set of tools that didn't care how the information was stored
would make this a whole lot easier.

2. Because XML / SGML can be used to represent many kinds of
information without having to write separate parsers for each
notation.  No matter how simple they are to write, you still have to
write them, and like multiple ways of closing an element, multiple
parsers will discourage interoperability. Tab delimited data may work
fine for relational databases but how about object databases, or a
hierarchical database?  

3.  Because to me the difference between a document and the highly
structured information typically found in a database is very murky,
and I don't really see the need for the distinction.  To me its a
continuum, and only XML / SGML can really support the entire thing.  
Where's a dictionary fall.  Neither databases, nor text retrieval
packages alone are wholly adequate.   The fact that the market is
segmented into the "database world", and the "information retrieval
world" each with there own standards complicates achieving item 1.  
XML / SGML can be used to at least unify these worlds at the data
level.  

4. Because DTD's are a useful way of codifying agreements between
different systems as to what is expected in an exchange.  

Of course the simple answer to XML's lack of support for a particular
feature is to just use SGML.  If, however, XML is to be the success
that we all hope, market forces may complicate that decision.

B. Todd Bauman



