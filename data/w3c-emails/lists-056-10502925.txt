docno="lists-056-10502925"
received="Tue May 20 12:15:50 1997"
isoreceived="19970520161550"
sent="Tue, 20 May 1997 11:11:44 -0500"
isosent="19970520161144"
name="Paul Grosso"
email="paul@arbortext.com"
subject="Re: SD1 - Short End Tags [fmt]"
id="3.0.32.19970520110419.006ed120@pophost.arbortext.com"
charset="iso-8859-1"
inreplyto="SD1 - Short End Tags [fmt]"
expires="-1"


To:w3c-sgml-wg@w3.org

At 16:58 1997 05 17 +0900, Weichel Bernhard (K3/EES4) wrote:
>I am highly supporting the proposal of Short End Tags.
>
>
>> ----------
>> Von: altheim[SMTP:altheim@mehitabel.Eng.Sun.COM]
>> Gesendet: Samstag, 17. Mai 1997 00:42
>> An: w3c-sgml-wg@w3.org
>> Betreff: Re: SD1 - Short End Tags [fmt]
>> 
>> 
>> Where a simple processor could simply search forward for the end tag,
>> this
>> would no longer be the case. We now need to build a parse tree. I'm
>> sure that
>> Microsoft's (or any large vendor's) application design would have no
>> problems dealing with this, but our college programmer's project just
>> got a lot more complex, and that little perl script just got a *lot*
>> bigger.
>> 
>In order to safely parse a well formed XML-Instance (who?s GIs still
>must be balanced) it 
>is required to keep the GI of the actual open elements.

No, this is the whole point.  It is not always necessary for a simple
(e.g., Perl script) application to keep track of such things given a
well-formed XML instance.  "Safe" parsing is not relevant except for
applications that are expected to be able to handle erroneous documents,
but the whole point is that most XML processors [in fact, all XML
processors according to the draconian error handling stance] can assume
correct input and so don't have to tiptoe around to be "safe."

> Therefore, a
>simple search for the
>endtag would not fulfil the requirements of an XML-parser.
>
>Anyhow, if one wants to look for the matching endtag, it is simply a
>counter reflecting the
>actual number of open elements. I don?t think its too difficult. 

True if you are counting open elements, but why should a perl script
be required to do that?

>To be honest, who will deals with the raw XML files? Take an XML-editor
>who inserts GIs in endtags.
>Write a simple tool that does this. Use SPAM ...
>

Sure, it's easy for a parser to insert GIs in endtags.  But XML is
supposed to be easy for the lightest weight of applications.  Why
should the perl script be forced to be prefaced by a SPAM application?

I'd turn it around and say if space/transfer volume savings is so
important, use short tag names and compression schemes.  Compression
and decompression are much simplier, smaller, and more ubiquitous
applications than XML-parsing, GI-inserting applications.

paul 



