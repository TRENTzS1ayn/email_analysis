docno="lists-056-10762361"
received="Tue May 20 19:49:21 1997"
isoreceived="19970520234921"
sent="Tue, 20 May 1997 18:49:01 -0500"
isosent="19970520234901"
name="len bullard"
email="cbullard@hiwaay.net"
subject="Re: SD5 - Namespaces"
id="3382386D.6C3C@hiwaay.net"
charset="us-ascii"
inreplyto="6954&#64;ursus.demon.co.uk"
expires="-1"


To:Peter@ursus.demon.co.uk
CC:w3c-sgml-wg@w3.org

Peter Murray-Rust wrote:
> 
> In message <2.2.32.19970520190727.00b311a0@pop> "Steven J. DeRose" writes:
> > At 03:58 PM 05/20/97 GMT, Peter Murray-Rust wrote:
> >
> >
> > >This allows an author to create their own fully qualified names for GIs,
> > >thus avoiding tag collision.  How they do this is outside the scope of XML.
> > >Examples could be CML:MOL or org.w3.MathML:PRODUCT.  If the convention is
> > >adopted that the namespace prefix is either the DTD name or a fully qualified
> > >version the chances of collision are reduced to the chances of DTD names
> > >colliding.
> >
> > I'm not sure aboout this proposal, but I am sure we should not try to
> > re-define the already common term "fully qualified". It already means the
> 
> I am sorry - I didn't realise this was an SGML term.  I used it by analogy
> with fully-qualified-domain-name such as I was using to resolve ambiguity.

When I've seen this technique used elsewhere in SGML, I usually refer 
to is as a compound morphological identifier.  (not better, i agree).
It is legal in SGML but indicates that another engine (not the parser) 
is operating on the data to use the semantics.
 
> It's not a subtyping mechanism.  It's more like adding someone's postal
> address to their name to resolve difficulties.  If I write

It can be, but it is not an SGML subtype, per se.  It can be an 
application subtype where in effect, in another application standard, 
you define the morphology.  MIL-STD-1808 for aircraft subsystems 
works like that.   One can apply the technique to the GI or 
to attributes, or content.

> If we could get all DTD authors to adopt this convention, we could forget
> about the namespace problem.

Some have.  That was why.  It worked but it again says there is a 
demarcation between what XML can or should specify and what applications 
can and will specify.
 
> The problems are that if humans author this, it puts them off.  

That's why we have tree-based object lists for editors.

> I don't understand this - sorry :-).  Does this imply that the DTD is recast
> as
> <OBJECT CLASS="MOL">
> <OBJECT CLASS="ATOM">
> ...
> to avoid GI clashes?  If so the traditional way that people write DTDs
> will need to change and it won't appeal to people.

It also demonstrates quickly what others have claimed:  why use XML 
for all of this when we have Java.  No, not serious, but it is an 
argument that keeps coming up.  I believe Steve deRose brought 
it up in context of a review of the MID design: why use SGML 
to create an object programming language?  I guess the answer 
depends on where application and data declaration divide 
conveniently for some application developer.
 
> The underlying point is that XML opens up a wonderful opportunity of
> exchanging information objects  and combining them in the same document,
> except for the namespace clashes between tags.  (Everything else can be dealt
> with).  I had expected that experienced SGML'ers would have had a simple and
> elegant solution to this, but I haven't seen it.
> 
> It isn't essential to have the ':', but it's much less elegant without it.

You can have it.  You have to declare it. XML as with SGML doesn't 
have to enforce it.  It is a neat idea.

len bullard



