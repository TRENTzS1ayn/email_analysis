docno="lists-056-11068063"
received="Wed May 21 14:24:20 1997"
isoreceived="19970521182420"
sent="Wed, 21 May 1997 14:27:15 -0500"
isosent="19970521192715"
name="David Durand"
email="dgd@cs.bu.edu"
subject="Bray's initial comments on SD1-5"
id="v03007807afa8f98a0a4e@[205.181.197.69]"
charset="us-ascii"
expires="-1"


To:w3c-sgml-wg@w3.org

Basically, I agree.

SD1:
</> is not worth it for the benefit. It's easy to implement in a parser,
but we just don't need it that much...

It also violates several principles (no options, minimization, DPH
life-hardener), for minimal benefit.

SD2:

I also don't see the need. Since there is no reason not to use an element
instead of an attribute in any concrete case where element structure would
be useful, there seem to be no grounds for the request.

In other postings it has seemed what was really wanted was a way for some
applications to discover that they should ignore some data: which doesn't
mean we need structured attributes (you can't ignore attributes except at
your peril any more than you can ignore elements) -- but we may need some
namespace discipline. Even more likely, it means that the proposed
applications need to make some decision as to an attribute value that can
be used to signal the special processing semantics that indicate what class
of applications can safely ignore the data in question.

SD3:

Data types are good.

But they are not part of XML. They should be implemented on top of it.
Again, a standard attribute could cover the case here pretty easily.

We're certainly not going to get data types right in the next few weeks.

SD4 + SD5:
  Sure, I argued for this during the discussion of DTD syntax way back.
Again, it could be an easy add-on and should use instance syntax, which we
can define with a DTD. Much much to hard for July 1. This may also be
related to namespaces, as they may best fit into such a "schema" system. (I
think so).

There are so many hard problems involved in this and namespaces that they
must be carefully discussed and planned. We can only harm ourselves by
rushing to implement a hack without thinking about it hard. Both of these
go beyond current markup practice, and awill be hard to get right. As we
know from the past of SGML, even good programming language analogies have
to be treated with great care -- markup and rrogramming are very different
tasks.


   -- David

_________________________________________
David Durand              dgd@cs.bu.edu  \  david@dynamicDiagrams.com
Boston University Computer Science        \  Sr. Analyst
http://www.cs.bu.edu/students/grads/dgd/   \  Dynamic Diagrams
--------------------------------------------\  http://dynamicDiagrams.com/
MAPA: mapping for the WWW                    \__________________________



