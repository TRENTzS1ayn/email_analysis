docno="lists-056-11376766"
received="Thu May 22 13:54:50 1997"
isoreceived="19970522175450"
sent="Thu, 22 May 1997 12:52:06 -0500"
isosent="19970522175206"
name="W. Eliot Kimber"
email="eliot@isogen.com"
subject="Re: Thoughts on namespaces"
id="3.0.32.19970522122557.0070168c@swbell.net"
charset="us-ascii"
inreplyto="Thoughts on namespaces"
expires="-1"


To:"Christopher R. Maden"<crm@eps.inso.com>,w3c-sgml-wg@w3.org

At 04:30 PM 5/22/97 GMT, Christopher R. Maden wrote:
>I think that the namespaces can be accomplished with one change to the
>assumed XML as SGML declaration and an application convention.
>
>First, I believe the primary goal of namespaces is to allow borrowing
>of established semantics - I want to use TEI's <xref>, HTML's <a>, and
>the FAQ DTD's <q> and <a>.  That means two things must be
>accomplished:
>
>Thoughts?  Counterproposals?

Why not use architectures for this?  Instead of qualifying the GI, you
create a local element type name and then name the form from which it is
derived (here deriving "mylink" from the HTML element form "A"):

<mylink html="a" href="foo"/>

The architecture approach has the advantage that it requires no change to
existing XML and SGML syntax and enables the same element type to be
simultaneously derived from different forms from different architectures,
either to represent multiple inheritance (where the semantics are combined)
or semantics only relevant to a particular use (e.g., ICADD vs HyTime).
The mechanism is transparent to systems that don't need or support it,
trivially easy to implement for systems that do (just look at the
architecture-specific attribute to get the derivation source).  Multiple
levels of derivation are managed by having one architecture derived from
another.

The down side is that the element type name space in the instance must be
managed by the document creator or DTD designer, but it has to be in any
case (qualifying a name is essentially the same as picking a unique name).

If what you want is to combine different documents, with different schemas,
into a single "compound document", that can be done by reference, where the
parts are not parsed within the context of their reference (see my post of
this AM to xml-dev).  

While I can see the appeal of being able to do some sort of "import" of one
DTD into another, I think the basic requirements can be solved adequately
(if not ideally) using existing mechanisms without the need to modify XML
or SGML syntax.

Cheers,

Eliot



