docno="lists-056-12369079"
received="Sat May 24 19:29:03 1997"
isoreceived="19970524232903"
sent="Sat, 24 May 1997 18:28:45 -0500"
isosent="19970524232845"
name="len bullard"
email="cbullard@hiwaay.net"
subject="Re: SD5 - Namespaces - New Version 2"
id="338779AD.31B2@hiwaay.net"
charset="us-ascii"
inreplyto="9705241911.AA07174&#64;sqrex.sq.com"
expires="-1"


To:lee@sq.com
CC:w3c-sgml-wg@w3.org

lee@sq.com wrote:
> 
> We need sample implementations.  We need to understand what we are doing,
> before our gazelle becomes a hippocampus.
> 
> So let's try to walk before we try to run, as I don't want to hurt my
> bare feet on all these pointy brackets and tiny colons.
> 
> Name spaces would be the biggest change to SGML since... er... since 1986,
> and one I've long wanted.  If we can wait for DSDs and Inherited
> attributes and attribute patterns and being able to distinguish
> #PCDATA from #PCDATA+, we can wait for name spaces.
> 
> We can't wait for XML deployment.

Right.

It is an issue of the classes of application that can be achieved 
with XML now and the features they will have as a result of the 
XML-n language design.  Who is trying to do what with XML?

Parsers.  Certainly.  Ok, where is the dividing line between 
the applications and parsers?  You said it yourself: terminology.

I submit this is so because the line between the app and language 
is still murky.  Or is it?  I'm used to thinking in SGML terms 
and object-oriented terms and in implementation, how those are or
aren't  
the same.  I'm not in XML.  I'm not sure where the line divides.
I'm not sure what is portable application data semantics, 
and what is data declared to ensure interoperation of ALL xml apps.

len



