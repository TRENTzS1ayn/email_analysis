docno="lists-056-12564333"
received="Tue May 27 14:10:59 1997"
isoreceived="19970527181059"
sent="Tue, 27 May 1997 18:46:27 +0100"
isosent="19970527174627"
name="Digitome Ltd."
email="digitome@iol.ie"
subject="Re: Conformance"
id="199705271810.TAA32320@mail.iol.ie"
charset="us-ascii"
inreplyto="Conformance"
expires="-1"


To:w3c-sgml-wg@w3.org

>Sean wrote:
>> Is it not strange that something as fundamental as the correctness
>> of XML parse trees is not part of the base spec?
[Lee Quin]
>No, I don't think so.  It's also not part of the ANSI C spec, nor that of
C++, Pascal, IEEE SCHEME, etc.
I agree that there are things that are "not there" in any 
language spec. I.e. from C
    x = foo (++x,x--);

Is syntactically valid but has a number of possible interpretations
that the core C spec (i.e. BNF) does not try to iron out - The order of
evaluation of the paramaters is "implemention specific". But at
least the spec. enumerates things that are implementation specific.

>A parser should be free to construct whatever data structure is 
>most suitable for its intended application.  I have a simple XMLish
>browser that doesn't use a tree at all.  Old versions of Mosaic used
>a flat linked list, and although I wouldn't recommend that approach,
>it certainly worked, at least until they tried to support tables :-)

I agree. However, the correct separation of markup from content
is required irrespective of the underlying data structures used
to represent it. A Turing Machine cannot call itself XML
compliant unless it gets this much right. Right?
 
>
>There might be some mileage in an XML version of ESIS++, I
>suppose, for testing:

Yes. What about those Life Support/nuclear
powerstation /financial XML apps. that were discussed some
time ago in the context of error handling? Is it not a bit
disconcerting that two XML parsers might interpret the same
XML doc in two different ways without the XML standard
having an opinion on which is correct? What is the correct
interpretation of torture.xml? How would a developer build
a test suite to prove s/he's got it right?

>
>Since XML is _designed_ to be easy to parse, the advantage
of an ESIS form is considerably reduced.
>
I agree it it less useful that with full 8879 but I think it
would be very useful in entity/marked section parsing for
example, which is not trivial in XML IMHO. Also I think
it would give developers something to aim at during
development. If I am writing a C compiler I aim to get
        print ("%d",1+2);
to yield "3". What does an XML parser developer aim at?


Sean
Sean Mc Grath

sean@digitome.com
Digitome Electronic Publishing
http://www.digitome.com



