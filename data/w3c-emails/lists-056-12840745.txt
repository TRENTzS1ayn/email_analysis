docno="lists-056-12840745"
received="Thu May 29 12:27:21 1997"
isoreceived="19970529162721"
sent="Thu, 29 May 1997 12:29:48 -0400"
isosent="19970529162948"
name="Eve L. Maler"
email="elm@arbortext.com"
subject="Re: Parameter entity references"
id="3.0.32.19970529122948.009f6200@village.doctools.com"
charset="us-ascii"
inreplyto="Parameter entity references"
expires="-1"


To:w3c-sgml-wg@w3.org

Just one thought to add:

At 09:01 AM 5/29/97 -0700, Deborah A. Lapeyre wrote:
>1)  This is to second the plea that we look very very
>carefully at requirements on this one.  Could someone
>state what we all feel they are? please?
>
>2) Can we also look at this as a cost (and to whom) and
>benefit (and to whom).
>
>Parameter entities in DTDs:
>   - are the mechanism DOCBOOK, TEI, and others
>     have used for extensibility and customizing
>   - are a godsend in DTD maintenance and legibility
>   - make multi-DTD libraries practical
>
>Cost = to parser, browser developers 
>       (small number, but critical constituency)
>       This is a development loss.
>Gain = to DTD writers, maintainers, (larger number, at
>       least this has been true for SGML)
>Cost to Users/Authors = not much. this is a setup problem and
>       setup is not done all that often
>Gain to User/Authors = again definite, but hard to see.  The
>       fine art of customization becomes less an obstacle
>       This is a production system gain.

PEs have a lot of the power needed for managing problems that have come up
under the heading of "the namespace problem."  There are relatively
well-established ways to write DTDs to make it possible to add new DTD
fragments in collections of similar contexts, and depending on the type of
fragment (does it need to allow markup inside it from the "outside" DTD?),
the whole business can be highly regularized and even given a slick
interface.  (Perhaps we should concentrate on these kinds of PEs and dump
some of the others?)

So I believe the gain to users/authors could be quite large, and possibly
even easy to see. :-)

>3) Soapbox: 
>We can finesse this: Yes, it will be necessary (as of this writing) to 
>preprocess an SGML DTD to make an XML DTD anyway, and the PEs could be
>resolved at that point.  But why throw out the good bits?
>Wasn't the XML subset supposed to include the most useful 
>parts of SGML while omitting the marginal, the broken, the overly 
>complex, and the arcane?  PEs in DTDS are one of the few universally
>useful concepts.  Why should it be harder to write and
>maintain a good XML DTD than it is to do the same in SGML?
>End soapbox.  Sorry :-)  --dal

Eve



