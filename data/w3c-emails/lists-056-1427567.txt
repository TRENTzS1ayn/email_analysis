docno="lists-056-1427567"
received="Fri Jun 20 03:23:00 1997"
isoreceived="19970620072300"
sent="Fri, 20 Jun 1997 03:22:55 -0400"
isosent="19970620072255"
name="Paul Prescod"
email="papresco@calum.csclub.uwaterloo.ca"
subject="Re: Parameter entities vs. GI name gro"
id="33AA2FCE.3F42565@calum.csclub.uwaterloo.ca"
charset="us-ascii"
inreplyto="3.0.32.19970619152750.00a5d390&#64;pop.intergate.bc.ca"
expires="-1"


To:w3c-sgml-wg@w3.org

Tim Bray wrote:
> For authoring large complex documents, we already have an excellent
> solution: SGML.  For delivering them on the Web, XML does just fine;
> it will be trivial to generate documents in an SGML system just
> dripping with inclusions and PEs and &-groups and whatnot, and
> pump out the instances, which will be well formed.

Where in that equation do XML DTDs fit in? Why have them at all?

BTW, you *do* lose instance functionality when you lose DTDs. In
particular you lose defaulted attributes and fixed attributes -- two
features I depend upon. It is astonishing to me that we cannot require
people who have written HTML parsers that handle a reasonable percentage
of the crap out there to parse a simple internal subset restricted to
attribute defaulting definitions, and require people who have written
tools that they call "validators" to do CPP-style macro expansion.
Parsing ATTLISTs is not brain surgery for someone smart enough to write
an XML parser and resolving PEs is not hard for someone who can figure
out how to validate a partial grove against a content model.
 
> The fact that this document delivery format is being embraced by
> some unforeseen application groups is a pleasant surprise and not
> one of the things we set out to achieve.  And Berners-Lee was just
> trying to support collaborative Physics research.  And yes, it
> seems to quite a lot of us that we should indeed go to some trouble
> if as a result we get to capture the world's metadata in a relatively
> sane format.

If XML were a relatively sane format, we wouldn't need so many "fixes"
to it, some of which involve stripping out useful features and some of
which involve adding a bunch that relate only peripherally to documents.
"One metalanguage for everything" is one step up the meta-ladder from
"one DTD for everything."

 Paul Prescod



