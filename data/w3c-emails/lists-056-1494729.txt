docno="lists-056-1494729"
received="Fri Jun 20 09:27:28 1997"
isoreceived="19970620132728"
sent="Fri, 20 Jun 1997 15:27:00 +0200"
isosent="19970620132700"
name="Weichel Bernhard (K3/EES4)"
email="Bernhard.Weichel@pcm.bosch.de"
subject="Re: Parameter entities vs. GI name groups"
id="c=DE%a=DBP%p=BOSCH-01%l=SIMAIL-970620132700Z-57167@si11724.si.bosch.de"
charset="us-ascii"
inreplyto="Parameter entities vs. GI name groups"
expires="-1"


To:"'w3c-sgml-wg@w3.org'"<w3c-sgml-wg@w3.org>



>----------
>Von: James Clark[SMTP:jjc@jclark.com]
>Gesendet: Freitag, 20. Juni 1997 14:27
>An: w3c-sgml-wg@w3.org
>Betreff: Re: Parameter entities vs. GI name groups
>
>It doesn't make much sense to me to allow one and not the other.  I think
>the complexity with PEs comes from allowing them inside declarations. 
>Allowing PEs which contain 0 or more complete declarations seems
>unproblematic.

You are right. 

If PEs are dropped, people will write DTDs like this,
which is the friendly version of it :-)

#define EL(name, model) <!element name - - (model) >
#define PCONTENT #pcdata|emph
#define PCONTENT2 sup|sup

#include "inlines.dth"

EL(foo,(sp+, bp+))

EL(sp, (PCONTENT)*)
EL(sp, (PCONTENT | PCONTENT2)*)


The tool to "compile" this into an XML -DTD is simply CPP.

If PEs are there, only a very few people would need to use CPP
if any...

We loose support for other tools like DTD-viewers, DTD-editors etc.

PEs could be restricted to receive entire

   elementdecl [38]
   Name respl element groups
   contentspec [39] elements [40]
   AttDef [47], %AttType, %Default

This would make it much easier to implement in an a parser and
supporting even complex DTDs.

Regards/Mit freundlichen Gruessen
===================================================================
Bernhard Weichel              Phone:  (49) 711 811 8322
Robert Bosch GmbH               Fax:  (49) 711 811 8262
Dept. K3/EES4                 eMail:  bernhard.weichel@pcm.bosch.de
P.O. Box 30 02 40                     
D-70442 Stuttgart
Germany


>



