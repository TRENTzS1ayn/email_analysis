docno="lists-056-1616262"
received="Fri Jun 20 13:27:10 1997"
isoreceived="19970620172710"
sent="Fri, 20 Jun 1997 13:28:46 -0400 (EDT)"
isosent="19970620172846"
name="Arjun Ray"
email="aray@q2.net"
subject="Re: Namespaces, the universe, and everything"
id="Pine.LNX.3.95.970620131353.21493A-100000@q2.net"
charset="US-ASCII"
inreplyto="199706200641.QAA31604&#64;jawa.chilli.net.au"
expires="-1"

To:w3c-sgml-wg@w3.org




On Fri, 20 Jun 1997, Rick Jelliffe wrote:

>  
> > From: Arjun Ray <aray@q2.net>
> 
> > Currently, only status keywords are allowed between the DSOs. I would
> > propose a variant on Henry Thompson's proposal with syntax like this:
> > 
> >    <![ (name-group) [ ... ]]>
>  
> In SGML terms, what you are asking for is, I think, 
> 
> * inline SUBDOCs,

I suppose so, except I was really thinking in terms of the MODULE proposal
and Paul Grosso's example (that MODULE could address at the DTD level):
the point was an inline alternative syntax for DTD-challenged situations.

> * tagged using "formal marked sections".

I like that name:-) Perhaps this can be argued as a natural direction in
which to extend MS syntax. CDATA/RCDATA MSs basically warn the parser that
normal parsing rules don't apply, in particular that what may look like
tags really aren't. OK, so extend that notion to offer some form of
lexical scoping: what look like tags aren't tags for the "current"
validation/parsing context -- refer to some NOTATION declaration instead,
etc. etc. That is, generalize "status keyword specification" to something
like "context treatment specification".
 
> > Name-munging certainly looks like an easy way out. But it smacks too much
> > of forcefitting a solution whose essential appeal derives from a different
> > paradigm (C++?) Sure, the programmers will grok it and love it. But it
> > messes with the content (the need to "resolve" GIs gives them a data
> > quality beyond their markup function) when what we need is just markup. 
> 
> I disagree. Making identifiers meaningful to computers is a good thing.

I think I said what you just said; I must have chosen my words poorly. The
issue, I think, is how to make identifiers meaningful to computers. I'm
still not convinced that delimiter-based compound names in instances is
the way to go.


Arjun



