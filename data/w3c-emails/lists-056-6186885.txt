docno="lists-056-6186885"
received="Mon Mar 24 03:44:43 1997"
isoreceived="19970324084443"
sent="Mon, 24 Mar 1997 08:42:13 +0000"
isosent="19970324084213"
name="Martin Bryan"
email="mtbryan@sgml.u-net.com"
subject="Re: How to put XML on the Web"
id="1.5.4.32.19970324084213.006b3ed4@mail.u-net.com"
charset="us-ascii"
inreplyto="How to put XML on the Web"
expires="-1"


To:w3c-sgml-wg@w3.org

At 20:20 23/3/97 -0800, Tim Bray wrote:

>Plan A: HTML++
>
>We'd like to use XML to "extend HTML"; i.e., as "HTML++".  Let's call this
>Plan A.  It sounds awfully easy... just teach your local web browser to accept
>weird non-HTML tags, load them into the Dynamic HTML data structures so that
>Java or *-script can use them; if a CSS directive is attached, try to put it
>to use.

>Plan B: HTML--, +X
>
>Plan B says, let's allow the use of XML to extend HTML, but drop the
>requirement that browsers deal with all kinds of crufty horrible bad
>practice.

Could I, perhaps, suggest, somewhat sheepishly, plan BA - HTML+- -:)

The problem is that we all want to make as much use of what is already known
by an HTML browser without having to restrict users to HTML. For basic text
elements we will need a way of mapping the text elements in our XML
documents to standard display semantics used for HTML. For example, I could
have:
<para html-equiv=p>I must <hp1 html-equiv=em>emphasise</hp1> ....
(The html-equiv attributes would be added using defaults in the DTD during
creation.)

For things where HTML has behviour associated, such as images and forms,
this is even more important, but here you need some way of renaming
attributes, e.g.
<invoice html-equiv="form" html-atts="action=processor"
processor="http://myco.com/process1">
<logo html-equiv="img" html-atts="src=file ismap=treat-as" file="fig1.gif"
treat-as="ismap"> ...

Where I, personally, would like to see XML positioned is as HTML Extensions
for Electronic Commerce. Why? Because you cannot do electronic commerce with
HTML - it just does not allow you to handle all that information that has to
be moved to and from company databases correctly. XML, on the other hand,
provides a neat way of packaging database fields for transmission over the
web, and has the additional ability of allowing you to embed your fields
into text messages composed of the sort of elements people are used to
finding in HTML files. In other words it can be used to enhance HTML to cope
with fields it cannot begin to deal with today.

The ability of XML files to link with company databases is, I would suggest,
the key to success. The inability to link documents to databases sensibly is
one of the major stumbling blocks in current systems design. Until we can
better integrate our company databases with our document creation processes,
integrated solutions based on compound documents and cooperative workspaces
within virtual companies cannot take-off. One of the strengths of SGML, and
therefore, XML, is the way in which database components can be integrated
into text components, and vice versa using it. Lets make the most of this
benefit. XML = HTML for Electronic Commerce.
----
Martin Bryan, The SGML Centre, Churchdown, Glos. GL3 2PU, UK 
Phone/Fax: +44 1452 714029   WWW home page: http://www.sgml.u-net.com/



