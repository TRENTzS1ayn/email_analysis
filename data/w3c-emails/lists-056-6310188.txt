docno="lists-056-6310188"
received="Mon Mar 24 21:44:49 1997"
isoreceived="19970325024449"
sent="Mon, 24 Mar 97 21:44:51 EST"
isosent="19970325024451"
name="lee@sq.com"
email="lee@sq.com"
subject="Re: ERB call on addressing"
id="9703250244.AA09165@sqrex.sq.com"
inreplyto="ERB call on addressing"
expires="-1"


To:U35395@UICVM.UIC.EDU,w3c-sgml-wg@w3.org

> Can you (or anyone) give a clear explanation of when and where the
> semicolon can be used?

The ; can be used anywhere.  Originally the idea was that any URL
could have appended any number of MIME parameters, in the form
    ;name=value
but this was not widely implemented.

Later, it became clear that & could not be used in HTML, because it
introduced an entity reference.  Although &amp; can be use, the general
feeling of the (then defunct!) HTML WG and others concerned was that ;
could reasonably be used instead.

Hence, ; is now used where & used to be used.

> I have read RFC 1738 without becoming clear on
> the interrelations of semicolon, question mark, and hash mark.

It has to be read in conjunction with the RFCs for HTML (1866 and later
2070), HTTP and also the partial URL RFC.

> The ERB originally wanted to have something to separate the URL proper
> from the extended-pointer syntax, which did NOT specify explicitly
> whether it was the client or the server which should actually do the
> query.  Would semicolon fit that bill?
No.  ; is always passed to the server.

You are trying to introduce new semantics here.
I think it's still because of confusion over the idea of being
served just a fragment of a document -- which can use a regular HTTP
query with & or ; -- and fetching an entire chunk and _then_ doing
a search (e.g. fr an ID with #id or following a TEI pointer).

The two syntaxes obviously need to differ.

Frankly, the server-side fragmenting has nothing to do with XML --
people are doing it today with HTML, SGML and even PDF, using normal
existing URLs.  Sometimes (as per Jon's examples) there are no obvious
query parameters at all.

Hence you only have to worry about client-side queries, and # is fine
for that.

Drop the ?/&/; thing and you'll be fine.  Simply allow them without
saying what they mean.

Lee



