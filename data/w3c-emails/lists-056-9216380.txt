docno="lists-056-9216380"
received="Fri May 16 15:48:21 1997"
isoreceived="19970516194821"
sent="Fri, 16 May 1997 12:43:17 -0700"
isosent="19970516194317"
name="Matthew Fuchs"
email="matt@wdi.disney.com"
subject="Re: SD3 - Data Types"
id="9705161243.ZM18370@scrumpox.rd.wdi.disney.com"
charset="us-ascii"
inreplyto="dmh&#64;hpsgml.fc.hp.com"
expires="-1"


To: Dave Hollander<dmh@hpsgml.fc.hp.com>,w3c-sgml-wg@w3.org

On May 16,  1:01pm, Dave Hollander wrote:
> Subject: Re: SD3 - Data Types
>
> > Matthew Fuchs
> > ...
> > Without questioning the importance of this issue, it strikes me as
> > much more an application issue than an XML one.
>
> I don't understand this. Why would adding more datatypes to the
> ones currently in SGML not be an XML issue? Are you saying that
> the added types should not be standardized or that it is not up
> to a metalanguage to provide syntax for conveying structural
> conventions?
>

The question is not if it's important (which it is, and therefore worth
discussing), but how to support it.  Should these datatypes be part of the base
language, so that all XML processors need to know how to handle them and it
goes in the language definition; or does XML provide other facilities so that
applications know when they're getting one of these new types, in which case it
goes in an ancillary document.

If the first case is followed, then I think the DTD syntax should be changed to
include them - otherwise we need extra information in the document to warn the
processor.  We have two mechanisms for this - attributes and PIs.  I don't
think it's a good idea for processors to start reading attributes, and PIs are
obviously a controversial feature.  In either case, we're going to start
polluting the namespace with what are effectively new keywords.

In the second case, we leave the processor and the language alone, and provide
a standard means for expressing new types using the existing language, with the
SQL set as particularly pertinent examples.  There will probably be many
ministandards along these lines, kind of like architectures.

I'm sorry if I gave the impression I didn't think this was relevant.

> I think that there is a lot of value in providing additional
> distinctions for data. I also think that the SQL basis for the
> proposal has had enough industry exposure to make it viable
> as a basis for standardization.
>
> I would like to consider how to identify other type classes.
> Perhaps we should also provide facilities for the object domain:
> how to identify the validation method for this object.
>

As I said, we should think of how to express these additional facilities using
XML.  To draw an analogy with C/C++, these belong in the standard library, not
the language spec.

Matthew Fuchs
matt@wdi.disney.com

-- 



