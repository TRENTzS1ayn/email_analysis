docno="lists-059-10411828"
received="Sat Apr 28 22:44:15 2001"
isoreceived="20010429024415"
sent="Sat, 28 Apr 2001 22:43:19 -0400 (EDT)"
isosent="20010429024319"
name="Charles McCathieNevile"
email="charles@w3.org"
subject="RE: &quot;at a Minimum&quot; (resend)"
id="Pine.LNX.4.30.0104282232130.26702-100000@tux.w3.org"
charset="US-ASCII"
inreplyto="B7E0BEA478EBC24EBB2CF19F710760230170F0E1&#64;red-msg-06.redmond.corp.microsoft.com"
expires="-1"

To: Heather Swayne<hswayne@MICROSOFT.com>
cc:"gregory j. rosmaita"<oedipus@hicom.net>,<w3c-wai-au@w3.org>


This example is a case where I have an action item to try and clarify the
status of this "minimum requirement" precisely becuase it has the problems
Heather points out.

In cases where there are several possible ways to express a minimum
requirement we need  to be clear about it. The goal of the "at minimum" piece
is for developers to know what is the bar they need to reach to ensure they
have met the checkpooint requirements. Clearly, this group is the body who is
responsible for clarifying that as far as possible, in the specification, and
this is an improvement I expect for ATAG 2.

To the specifics. I propose the following replacement text for the at a
minimum section:

The minimum requirement is that the author can work with all elements and
element properties of the language that can enhance accessibility. One common
way to minimally satisfy this is by allowing editing of document source (but
see guideline 5)

cheers

Charles

On Fri, 27 Apr 2001, Heather Swayne wrote:

  Quote
  Minimal requirements don't dictate the implementation details of the
  required functionality -- they merely define what base functionality
  MUST be available to the user...
  endQuote

  One of my personal issues with the wording "at a minimum" is that it
  lends itself to easily to giving implementation details.

  As an example the new ATAG
  1.1 Ensure that the author can produce accessible content in the markup
  language(s) or content type(s) supported by the tool. [Priority 1]
  At minimum, provide a code editing view that will accept manually-coded
  accessibility content and ensure that this content is preserved as per
  Checkpoint 1.2.

  What if a company wanted to product a product that hide the fact that it
  was producing HTML under the covers, but provided all accessible content
  through the UI in some method - ByDesign they wouldn't meet the minimum
  but they still produced accessible content.



