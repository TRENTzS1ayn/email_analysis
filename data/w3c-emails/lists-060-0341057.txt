docno="lists-060-0341057"
received="Tue Jan  8 12:31:24 2002"
isoreceived="20020108173124"
sent="Tue, 08 Jan 2002 11:54:02 -0500"
isosent="20020108165402"
name="Jan Richards"
email="jan.richards@utoronto.ca"
subject="Functionality Categories"
id="3C3B242A.DA701CF9@utoronto.ca"
charset="us-ascii"
expires="-1"


To:"w3c-wai-au@w3.org"<w3c-wai-au@w3.org>

In yesterday's conference call it was decided to define the technique
categories as tool functionality types rather than tool types. The
following includes this change as well as proposed re-wordings of the
category descriptions. Pay special attention to my attempt to split
Multimedia editors from markup editors according to the human
readability of the formats they produce. Does this work? I would welcome
more examples for the different categories.


Categories of Authoring Tool Functionality

The Authoring Tools Accessibility Guidelines (ATAG) have been formulated
to apply across a diverse range of software products that produce Web
content. To accomplish this, the guidelines and checkpoints have been
stated fairly generally. To offset this generality, the implementation
techniques (in this document) have been formulated to be more specific,
at the cost of reducing the applicability of individual techniques to
all authoring tools.

In order to simplify the task of determining which techniques are
applicable to a particular authoring tool, five categories of authoring
functionality have been defined. It is important to note that the
categories refer to authoring functionality rather than complete
authoring tools. This allows different aspects of a given tool to fall
within different functionality categories. For example, an HTML
authoring tool may feature a WYSIWYG markup editor (Category 1: Markup
editing functionality), a javascript editor (Category 4: Programming
functionality), and the ability to import word-processed documents
(Category 5: Conversion functionality).

Each category has an associated icon that will label those techniques
that are likely to apply to products that include functionality in that
category. Keep in mind, however, that the categories are intended as a
guide, rather than a last word in compliance. Some techniques that are
flagged by a category icon might not be relevant to a tool with
functionality in that category, while other unflagged techniques, may in
fact be relevant. To avoid missing relevant techniques, it is
recommended that developers take the time to, at least briefly, consider
all the techniques in this document.


Category 1: Markup Editing Functionality

These are tool functions that authors use to specify content and its
presentation. These include:

- Direct (text-based.) and indirect (WYSIWYG, object-based, etc.)
editing of documents in markup formats (i.e. HTML, XHTML, etc.). This
includes indirect editing by word processors that are capable of saving
as markup formats (i.e. HTML, XHTML, etc.).

- Direct and indirect editing of multimedia (images, animation, sound,
video, haptics) content in human-readable formats (i.e. SVG, SMIL,
etc.).


Category 2: Multimedia Creation Functionality

These are tool functions that authors use to create Web content in
non-human-readable multimedia formats. These include

- Indirect editing of multimedia (images, animation, sound, video,
haptics) content in non-human-readable formats (i.e. JPEG, PNG,
Quicktime, Flash, etc.).


Category 3: Content Management Functionality

These are tool functions that create and organize Web content on the
basis of high-level author input. These include:

- Database driven Web applications that prompt the author for
information that is then displayed in a generic (or semi-generic) manner
(i.e. courseware). Note that any direct or indirect authoring of the
final markup (i.e. editing presentation templates) is considered to be
markup editing functionality (see category 1).


Category 4: Programming Functionality

These are tool functions that authors use to create Web application
code. These include:

- Direct or indirect editing of program code (i.e. Java applets, Flash
action script, server and client-side scripts, etc.).
- Direct or indirect editing of markup languages grammars (i.e. XML
languages).
- Direct and indirect editing of style sheets (i.e. CSS).


Category 5: Conversion Functionality

These are tool functions that convert content in one format into another
format. These include:

- Converting word processor-formatted content into a markup format as it
is imported into an editor. Note that any direct or indirect authoring
of the converted markup, image, etc. is considered to be markup editing
functionality (see category 1).
- Saving multimedia content in other formats (i.e. bitmap saved as a
jpeg, etc.).



 
Cheers,
Jan

/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

Jan Richards
UI Design Specialist
Adaptive Technology Resource Centre (ATRC)
University of Toronto

jan.richards@utoronto.ca
Phone: (416) 946-7060
Fax: (416) 971-2896

/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\



