docno="lists-063-2569998"
received="Sun Oct 25 20:34:40 1998"
isoreceived="19981026013440"
sent="Sun, 25 Oct 1998 20:29:36 -0500 (EST)"
isosent="19981026012936"
name="Al Gilman"
email="asgilman@access.digex.net"
subject="Re: Study project: ALTifier or text&ndash;equiv &ndash;&ndash; Please choose!"
id="199810260129.UAA21196@access5.digex.net"
charset="US-ASCII"
inreplyto="3.0.32.19981021110027.0073ff84&#64;pop3.concentric.net"
expires="-1"


To:kasday@acm.org(Leonard R. Kasday)
Cc:w3c-wai-er-ig@w3.org

to follow up on what Leonard R. Kasday said:

> LRK::
> Here's my personal opinion: Right now, there are so many pages on the web
> that need ALT text, and so little chance that they will be fixed soon (or
> maybe ever, although I hope that education will help that), that I agree on
> the priority of the text equiv filter.
> 
> We will still need to figure out priority of the various techniques, e.g as
> listed  in
> 
> http://www.w3.org/WAI/ER/text-equiv
> 
> unless, of course, Michael plans to do them all <grin>.
> 
> Do other folks agree with priority of the text equiv?  And if so, how shall
> we prioritize the various text equiv techniques?


1.  I have to admit I don't understand the original question.  It
seems to me that whether the text is put in place of the image,
or is put in a ALT attribute so the browser can put it in place
of the image, the work is in scavenging the rest of the site and
web to get plausible text, not in sewing it back into the
offending page.  Look at the Text-Only Maker tool at NCSA.  It
has a simple option to generate a text-only page or retrofit the
text into a graphical page as ALT attributes.  The text required
is the same.  Automating nominations for that text is the hard
part of the job.  In fact, Daniel is right that we shold have
enough design up front so that the module can be re-used in
different contexts.

2. On the question of prioritizing the techniques: I would like
this to be done on as empirical a basis as we can muster.  My
pipe dream for this would be something like the following.
First, one generates a sample by using a random-URL service.
Then use screening to get sites with a good range of
representative problems.  Then take these pages and manually
apply the techniques to the problems, or use a single-function
prototype.  See which techniques fix the most of the actual pages
out there.  Of course, it would be best to have prototype modules
and be able to run a script and generate significant samples of
what the technique generated before deciding if it is working.

Mostly I am more interested in getting to the point where we can
try as many techniques as possible and not try to prioritize them
by popularity poll.

Al

> 
> Len
> 
> -------
> Leonard R. Kasday
> Institute on Disabilities/UAP at Temple University, Philadelphia PA
> email:     kasday@acm.org
> telephone: (215} 204 2247
> 



