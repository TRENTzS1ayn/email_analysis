docno="lists-063-3873794"
received="Wed Dec  1 13:23:36 1999"
isoreceived="19991201182336"
sent="Wed, 01 Dec 1999 13:30:43 -0600"
isosent="19991201193043"
name="Al Gilman"
email="asgilman@iamdigex.net"
subject="Re: techniques for tables (clarifying how to handle nested   tables   for the ER group)"
id="Version.32.19991201125306.01186a70@pop.iamdigex.net"
charset="us-ascii"
inreplyto="4.2.0.58.19991129100545.009c13f0&#64;localhost"
expires="-1"


To:w3c-wai-er-ig@w3.org

[Distribution note:  I am sending this separately to ER-IG, GL, UA, PF, and
CG lists because it touches all their turf.  That is too many to
cross-post.  Consult your chairs for how we coordinate follow-up.]

At 10:23 AM 11/29/99 -0500, Wendy A Chisholm wrote:
>hello,
>
>in the Evaluation and Repair Tools working group we have been discussing 
>how to evaluate and repair tables.  Particularly, nested tables.
>
>if nested tables are used to present data, is there a way to associate the 
>cells in the inner table with header cells in the outer table?  I would 
>assume that axis and headers could work  across tables (if a UA was built 
>that way).  However, in HTML 4.0 the only values for "scope" are row, col, 
>rowgroup, and colgroup.  so, it seems that "scope" could *not* be an inner 
>table.
>
>Nested tables seem less of a problem for layout tables. I propose that the 
>evaluation and repair is to handle each table separately, like Mark Novak's 
>HelpDB tool.
>
>--wendy
><>
Cool!  This raises all kinds of dust.

First, we need to distinguish the authoring scenario from the repair
scenario where one can't take guesses back to the author for confirmation.

Second, it seems to me that the ER community, that is to say people
actually implementing authoring tools and accessibility-aiding gateways
(communicating among themselves via the ER groups) should take the lead in
refining guessing algorithms.  This should be done based on what pages on
the web are actually like, and what form of prompting authors actually
respond well to.  So: for guessing algorithms, ER should lead and UA WC
etc. should follow.

Now for some details:  

In the authoring case, where guesses are used to propose interpretations
for the author to confirm, it should be clear that the end result is
explicit header-linkage markup using headers, scope, and axis attributes
until there is not room left for the user agent to have to guess at
anything.  The header associations should be presented to the author in a
prompt something like what Len is talking about coding.

The optimization criterion in the authoring scenario is least author effort
to get to an agreed definiton of what headers go with what data.  If you
don't guess at all, the author has to work too much.  If you guess lots of
wrong stuff, the author has to work too much.  The happy medium takes
testing with authors and in fact is probably good that this should be
policies that are trainable or settable by the author so that they can be
bent to the author's interpretation of how to use tables.

In the pure repair case, the guessing rules are popssibly different from
the rules used if one can ask the author to confirm.  The problem is how to
put the user in control of how much guessing gets applied to what table.

Warning:  There is a big issue here where I have been asleep at the switch.
 This is that RDF is indeed already a W3C recommendation, so the use of RDF
as the medium for annotations which are:

a) advisory in nature, because they are 
b) from a third-party source and not the document author


is technically superior and hence support for some such encoding should be
on our list of things we want UAs to implement and future content
guidelines to explain.

Small GL issue:  Do we have examples of how to use header-threading markup
together with nested sub-tables?  How to interpret the markup?  I guess
that the latter is UA stuff.  But they should agree.  Authoring tools
should produce explicit header threaded markup without reliance on guessing
algorithms.  User agents should at minimum interpret the explicit header
threading markup and for extra credit should implement guessing algorithms.
 The question is the status of implementing RDF which may contain
third-party advisory interpretation of the usage.

Larger GL issue:  Deciding between RDF annotations vs. using the
change-tracking markup available in HTML to indicate what markup is changes
introduced by guessing in the gateway, vs. other options which people may
think of.

Large UA issue:  What support for RDF do we ask for?

Al



