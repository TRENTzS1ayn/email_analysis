docno="lists-064-11757805"
received="Fri May 11 18:38:22 2001"
isoreceived="20010511223822"
sent="Fri, 11 May 2001 23:38:58 +0100"
isosent="20010511223858"
name="Sean B. Palmer"
email="sean@mysterylights.com"
subject="Re: Agenda for 14 May 2001 ERT WG meeting"
id="005401c0da6b$2e01ce40$04ac89d4@z5n9x1"
charset="iso-8859-1"
inreplyto="4.2.0.58.20010511172544.00cb3a90&#64;localhost"
expires="-1"


To:<w3c-wai-er-ig@w3.org>,"Wendy A Chisholm"<wendy@w3.org>

> 5. Errata for EARL.  Sean, do you want to discuss the
> issues you've raised or were you just documenting them
> (as you said near the end of your message)? [...]

Well, I found quite a few more, and am currently working on a 0.95
version of the schema. Many of them are actually just improvements to
the language, rather than actual errors. Summary (thus far):-

1) Domain and range semantics too strict for some properties, use DAML
restrictions instead.
2) Trying to work on the contexts vs. refiication stuff. Need to
declare more stuff as being a sub class of rdf Statement, but in N3 we
use n3:Statement, so I'm not 100% certain on the situation. Minor
point.
3) Much work done on Unique and Non Unique Test Subjects. Some mess
created, but much progress.
4) Agreed (as has Aaron) that p/o in earl:Assertion could and most
probably should be swapped around.
5) Found that DAML provides much flexibility and semantics that the
schema requires, and yet aren't present in RDF Schema. I'm making more
use of DAML, such as oneOf to provide easy ennumerations. Means we use
less prose, and more machine processable semantics, but hangs by a
thread.
6) Might need mappings from 0.9 => 0.95.
7) Not sure about dc:date in EARL - could but a DAML restriction on
it, because I think we should look carefully into the actual object of
dc:date... what datatype? Messy, as far as namespaces for datatypes
are concerned :-)
8) Now uses a novel way to define evaluations and assertions - as an
intersection of some restrictions on the reification properties (plus
it sounds good as well). Interesting way of going about it, but needs
checking over. Here's a snippet:-

   earl:Evaluation rdfs:subClassOf
       [ daml:intersectionOf
             ([ daml:onProperty rdf:subject;
                 daml:toClass earl:Assertor ]
              [ daml:onProperty rdf:predicate;
                 daml:toClass earl:AssertsProperty ]
              [ daml:onProperty rdf:object;
                daml:toClass earl:Assertion ]) ] .

There's probably some more errata and points that I've missed as well.

I'd like to discuss some of the issues - especially as EARL is
(hopefully) moving away from the theoretical and towards the
practical. I've been thinking about actual situations, and they seem
to work well because the RDF model is so clean - and repurposable.

One additional point is, "how can we point to the XML version of a BNF
parse tree [1] using a URI?". It's not too much of a problem at this
stage, but it will become so when we want to start pointing at very
specific bits of code...

For example, we could do something like:-

   :x :content <http://mycss.org/css.css>;
      a earl:XMLBNFThingy;
      :xpointer "(rule[8])" .

But that probably rates as a "9/10" on the hack scale. Still, I'm
really impressed by the potential that EARL carries with it; word is
slowly spreading...

[1] http://lists.w3.org/Archives/Public/w3c-wai-er-ig/2000Dec/0043

--
Kindest Regards,
Sean B. Palmer
@prefix : <http://webns.net/roughterms/> .
:Sean :hasHomepage <http://purl.org/net/sbp/> .



