docno="lists-064-12683335"
received="Wed May 30 14:59:12 2001"
isoreceived="20010530185912"
sent="Wed, 30 May 2001 15:04:35 -0400"
isosent="20010530190435"
name="Wendy A Chisholm"
email="wendy@w3.org"
subject="Re: Selling the product"
id="4.2.0.58.20010530140903.00aea160@localhost"
charset="us-ascii"
inreplyto="018901c0e926$eea391a0$d2d993c3&#64;z5n9x1"
expires="-1"


To:"Sean B. Palmer"<sean@mysterylights.com>,<w3c-wai-er-ig@w3.org>
Cc:dimitris.dimitriadis@improve.se

hello all,

(Dimitris, I'm including you 1/2 way through the thread.  It begins at 
[1].  We're trying to understand the DOM perspective re: 
EARL/metadata/XML.  here's my response to Sean Palmer's latest post in the 
thread)

>RDF itself isn't difficult at all to "learn", it's just that there is
>a startling lack of tutorials, and a huge amount of assumed best
>practices which are only encoded in streams of list archives.

which makes it time consuming to learn.  many people don't have time or 
patience.

>Ooh, time for a bit of RDF cheerleading.

rah! rah! siss boom bah! <grin/>

>Why RDF and not XML? Why reinvent the wheel? With RDF, there is a
>single standard data model (triples), fully decentralized, and with
>numerous implementations, APIs and parsers. If you invent your own
>language in pure XML, you are in essence also developing a data model.
>There are numerous problems with this:-
>
>1) You are slowed down because you have to work out a data model -
>just use RDFs (although you do have to learn it, but surely learning
>is easier than creating).

Depends on the person, no?  If someone has invented several XML languages, 
then they could  more easily do that than learn something new.  Also, many 
people will continue using familiar tools rather than spending time 
learning the benefits of new tools.  There are trade-offs and not all 
people will choose the same path.  Some people just want to get things done 
and will use whatever tools are closest and that they know will work.

Our job is to help with the transition since we believe we have a better 
tool.  Basic marketing I suppose.  but how many people do you know who 
still use an older version of a browser because they know it works or don't 
see the need to take the time to download the latest and greatest or 
perhaps use it for testing purposes or some other reason - perhaps it works 
better with other tools that they have?  and they will continue to use it 
even though they know there are new features in the latest version but they 
might not see the need for those new features when they are comfortable 
with what they have.

>2) Other people then have to learn your data model, and build tools to
>process it. Again: why reinvent the wheel?
>3) Interoperability with other languages is then next to impossible.
>With RDF based languages, it is still difficult, but at least
>possible.

Isn't that the point of XML and namespaces, tho?  e.g. embedding SVG into 
XHTML?

>There are many more hints in TimBL's missive:-
>
>    http://www.w3.org/DesignIssues/RDF-XML
>
>the best bit is:-
>
>[[[
>The expression you need for querying something in terms of the XML
>tree is necessarily more complicated than the expression you need for
>querying something in terms of the RDF tree.
>]]]

I don't know RDF well enough to fully appreciate the beauty of this 
statement, but I do know XSLT and SQL so I am trying to think of this in 
those terms.

Looking at Tim's paper again, he is primarily discussing machine-readable 
info, right?  At this point, I'm assuming people are still the primary 
readers of the content in some of the applications we're talking 
about.  For example, in the DOM group, they know the schema, so that's not 
a "big if" for them.  It is difficult to see past that.  also, they have 
tools that help them write using their DTD (XED, for example).  Are there 
the same types of tools for RDF?  Where you can easily plug in a schema and 
author?  I was amazed how easy it is to use a new DTD with XED.

Therefore, perhaps this gets back to tools, and I again apologize for still 
getting up to speed on this stuff myself.

The point I'm trying to make is that when someone is working closely with 
the semantics and they know how to express them comfortably in XML, then 
convincing them to learn a new language and think about things in a 
different way can be a difficult task and it seems that that might be the 
task at hand.

I am only trying to look at this from another perspective.  I do see the 
need for EARL to be machine-readable (and thus in RDF) and think that it 
would benefit the DOM test suites as well, but to give them a strong 
argument I am trying to see things from their perspective...some of this is 
conjecture, thus I CC'ed Dimitris on my reply.

Daniel raised an interesting question in his post:
What about integrating EARL into an existing framework.

This seems to be what Curt and Dimitris had discussed [2], [3]. Curt 
describes three phases in which it might be possible to use EARL.  He 
proposes keeping the current schema but adding a metadata element that can 
contain RDF info. His example uses Dublin Core info about an author - who 
created a test.

It seems easy to then say, "who says that I pass the test" ala EARL.

However, Dimitris proposes leaving the metadata element optional since 
developers will already have had to learn the NIST DTD and they don't want 
to further burden them.

<wendy goes off to think some more..../>

--w

[1] http://lists.w3.org/Archives/Public/w3c-wai-er-ig/2001May/0101.html
[2] http://lists.w3.org/Archives/Public/www-dom-ts/2001May/0067.html
[3] http://lists.w3.org/Archives/Public/www-dom-ts/2001May/0103.html

--
wendy a chisholm
world wide web consortium
web accessibility initiative
seattle, wa usa
tel: +1 206.706.5263
/--



