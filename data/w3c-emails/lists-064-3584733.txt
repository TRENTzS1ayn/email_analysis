docno="lists-064-3584733"
received="Tue Nov 28 07:37:40 2000"
isoreceived="20001128123740"
sent="Tue, 28 Nov 2000 12:37:47 -0000"
isosent="20001128123747"
name="Sean B. Palmer"
email="sean@mysterylights.com"
subject="Accessibility Description Language - Overview"
id="003201c05938$0dadaba0$69ec93c3@z5n9x1"
charset="iso-8859-1"
expires="-1"


To:<w3c-wai-er-ig@w3.org>
Cc:"Leonard R. Kasday"<kasday@acm.org>,"Wendy A Chisholm"<wendy@w3.org>

Accessibility Description Language (ADL)
A Summary of the Points Raised so far.

This is also available at http://www.mysterylights.com/xhtml/adl/, but has
points that will probably want to be discussed on the list...I shall make
all updates to that file (and try to keep it up to date).

Abstract: This is an "IMHO/FYI" overview of the points raised, in depth. I
hope that it will prove a very useful foundation document, but it really a
double edged sword in that I intend it to be used for both reference and
discussion.

1 Introduction
1.1 What Is ADL?
Accessibility Description Language is a description format for making
assertions about the accessibility of different formats. It could also be
extended to be processed to the extent where it actually parses and repairs
the aforementioned files. Also, an element of logic could be applied to the
system, increasing it's potential power enormously. Although it covers a
wide scope of technologies, this is useful because it makes ADL holistic in
the sense that it should enable us to make assertions any repairs about any
aspect of accessibility.
1.2 What formats would it describe?
Uncertain. Len pointed out the following: XML, XHTML, CSS, ECMAScript, HTML,
Invalid HTML, etc. Some consensus within the ERT group was reached that any
UI medium should be able to have accessibility assertions made about it. ADL
will have great benefits in describing and repairing accessibility problems
in valid XML, but is *should not* be limited to that alone.

2 Aims
2.1 The abstract aim.
In general we want to create a metadata description language that can
describe the accessibility of languages, and also point into these languages
specifically if possible. (N.B. It may only be possible to do that in
valid/cleaned up XHTML and XML applications). Not only that, but we also
want it to be a widely used, recognisable and interoperable format for
people to use. In other words it has to be easy to generate, and easy to
use. People should be able to make accessibility assertions about their
documents, and accessibility tools authors should be able to utilise ADL for
pointing out accessibility errors and repairing them.
2.2 The process aim.
WC asked what kind of process we are looking at for ADL. It seems that there
are three options. 1. Just an unofficial note published by the ERT group.
This would mean we can update it whenever we want, and we don't have to go
through W3C process, but it may make the language less acceptable, and
possibly even inadequate if not looked at carefully. 2. A W3C Note. Has the
advantage of finality, and also of sub-endorsement by the W3C. The
disadvantage is that a note is just that: only a note. 3. A W3C
Recommendation. The disadvantages are the length of process we'd need to go
through, but there are huge benefits: endorsement by the W3C, full
development including implementation to get through CR, a published
versioning system, and publicity: people will know about it when it goes to
recommendation.

3. Format
3.1 What format will ADL take on?
This is the hottest topic. There seem to be many advantages in using
XML/RDF, not least of which is the tool support and the W3C backing. It may
not be viable to extend it to assert accessibility claims for all types of
documents, but it should cover most. In my *opinion*, the current likelihood
looks like:-
RDF - 50%
XML - 30%
Other - 20%
The fear in using RDF is that we don't have control over the actual
framework, but that is also the major benefit: the framework already exists.
The question of what tools RDF offers is the main one.
3.2 Implementation
What implementations will ADL take on? It could be used for asserting things
in documents, specifically pointing at them, applying logic to them, and
ultimately repairing them. One great example that was brought up was
ensuring that XML Schemas have the required accessibility features in them.

4 The Next Step
4.1 What is the next step?
We have to decide on what the process aims are of ADL, so that we can get
started if need be. Also, from the recent teleconference:-
SP: May attend by phone. What is needed by me?
WC: Example of what RDF buys us.
LK: Please put URIs on mailing list. Should we brainstorm ideas on what ADF
will be like? [I presume that means ADL]
WC: Useful and instructive.
LK: Future discussion on list.
WC: Ask people to provide test pages.
LK: Break into 2 or 3 groups and compare results.
Therefore it seems that we need to address what advantages RDF will buy us,
and provide testable examples of sites for ADL to apply to.

I would also like to comment on how open-minded and productive this group
actually is. Is ADL had been suggested anywhere else, it would have been
doomed to failure due to it's complexity: it encompasses XML, RDF, XHTML,
WCAG, CSS, and so on, and that is a lot of technologies for people to have
backgrounds in. In a way we need to be experts in every single field, so
that we can provide an ADL language that actually asserts how accessible
each
of these formats are in the best possible manner. A good example of how
open-minded this group is comes from discussion in the Telecons. For
example, Daniel said that XHTML should be written in XML Schemas, and that
everything we do should be based on Schemas. Coming form the XHTML world
that is quite astounding, and I had to remind everyone that for now XHTML is
a document format, and that we need to recognise the legacy aspects of it.
The fact of the matter is, if we did let politics get in the way, and we
didn't look as far into the future as possible, we couldn't follow the aims
of ERT! For example, if I suggest that we need to use Namespaces for RDF
Schema validation purposes, most people would agree, but some would ask
"why?". If I then pointed out that 1. It is a useful practise, and 2. It is
endorsed by TimBL and the RDF community, then you would say fine, use
namespaces for validating Schemas. Now, try posting the phrase "use
namespaces for Schema validation" onto any XML list and prepare for some
serious argumentative discussion...
It seems that this list appreciates the finer points of cutting edge
technology, and that is an incredible achievement. Because of that, ADL will
be a cohesive, interoperable, and approachable language: it's going to work!

IMHO etc.

P.S. BTW: There is already an "ADL" out there somewhere, so maybe is is a
taken abbreviation. I'll try to find out what it is again, but try typing
"ADL" into Google.

Kindest Regards,
Sean B. Palmer
http://xhtml.waptechinfo.com/swr/
http://www.w3.org/WAI/ER/
http://www.w3.org/WAI/GL/
"Perhaps, but let's not get bogged down in semantics."
   - Homer J. Simpson, BABF07.



