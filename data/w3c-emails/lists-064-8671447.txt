docno="lists-064-8671447"
received="Wed Feb 14 20:31:23 2001"
isoreceived="20010215013123"
sent="Thu, 15 Feb 2001 01:31:43 -0000"
isosent="20010215013143"
name="Sean B. Palmer"
email="sean@mysterylights.com"
subject="EARL Vocabulary (Retrospecticus)"
id="017d01c096ef$4537aa40$bf6c073e@z5n9x1"
charset="iso-8859-1"
inreplyto="00c101c0912e$88727720$c7d893c3&#64;z5n9x1"
expires="-1"


To:<w3c-wai-er-ig@w3.org>
Cc:"Leonard R. Kasday"<kasday@acm.org>

[Long, but useful... another vocabulary update]

> Here is an update on the vocabulary [...]

O.K., in retrospect, some properties and classes look like they will
provide more use than others. I'll go through what we have, and provide
proper prose descriptions rather than that N3 rubbish. (with a summary at
the end):-

> earl:asserts (rdf:property)

This is a very useful property, but let's take the ambiguity out.
earl:asserts is like "says" in normal language. Something asserts something
else. c.f. the N3 context brackets "{}" which Len pointed out was correct
to use as the object of an assertion.

> earl:confidence a rdf:property;

This is interesting... can we assume that for all assertions made so far,
the earl:confidence is set to "100%"? Are there any examples where you can
"half trust a tool" or "trust what someone says to 20%?". I doubt that
there are any examples with such a fine granularity: usually, you either
trust something or you don't. One vote for deprecation then. :-)

> earl:conforms a rdf:property;

This is vehemently useful. "x conformsTo y"... oh that's a good point,
there was some piece of advice I saw somewhere (from TimBL I think) about
making predicate names active verbs, so that instead of "author" you have
"writtenBy" and so on. conformsTo might be a good example of this.

Oh, I found the reference... it was by TimBL in the N3 specification [1] of
all things:-

     These assume that the english words people pick as properties
     are noun clauses. I actually perfer the use of verb clauses for
     what is in fact a verb. I prefer "wrttenBy" to "author".

Hey, I even remembered the example!

> earl:testobject a rdf:property;

hmmmm..... a lot of the time we just use the subject as the test object,
and presume that it is a testobject. IS this one of those things that is
represented by RDF, i.e. earl:testObject = rdf:subject .?

> earl:langtype a rdf:property;

That reminds me, could we use xlink:role and xlink:arcrole in anything that
we're doing?

> earl:mode a rdf:property;
> earl:result a rdf:property;

These have been suspiciously underused.

> earl:comment (rdf:property) [...]
>   daml:equivalentTo <http://www.w3.org/2000/08/comment#> .

This is also useful, and has been put to good use in list examples so far.
A comment is a bit of prose that can't otherwise be represented in RDF.
Would you want to represent an essay about the accessibility of a website
in triples? It is completely disjoin from an assertion, although you could
say :sean earl:asserts [ earl:comment "My comment" ] . This is also one of
Len's "proposed properties to evaluate various means of representing
information in an alternative form".

> # Classes (for modularity)
> earl:Level a rdf:property;
> earl:ValidityObject a rdf:property;

These are prety well defined classes, but we need more to encourage
modularization. Hey, no one has commented on modularization yet...  now, do
I take that as confusion, or consensus? :-)

In summary then, I believe that these properties and classes should be
thought of as the current earl core, based on discussions on the list since
the last publishing of a vocabulary [note that by "module" I mean an EARL
Schema with a certain function]:-

     [Core Syntax Module]
     earl:asserts
     earl:conformsTo
     earl:langtype

Yes, there are only three properties. But we must also include now Len's
"alternative representations" property list, which could be a core module
outside of the syntax module (if you catch my drift):-

     [Core AR Module]
     earl:comment
     earl:exists
     earl:shouldExist
     earl:quality
     earl:suggestedReplacement

Next, we have the classes. I can't think of anymore, but we really need
quite a few so that people can make ontological extensions (as per some of
the examples I gave in the last vocabulary discussion [2]):-

     [Core Classes Module]
     earl:Level
     earl:ValidityObject

For those still seeking an explanation of classes and modularization: a
class is like something that you can say "x is a y", where y is a class. So
a "dog" is a type of "animal", and an "animal" is a class in this example.
Therfore, if you are making your own EARL based langauge, it is useful to
say that this is a type of EARL something, where that EARL something is a
class. The more classes we have, the more new properties (and perhaps even
subClasses) people can define.

That's it. If you got to here without falling asleep or skipping anything,
give yourself a pat on the back.

[1] http://www.w3.org/DesignIssues/Notation3
[2] http://lists.w3.org/Archives/Public/w3c-wai-er-ig/2001Feb/0060.html

--
Kindest Regards,
Sean B. Palmer
@prefix : <http://webns.net/roughterms/> .
[ :name "Sean B. Palmer" ] :hasHomepage <http://infomesh.net/sbp/> .



