docno="lists-065-0190101"
received="Tue Jun 18 06:23:59 2002"
isoreceived="20020618102359"
sent="Tue, 18 Jun 2002 12:24:42 +0200"
isosent="20020618102442"
name="Nadia Heninger"
email="nadia@barbwired.com"
subject="Re: Devising a schema for accessibility testing"
id="3.0.32.20020618122440.01131618@barbwired.com"
charset="us-ascii"
inreplyto="Devising a schema for accessibility testing"
expires="-1"


To: Nick Kew<nick@webthing.com>
Cc:w3c-wai-er-ig@w3.org


>Now I'd like to seek your views on how to go about this.  Is an RDF schema
>a good option here, and what should it look like?  Or would I be just as
>well-off with a semantic-free XML schema?

Well, as Chaals said, my mutat tool did something quite similar on the
basic defining-tests level.  I wrote my own RDF schema of various useful
test properties, built that and the fundamental EARL properties into my
script, and allowed users to extend these terms and use them to build their
own schemas.

My utility schema (quite simplistic, just defines some terms I wanted and
adds stuff to EARL definitions which were incomplete for my purposes) is
here: http://www.barbwired.com/nadiaweb/tester/ns
An example test schema defined with (and extending) these terms is here:
http://www.barbwired.com/nadiaweb/tester/wcag.n3

The advantage (for me) of using RDF is that once you've got the
dealing-with-RDF bit down, it's trivial to add more functionality.  You can
claim to be RDF pure, and the semantic web folks will love you. :)  No
really, it is a useful structure for this type of information.

>The actual specification for a Test comprises:
>  (1) What is it testing?  One or more Element or Attribute
>{ (Name)+ , (ELEMENT|ATTRIBUTE) }
>  (2) What is it testing against?  One or more guideline of a test suite.
>{ SuiteID , href, failuremessage }
>  (3) What test is being applied?  A test that returns a pass/fail
>{ TestClass, ConfidenceLevel, (Parameters)* }

Sounds good.  The "What is it testing?" bit might be a little ambiguous,
depending.  If you allow questions for the user to answer, there might be
cases where it applies to the whole page, or site, or content instead of
the markup... or you could just say you're not dealing with that kind of
question.

EARL has earl:TestCase and earl:id and earl:suite, which might be worth
re-using.

>The second part of this is to permit users to program their own TestClass.
>This is an arbitrary function, acting on a DOM representation of the
>document being tested, so writing one is a programming task. I don't see how
>this could usefully be incorporated into the test schema, (and I expect
>to make this a C++ API for users instead), but I'm open to suggestions.

This should be possible in RDF if you define some basic logic terms and
utility DOM functions.  Given, it might be more of a pain than you want to
deal with, but it would be a neat experiment.  Your code would end up
being, well, an rdf-to-C compiler.  I don't know if that's semantic web
"pure" anymore.

Nadia



