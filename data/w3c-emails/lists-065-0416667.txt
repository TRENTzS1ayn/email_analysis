docno="lists-065-0416667"
received="Tue Jun 25 13:58:04 2002"
isoreceived="20020625175804"
sent="Tue, 25 Jun 2002 18:57:16 +0100"
isosent="20020625175716"
name="Sean B. Palmer"
email="sean@mysterylights.com"
subject="[Issue] DanBri's model (and NickG's model)"
id="03ae01c21c71$d9d82ae0$e2b80150@localhost"
charset="utf-8"
expires="-1"


To:<w3c-wai-er-ig@w3.org>


DanBri's model:
http://lists.w3.org/Archives/Public/www-archive/2002Jun/0029
NickG's Model: I refer to
http://www.ecs.soton.ac.uk/~nmg/er-swad/earl-strawman.gif
[NickG: BTW, note that the use of "isa" is quite confusing: is this
supposed
to mean subClassOf or type? Looks like some sort of a semantic network to
me :-)]

DanBri's model is an actual change to the EARL model, plus a renaming of
the reification properties. Nick's model--AFAICT--is just a renaming, which
I have already argued against in the "Result Properties as... well,
Properties" thread. The advantage that DanBri's model provides is that when
you have a series of EARL assertions like:-

A B C
A D E
A F G

since you have a bag for the predicate/object pairs, you can do stuff
like:-

A {{B, C} {D, E}, {F, G}}

which makes for less serialization material. The tradeoff is a more complex
model, and unecessarily so. Note that I employ this same approach (enabling
a repeated subject) in my little abbreviated EARL format thing:
http://lists.w3.org/Archives/Public/w3c-wai-er-ig/2002Jun/0029

As Nick pointed out to me on IRC, this is alright unless you have stuff
like:-

{{A, B} {C, D} {E, F}} G

which is very inefficient in DanBri's model (and pretty bad in the
abbreviated EARL thing, although it's still a lot more concise than any
given M&S XML RDF), and makes it barely worthwhile. Note that the above
would occur when, for example, evaluating a set of many webpages against
some sort of specification (perhaps a level WCAG, or something).

So, subject oriented models have their advantages in some areas, but have
their disadvantages in other areas. The clincher is probably Aaron's notes
on the model:-

[[[
> [ :subject :x; :rest [ predicate :y; :object :z ] ]

I think I'm missing something. I thought x was a document, y was a test
and z was a result. Now that triple makes sense to me as a unit, but a
(test, result) pair doesn't really.... what's it mean?
]]] - http://lists.w3.org/Archives/Public/www-archive/2002Jun/0033

Clearly, the Validity/TestCase pair does not make a lot of sense as a bag,
so it's rather confusing. The only reason you'd want to do it is so that
you'd have less serialization garbage, and even then it doesn't work for
all cases.

I'm quite keen on subject oriented stores (having just implemented one),
but unless you have a combination of {s{p, o}}, {p{s, o}}, and {o{s, p}}
models, you're always going to leave someone out. I really don't think we
want to go up to that level of complexity.

--
Kindest Regards,
Sean B. Palmer
@prefix : <http://purl.org/net/swn#> .
:Sean :homepage <http://purl.org/net/sbp/> .



