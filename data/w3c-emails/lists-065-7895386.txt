docno="lists-065-7895386"
received="Tue May  5 21:50:02 1998"
isoreceived="19980506015002"
sent="Wed, 6 May 1998 09:49:45 +0800"
isosent="19980506014945"
name="Sean Lindsay"
email="editor@outlookmagazine.com"
subject="RE: Murky ratings"
id="002001bd7891$3eb0b100$8a033bcb@mach2"
charset="iso-8859-1"
inreplyto="Pine.SUN.3.95.980506100930.7241A-100000&#64;ariel.ucs.unimelb.EDU.AU"
expires="-1"

To:"WAI Guidelines Group"<w3c-wai-gl@w3.org>


Most commercial web designers will have a heart attack if you tell them they
should not use tables for multicolumn layout. They may counter-argue that
their design is no less accessible than Yahoo or CNET, or suggest that any
user who has a problem with tables should use Lynx.

It is unrealistic to expect them to abandon their otherwise effective
designs to accommodate what they will consider a minor demographic. These
designers are painfully aware that the vast majority of their readers will
be using N/IE 3/4, and they have one screen's worth of information to hook
readers before they go elsewhere.

The possibilities of future browsers are also not likely to sway them, since
many sites now use database publishing to construct pages as they are
requested, and could makes changes to accommodate new browser features
easily. I can implement a new design across my 200+ page site in an hour,
for example, and I'll probably update the site a hundred times between now
and when the next generation of browsers appear. A change to a component on
a dynamic website will take effect immediately.

For the designers of a server-based dynamic website, the best solution to
accessibility might be add a cookie-based instruction to assemble a
text-only version of the site for users that specifically request it, by
clicking on a link on the front page. Many sites do something like this
already, using Javascript to fetch information on the browser and serving a
page to match the browser's capabilities.

Come to think of it, you could do this in DHTML, using a Javascript button
to instruct the browser to move the various page elements (defined in CSS)
into a sequential order. You could even write the website's interface in XML
and make it completely customisable by the user (bye bye frames!). Of
course, these options are unfeasible in today's browsers, but they could be
quite reasonable choices by year's end. (And by year's end it's possible
that designers will be creating HTML-based alternatives to XML-based
websites.)

My point being: I think it's of paramount importance to explain what the
problem is, offer solutions from best to least desirable, give some examples
of effective design, and let the designer choose the best way to apply it on
their site.

Regards,

Sean Lindsay
Editor - OutLook Magazine's Disability Web
http://www.outlookmagazine.com
editor@outlookmagazine.com


> -----Original Message-----
> From: w3c-wai-gl-request@w3.org [mailto:w3c-wai-gl-request@w3.org]On
> Behalf Of Jason White
> Sent: Wednesday, 6 May 1998 8:20
> To: WAI Markup Guidelines
> Subject: RE: Murky ratings
[snip]
> I would argue that the requirement not to use tables so as to format text
> in columns is of paramount importance, since existing screen readers are
> unable to differentiate columns and will thus read the text (or display it
> in braille) in the sequence in which it appears on the screen, from top to
> bottom and left to right. Also, future assistive technologies will attempt
> to locate the header cell that corresponds to each data cell in the table.
> If the table is used for layout purposes, this algorithm will not be
> applied correctly, as there are no headers as such, and the results may
> well be confusing to the reader.
>
>



