docno="lists-066-14958459"
received="Sun Nov 21 16:01:23 1999"
isoreceived="19991121210123"
sent="Sun, 21 Nov 1999 13:01:10 -0800 (PST)"
isosent="19991121210110"
name="Scott Luebking"
email="phoenixl@netcom.com"
subject="Re: A brief analysis of dynamically generated web pages and"
id="199911212101.NAA21970@netcom.com"
inreplyto="A brief analysis of dynamically generated web pages and"
expires="-1"


To:charles@w3.org,nir@nirdagan.com,phoenixl@netcom.com
Cc:w3c-wai-gl@w3.org

Hi,

I've done a fair amount on configuration issues over the years.
One of the challenges can be the difference between general attributes
and attributes which are specific to such aspects as subject matter or task.
Setting up a browser for this type of non-general attribute
will be interesting.

An issue is persistence of choices.  Setting the browser is one approach.
Unfortunately, the problem with setting the browser is that an
application may make choices which a user doesn't like.  The user will
need some way to over ride the attributes that the application gets
from the browser.  Two other other problems with browser based
attributes is what to do if multiple users share a browser or if a user
works with different browsers at different locations.

Presenting alternatives hopefully will be done in ways to accomodate
different types of users, e.g. fewer choices for beginning users,
more choices for advanced users, etc.


Scott


> >Is there a reason why selection of the format has to be via detection?
> 
> I prefer the term content negotioation rather than detection. The current 
> state of content negotiation (both the standard and even more so the
> implementations)
> is indeed some sort of detection or guessing.
> 
> In the ideal form of content negotiation users configure their browsers to
> provide the 
> necessary and sufficient information about their preferences over 
> the form of content, and the server serves them as needed. If the server
> doesn't figure out what is best it gives the client a list of options. If
> the client
> knows enough it chooses automatically, if it doesn't it asks the user.
> 
> The reasons why content negotiation is preferred than giving the 
> user a list of choices via links or drop down menus are:
> 
> 1. With content negotiation the user configures its browser once and gets
> the right 
> form of document. With lists of choices the user has to manually tell its
> preference 
> to every website. Automation helps the user and saves him nags.
> 
> 2. Puting a list of 35 alternatives on every page in a website confuses the 
> users and reduces usability for all users including those who are in their
> more or less preferred format. 
> 
> You should note that alternatives are not only accessibility related but 
> also language and charset (there are many languages less lucky than English
> where a unique 
> common encoding does not exist.) So if you start multiplying the numbers
> you'll see that 35
> is a rather modest number of alternatives.
> 
> >If detection were available, the better design would be for the
> >server to take a guess via detection, but allow for the user to over-ride
> >any way.
> 
> True. But on should strive for automation, and only when the server and
> client 
> can't figure out what to do, ask the user. 
> 
> ===================================
> Nir Dagan



