docno="lists-068-15183017"
received="Mon Mar 12 10:16:24 2001"
isoreceived="20010312151624"
sent="Mon, 12 Mar 2001 16:11:03 +0100"
isosent="20010312151103"
name="Kynn Bartlett"
email="kynn-edapta@idyllmtn.com"
subject="Re: Layout tables"
id="a0501040ab6d295e49b7c@[10.0.1.9]"
charset="us-ascii"
inreplyto="01af01c0a8b5$5d5b8600$a3d6db3f&#64;cais.net"
expires="-1"


To:"Marti"<marti@agassa.com>,"Charles McCathieNevile"<charles@w3.org>
Cc:<jasonw@ariel.ucs.unimelb.edu.au>,"William Loughborough"<love26@gorge.net>,"Al Gilman"<asgilman@iamdigex.net>,<w3c-wai-gl@w3.org>

At 11:24 AM -0500 3/9/01, Marti wrote:
>There is the "rub".  I can define good reason for the use of XML, but the
>"execution" is at this point pretty messy.  XHTML has better support but
>what real world reason is there for people to take the extra steps to
>implement that?

I don't see any reason to write pages in XHTML.  If you want to list
the advantages of XHTML, they -all- derive from XML, except for one
thing -- you can leverage existing knowledge of HTML.  However, this
very easily becomes a crutch preventing people from making the move
to XML-based authoring, rather than the stepping stone that was
desired.  (And these days, most authoring environments are -not-
strictly HTML/XHTML based, requiring understanding of JSP, ASP,
XSLT, or other technologies, so pure "leverage of HTML skills" is
of even less value.)

If you're writing HTML anyway, you might as well write it in XHTML,
but there's not a real big need to do that.  If you write decent
HTML (read: accessible, to-spec, HTML 4.01), it's trivial to convert
it to XHTML 1.0 anyway -- see HTML Tidy.  But if you are authoring
in HTML (or XHTML) you are already limited anyway.

XHTML has value as a structured output language to which styling
(CSS) can be applied and as a "lingua franca" than many user agents
understand (which are two sides of the same concept), and thus it
"should" exist in some manner.  But a more reasonable authoring
concept is to write in XML, use some sort of transformation
mechanism (of which XSLT is but one example) to change it as needed,
and serve that up to your end users.  (Note that the change from
authoring language -> presentation language does not have to occur
dynamically.)

If you aren't doing that -- if you don't have such an infrastructure
in place -- then you're going to quickly be left behind as web
design evolves away from HTML and enters the XML world.  Reliance
upon XHTML to preserve the HTML model of web design is a -hindrance-
to moving forward, not an advantage.

--Kynn
-- 
Kynn Bartlett <kynn@idyllmtn.com>
http://www.kynn.com/



