docno="lists-068-4211534"
received="Sat Dec 23 17:28:34 2000"
isoreceived="20001223222834"
sent="Sat, 23 Dec 2000 14:04:55 -0800"
isosent="20001223220455"
name="Kynn Bartlett"
email="kynn-edapta@idyllmtn.com"
subject="Usecase for Testability/Compliance Claims"
id="4.2.0.58.20001223134445.00b54a80@garth.idyllmtn.com"
charset="us-ascii"
inreplyto="5.0.2.1.2.20001222060714.02943ba0&#64;mail.gorge.net"
expires="-1"


To:love26@gorge.net(William Loughborough)
Cc:<w3c-wai-gl@w3.org>

At 06:26 AM 12/22/2000 , William Loughborough wrote:
>Both the indexing and testability features are central to what we're about. At least at the P3 level it should be a requirement that one be able to test if a site conforms before trying to access it, else we become enmired in having to post yet another whine to Webwatch or whatever. 

Can you define what you mean by "testable"?

My _assumption_ is that you mean "testable automatically" by some
sort of mechanized process, which determines whether or not a
resource can be utilized by the user; this then gives the user
the option of accessing the site, or...what?

I would like to see an example use-case of this scenario defined.

I will provide my own guess at what you mean:

TESTABILITY USE CASE

      Amanda is a blind web user; she uses a screenreader in
      conjunction with a "traditional" visual browser in order to
      access the web.  She has javascript disabled, as most 
      javascripts either do nothing for her (swapping images on
      mouseover), or are too complex and interfere with the
      operation of her screenreader.

      Therefore, her requirements for web access include (a) 
      text equivalents for visual components, and (b) access to
      content even though javascript is turned off.  Amanda may
      have additional requirements, but for today we will keep
      this rather simple.

      Amanda desires to buy a plane ticket.  She starts up her
      web browser and goes to a search engine, where she locates
      a major travel web site.  As she clicks on the link, her
      browser queries the travel site, requesting a self-reported
      WAI conformance claim (which is stored via RDF in a file
      on a standard place on the server, e.g. /wcag.rdf in the
      root directory).

      Amanda's browser compares the RDF summary of accessibility
      with what it knows of her own capabilities; it determines
      that this site does not claim conformance with the portion
      of WCAG which mandates alternative text for images.  As this
      is a composite for the site, it may or may not apply to every
      function of the site, so this possibly means she'll be unable
      to perform the task she wishes to perform.

      Amanda's browser, before loading the site, prompts her with
      a question:  "This site does not claim sufficient accessibility
      for you to fully access all functions of the site.  What do
      you wish to do?  Continue, Abort, Test."  Amanda can choose
      one of those functions -- "continue" lets her continue on to
      the site anyway, "abort" means she doesn't follow the link,
      and "test" means that some sort of automatic test is invoked
      to verify the self-reported accessibility claim.

      Kynn's note:  If Amanda chooses "test", I am honestly not sure
      what should happen -- I'm not sure how William's suggestion of
      Amanda being able to test the site before accessing it will
      work, especially as many of the questions asked can't be
      _automatically_ verified.  For example, there is no way to 
      test whether or not a site will be usable without javascript
      enabled, short of attempting to use that site.

      In this case, Amanda decides to take her chances.  She 
      continues on into the site and finds she is able to navigate
      throughout the site; at the top level of navigation, the
      claimed problem with image accessibility does not seem to
      exist.  (Perhaps it's lower in the site somehow.)  So now
      she goes to choose a seat on the flight she wants.

      Checking an embedded RDF claim on the flight choosing page,
      Amanda's browser discovers that it claims javascript is
      necessary in order to proceed.  The RDF also gives a
      reference to another page on the site which duplicates the
      functionality but does not require javascript.  Amanda's
      browser, before displaying the page, prompts her:  "The
      page ahead claims to require javascript, but you do not
      have javascript enabled.  An alternate page is avaiable.
      What do you want to do? Continue, Abort, Enable Javascript, 
      Go to Alternate Page, Test."

      Amanda chooses "go to alternate page" and happily chooses
      her seat and eventually concludes her registration.  (Kynn's
      note:  Again, I am not sure what would have happened if
      she had chosen "test.")


How's that for a start?  Is that what you're talking about,
William?


-- 
Kynn Bartlett  <kynn@idyllmtn.com>                    http://kynn.com/
Sr. Engineering Project Leader, Reef-Edapta       http://www.reef.com/
Chief Technologist, Idyll Mountain Internet   http://www.idyllmtn.com/
Contributor, Special Edition Using XHTML     http://kynn.com/+seuxhtml
Unofficial Section 508 Checklist           http://kynn.com/+section508



