docno="lists-068-5078484"
received="Fri Dec 29 16:02:41 2000"
isoreceived="20001229210241"
sent="Fri, 29 Dec 2000 13:02:15 -0800"
isosent="20001229210215"
name="Matt May"
email="mcmay@bestkungfu.com"
subject="Re: Question on abbreviations (fwd)"
id="030201c071da$af896440$6401a8c0@sttln1.wa.home.com"
charset="iso-8859-1"
inreplyto="4.3.2.7.2.20001229150000.026a2c80&#64;pop3.concentric.net"
expires="-1"


To:"Leonard R. Kasday"<kasday@acm.org>
Cc:"WAI GL"<w3c-wai-gl@w3.org>

----- Original Message -----
From: "Leonard R. Kasday" <kasday@acm.org>


> Even if it's impractical to retrofit a mass of old pages[...]

Even if it's impractical? What's the point in building guidelines we don't
expect people to be able to implement? I've already said that I agree with
the concept of dictionaries for acronyms and abbreviations, and even
extending into other terms. What I don't like to see is this group taking a
tack that forces everything that's already out there to be redone
unnecessarily. This isn't a "curb cut." This is taking the bricks out of the
building, re-firing them, and then putting them all back where they were.

> You could also imagine semi-automatic programs to go through existing
> documents popping up each substitution for approval, giving choice from a
> menu when there are alternatives.

A user-agent-based dictionary would do this with zero or near-zero (if they
choose to redefine terms) effort on the part of the content provider, with
no impact on authoring tools. (Please don't forget that Notepad and vi are
authoring tools in many places.)

> As for the problems of using sed--a revered language which, however, knows
> nada about HTML--... you can get around all those problems by using Perl,
> which has e.g. specific ways to check word boundaries, together with a
real
> HTML parser, e.g. HTML::Parser, which will make sure you're not messing
> around inside tags and such.  And there are probably equivalents in Java
by
> now, tho I haven't looked.

You still need to have Perl or Java or C skills on staff to do this kind of
thing, or purchase a tool, to do this. The fact that somewhere something
exists that may make it a little easier may moderate time and potential for
human error, but it doesn't come close to minimizing or eliminating it. The
best way to prevent human error is to keep humans out of situations where
they can err. Basic user interface tenet.

> So none of these difficulties should prevent us from requiring that all
> instances of an abbreviation or acronym be tagged.

I don't understand the insistence on tagging every individual instance.
(Note: I do understand why they need to be expanded, just not why they need
to be tagged.) User agents will need to be revised to handle new markup
anyway (what supports acronym and abbr at present?). If this technology is
in the user agent, then _every site_ would be incrementally more accessible.
The opportunity is there, not here.



