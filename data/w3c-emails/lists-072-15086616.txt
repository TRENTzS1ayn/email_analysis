docno="lists-072-15086616"
received="Wed Dec 17 17:45:37 1997"
isoreceived="19971217224537"
sent="Thu, 18 Dec 1997 09:45:15 +1100 (AEDT)"
isosent="19971217224515"
name="Jason White"
email="jasonw@ariel.ucs.unimelb.EDU.AU"
subject="Re: CSS 2: priorities in cascading order"
id="Pine.SUN.3.95.971218092247.17438D-100000@ariel.ucs.unimelb.EDU.AU"
charset="US-ASCII"
inreplyto="199712171443.PAA16505&#64;www47.inria.fr"
expires="-1"

To: WAI HC Working Group<w3c-wai-hc@w3.org>


I agree with most of Daniel's comments. Nevertheless, I would be disturbed
if reader's style sheets were mentioned in the spec but no mechanism was
provided through which readers could ensure that their accessibility
requirements are met, despite contrary rules in authors' style sheets. 

The proposed !absolute; directive is very much along the lines of what I
suggested in my message yesterday. The one query which I have pertains to
its effect on specificity. For example, if the reader's style sheet
includes: 

h2 { font-size: 18pt; !absolute; }

and the author's style sheet says:

h2.chapter { font-size: 14pt }

then what would be the font size of <h2 class="chapter" Chapter heading
</h2>

If specificity is a problem in this context, then I would propose that a
new control be defined (perhaps an exclamation point) which grants to the
rule that follows it priority over all other declarations that would
otherwise have greater specificity. For instance:

! h2 { ... } /* This rule, in effect, has infinite specificity. */

In closing, I should add that although no user agents currently implement
the concept of a reader's style sheet, the fact that it is mentioned in
the spec suggests that the WAI would be taking an unnecessary risk with
potentially serious consequences were it not to insist on a mechanism for
ensuring that user's requirements are satisfied under such circumstances.
Also, if (as I seem to recall in the original proposal for XSL), the XSL
standard incorporates the concept of cascading, the same problem arises;
and of course, in XSL (given the complexity of the style sheets) it is
much more likely that readers' style sheets will exist. In fact, even if
many of the style options are selected by way of appropriate controls
within the user interface, the application may put them into effect by
creating a "reader's style sheet".



