docno="lists-075-1544722"
received="Sat Sep 18 13:56:11 1999"
isoreceived="19990918175611"
sent="Sat, 18 Sep 1999 10:56:09 -0700 (PDT)"
isosent="19990918175609"
name="Scott Luebking"
email="phoenixl@netcom.com"
subject="Towards a universally designed web page"
id="199909181756.KAA18090@netcom2.netcom.com"
expires="-1"


To:w3c-wai-ig@w3.org

Hi,

The developer environment we created was for writing specialized xml
files and marking sound files.  The developer environment is entirely
web-based with javascript using some ideas from universal design.

Since the environment was going to be using javascript, this allowed us
to take advantage of event handling.  We were able to design a key
event handling system which could be used with both Explorer and
Netscape.  The central aspect of the key event handling system is the
key event table.  This allows for easy and flexible binding of keys to
actions.  The key event table can be changed "on the fly" as needed.

One observation was that the developer environnent was a little easier
for blind users to work with if a page was broken up into a series of
sub-tasks.  The key event table is set up so that the user can
move/scroll between sub-tasks.  Another advantage to the key event table
is that it allows for the same key to be used for the same function in
each sub-task.  (Using HTML access keys can be a problem in that way
since a key is bound to a form button.)

One simple example of a web page being broken up into sub-tasks is the
web page created by the xml validator.  When the page is presented, the
text from the xml is written along with any error messages.  In this
case, the sub-tasks are the error messages.  The key event table lets the
user scroll directly between clusters of error messages.  It requires
much fewer keystrokes for blind users since they don't have to search by
text and also avoids the problem of trying to determine whether text is
an error message or text from the xml.  This feature is very similar to
curb cuts in that the feature also benefits sighted users by scrolling
the page directly to error messages instead of the sighted user scanning
through the page looking for error messages.

Scott



