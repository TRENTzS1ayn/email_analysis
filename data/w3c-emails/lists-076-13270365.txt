docno="lists-076-13270365"
received="Thu May 24 19:11:37 2001"
isoreceived="20010524231137"
sent="Fri, 25 May 2001 00:12:50 +0100"
isosent="20010524231250"
name="Jon Hanna"
email="jon@spinsol.com"
subject="RE: XML question"
id="NDBBLCBLIMDOPKMOPHLHCELBDDAA.jon@spinsol.com"
charset="iso-8859-1"
inreplyto="009c01c0e4a0$38c04980$20117b81&#64;paul"
expires="-1"

To:<w3c-wai-ig@w3.org>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

> It is relatively easy to make HTML accessible, because there are
> defined tags with specific purposes. In XML, there are no
> predefined 
> tags.

In XML there are no predefined tags, in a given application of XML
there are (including HTML, which has been an XML application since
Jan 2000).

Now, I know that you can convert XML into HTML, at which
> point accessibility becomes less of an issue, but what about pure
> XML content?
[snip]
 I can use an XSL style sheet to 
> give the XML
> content a certain layout or mode of presentation, but that's of 
> no use to a
> screen reader either.
> 
> It seems to me that XML is stripped of any useful structure, as far
> as a screen reader is concerned. This leaves us with text that may
> or may not make sense outside of its structural relationships.
> Think of tables for example. HTML tables can be confusing
> enough--but what if you don't even know that it's a table?
> Listening to a bunch of data outside of a table structure can be
> almost completely useless.
> 
> How are we going to get around this as the Web migrates to an
> XML-based structure?

It all depends on the XML and how it is used. Your statement about
XSL isn't completely accurate (or at least it's misleading). There
are two parts to XSL, of which XSLT is the most commonly used at the
moment. XSLT turns one XML into another, and generally if we want
something to be human-readable we use XSLT to convert it into XHTML,
at which point as you say the accessibility issues become less
important.

It is true that XSLF is presentation-based, but it doesn't seem to
have caught on (or at least when I wanted to produce RTF from XML
some time back I ended up writing an atrociously kludgy XSLT
instead). Also CSS can be applied to XML in a similar way that it can
to HTML. With most currently used implementations of CSS this is
indeed an issue, since we will have the style, but be lost as to
another way to interpret the substance. However with CSSs Standard
support for voice, and perhaps in the future other media, this may
not be an issue in the future.

To get to the heart of the matter though we need to look at how XML
is used and will be used.

You can look at XMLs as having three main types of use:

1. Machine readable: The XML may be human readable to some extent,
but it doesn't have to be. It is used for communications between
machines that may not even have an output device. This seems to be
the most common (though less visible) use in my experience and the
issues don't really apply here.

2. Human readable: For the most part these will either be specialist
in purpose, and there are no reasons why the tools for reading any
particular XML can't be accessible, or else XHTML will probably be
used for the final presentation processing as it has many advantages,
not least that so many people know it these days (if many of them
badly).

3. Mainly for machines, but with some presentational function: These
will become more common I think, but there issues are addressed by
either 1. or 2. above.

The product I'm working on at the moment uses XML extensively, but
our clients might never know if it wasn't that we tell them (for the
buzz-word factor). It all gets output as XHTML (for the record, the
tool can be used to output accessible XHTML, but it doesn't force
accessibility either).

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 6.5.3 for non-commercial use <http://www.pgp.com>

iQA/AwUBOw2Va4Fpv9f1Mr0YEQJMewCg3xr+wq+/DM49E6SxF9TCA536iLwAnRuf
UibkBYDtpunYYIL5bQVB/Udn
=TZ+k
-----END PGP SIGNATURE-----



