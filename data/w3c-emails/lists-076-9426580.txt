docno="lists-076-9426580"
received="Sun Nov 26 06:19:40 2000"
isoreceived="20001126111940"
sent="Sun, 26 Nov 2000 12:20:51 +0100"
isosent="20001126112051"
name="Ricardo S?nchez"
email="rsv@retemail.es"
subject="RE: Netsacpe Communicator 4.7 and  onkeyup"
id="003201c0579a$f07edd40$21aa243e@rs"
charset="iso-8859-1"
inreplyto="200011261039.KAA11460&#64;djwhome.demon.co.uk"
expires="-1"


To:<w3c-wai-ig@w3.org>


.
Hello David,



<David Woolley>
They are not in the Netscape Javascript Reference (not the
latest version,
admittedly) so they are not in the Netscape document object
model.
Effectively all current Javascript automation uses proprietory
object
models, so you must check against the proprietory documentation.

In any case, such use of Javascript will always cause
accessibility
problems; the only difference here is that you have just
discovered that
JS can cause accessibility problems even for people using one of
the big
2 GUI browsers.
</D.W.>

Thank you for response.

<D.W.>
Given that it is obvious that any page designed for
accessibility
would not rely on such object model events, why are you asking
on an
accessiblity list?
</D.W.>

1. My first interest is accessible web design.
2. In my opinion, object model events can to be very useful for
very much people (C.D and L.D. for example). Maybe, with a good
use the NOSCRIPT our pages will be accessible for others users.
3. Guideline 9:
Design for device-independence.
9.3 For scripts, specify logical event handlers rather than
device-dependent event handlers. [Priority 2]
An event handler is a script that is invoked when a certain
event occurs (e.g, the mouse moves, a key is pressed, the
document is loaded, etc.). In HTML 4.01, event handlers are
attached to elements via event handler attributes (the
attributes beginning with "on", as in "onkeyup").

Some event handlers, when invoked, produce purely decorative
effects such as highlighting an image or changing the color of
an element's text. Other event handlers produce much more
substantial effects, such as carrying out a calculation,
providing important information to the user, or submitting a
form. For event handlers that do more than just change the
presentation of an element, content developers should do the
following:

Use application-level event triggers rather than user
interaction-level triggers. In HTML 4.01, application-level
event attributes are "onfocus", "onblur" (the opposite of
"onfocus"), and "onselect". Note that these attributes are
designed to be device-independent, but are implemented as
keyboard specific events in current browsers.
Otherwise, if you must use device-dependent attributes, provide
redundant input mechanisms (i.e., specify two handlers for the
same element):
Use "onmousedown" with "onkeydown".
Use "onmouseup" with "onkeyup"
Use "onclick" with "onkeypress"
Note that there is no keyboard equivalent to double-clicking
("ondblclick") in HTML 4.01.

Do not write event handlers that rely on mouse coordinates since
this prevents device-independent input.

Thank you again David, your response is very useful for me.

Ricardo



