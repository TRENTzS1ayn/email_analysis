docno="lists-077-15148659"
received="Wed Dec 26 21:07:46 2001"
isoreceived="20011227020746"
sent="Wed, 26 Dec 2001 21:07:44 -0500 (EST)"
isosent="20011227020744"
name="Charles McCathieNevile"
email="charles@w3.org"
subject="Fresh start? Re: Minimal Browser Capabilities"
id="Pine.LNX.4.30.0112262033150.27858-100000@tux.w3.org"
charset="US-ASCII"
inreplyto="20011227021537.B7608&#64;elfi.elfi.org"
expires="-1"

To: Tina Marie Holmboe<tina@elfi.elfi.org>
cc:<w3c-wai-ig@w3.org>


When this thread started it was about what are the minimum capabilities we
can expect users to have (through their browsers). Very little data has come
out of it, so I am going to break this question into several smaller
questions, and see if we can get more signal.

What "should" users be able to deal with? I will leave this for now.

What can users deal with? This is a critical question for WCAG - if we
believe that users can deal with Javascript, then it is no longer a
disability issue but rather a device independence or philosophy issue. If we
do not believe so, then we need to work on how to make javascript accessible
but also how to make things accessible without javascript.

Let's begin at the beginning. I assume everyone agrees that it is a user's
responsibility to have a way of following a link, of rendering text, of
filling in a form field or activating a form control as those things are
specified in HTML.

If so we could asssume those as minimal browser capabilities. (This is
already important - WCAG didn't assume people could find an empty text field,
so included checkpoint 10.4 - if that is no longer a valid assumption, then
that checkpoint could be dropped.)

Now, let's look at other HTML capabilities:

The ability to distinguish different types of text is important. I believe
that there is little argument that people can identify em, strong, b, i,
h1..h6, links, and the various kinds of list and list items.

The ability to render tabular data:
Lynx does not do it well. Most graphical browsers, links, and w3m can render
table data, tablin can be connected to lynx to re-render and re-render it
until it makes sense.

So if we assume that Lynx by itself is a baseline, we have to assume that
people can install tablin or an equivalent too for themselves, or we will
have to keep asking table designers to ensure that their tables work when the
rendering is unavilable.

If we assume Lynx is a baseline then are we assuming that anyone who got a
version of IE with their system can install lynx and learn to use it for
things it does that IE doesn't?

What about elements like abbr, acronym, dfn or tt? What about styling? What
about dynamic content provided through various script languages, or flash,
SVG, Java, python? What about handling valid code? What kind of systems do
people have to use this software on?

charles



