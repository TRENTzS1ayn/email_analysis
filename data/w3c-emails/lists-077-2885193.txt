docno="lists-077-2885193"
received="Wed Feb 14 10:46:17 2001"
isoreceived="20010214154617"
sent="Wed, 14 Feb 2001 10:46:23 -0500"
isosent="20010214154623"
name="David Poehlman"
email="poehlman1@home.com"
subject="Re: [media] Making Sites Accessible Makes Sense For All Customers"
id="011301c0969d$487c2020$2cf60141@mtgmry1.md.home.com"
charset="iso-8859-1"
inreplyto="OF63DCB307.9E489465-ON862569F3.001152FB&#64;raleigh.ibm.com"
expires="-1"


To:"Kynn Bartlett"<kynn@reef.com>,<w3c-wai-ig@w3.org>,"Phill Jenkins"<pjenkins@us.ibm.com>

in a perfect world, we would all have choices but this is not a
perfect world and many do not have those choices.  taking away the
choices then, is something accessable even though the browser you use
because you have no choice does not support it?
----- Original Message -----
From: "Phill Jenkins" <pjenkins@us.ibm.com>
To: "Kynn Bartlett" <kynn@reef.com>; <w3c-wai-ig@w3.org>
Sent: February 13, 2001 10:37 PM
Subject: Re: [media] Making Sites Accessible Makes Sense For All
Customers


>If you want to argue that Javascript should be considered a required
>technology to supported, that's fine, I might even go there with you.

I'm not saying that JS has to be "supported", but that it can be
accessible
by itself without having to provide a redundant alternative - known as
directly accessible.

> What should any good web user agent be assumed to support,
> or is that question even worth asking?

It is only worth asking to "prove" that something CAN BE accessible.
I do
NOT like the idea of a set of minimum assumptions.  That in my opinion
is
dumbing down the web in the name of accessibility.  Either the
technology,
in this case JavaScript, can be accessible or it can't.  If there are
some
reference implementations (more than 1] to "prove" that it can, then
by
definition it is accessible.  If it isn't usable with a certain
browser,
then it isn't "supported".  Just because something isn't supported
doesn't
make it in-accessible.  Another example: some Window GUI applications
are
accessible, some are NOT, but the definition of accessible has nothing
to
do with the fact that a DOS screen reader doesn't support reading
them.
The definition has to do with CAN a Windows screen reader read it.
What
make this application readable and that one not?  Another example:  I
have
a captioned media file.  But you can only see the captions if you are
using
1st the required player and second the right version that will display
the
captions.  The clip is accessible because it meets a criteria list
that
ALLOWS it to be used or played in a manner usable by a person with a
disability.


> But when you say that Lynx doesn't matter because X percentage says
> Lynx is worthless, that kind of numbers game doesn't float my boat.

Lynx does matter.  I'm not saying lynx or any other browser is worth
or
worthless.  But why does lynx's lack of JavaScript support make
JavaScript
an accessibility problem? Someone's right to choose a browser does not
necessarily impose that choice as a definition for accessible.
Because
someone chooses to use lynx does not now require all websites to be
compatible with lynx.  Lynx doesn't support certain formats, including
JavaScript - but that doesn't make JavaScript in-accessible.  If
someone
wants to support lynx or any other combination of browsers, so be it.
But
let's not confuse browser support with accessibility.

The numbers were used to illustrate the point that the larger amount
of
work would be to have the developers fix all the sites that use
JavaScript.
The number of developers needed to re-write lynx from the ground up
for
JavaScript support would be small compared to the number of web
developers
needed to fix all the JavaScript sites.

Regards,
Phill



