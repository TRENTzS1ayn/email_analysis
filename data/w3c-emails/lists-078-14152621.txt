docno="lists-078-14152621"
received="Thu Sep 12 10:21:07 2002"
isoreceived="20020912142107"
sent="Thu, 12 Sep 2002 09:19:26 -0500"
isosent="20020912141926"
name="Jim Thatcher"
email="jim@jimthatcher.com"
subject="RE: SCOPE vs. ID/HEADER"
id="NDBBKJDAKKEJDCICIODLAEDLEJAA.jim@jimthatcher.com"
charset="us-ascii"
inreplyto="5.1.0.14.2.20020912081317.020eb8f0&#64;pop.iamdigex.net"
expires="-1"

To: WAI IG<w3c-wai-ig@w3.org>



I fear, Steve, that if you ask 5 different experts you'll get 5 very
different answers.

Below I have pasted a listing on how HPR, Window-Eyes and JAWS support
various forms of table markup - these results are for versions a few months
ago. The bottom line is that for programmatic identification of table
headings, TH with scope is best because it is simplest and is supported as
well as headers and id's. If the table is complex ("more than one Logical
level of row and column headers") then your must use headers and id's
because headings will not be properly identified with TH and scope.

The chances of errors and the time required to touch each cell of a data
table when using headers/id leads me to recommend that web developers
revisit the design of the table; probably it can be simplified, possibly
with multiple tables.

The versions for this test are JFW 4.01, HPR 3.02 and Window-Eyes 4.11.
1. No special markup - row one and column one for headings: JFW,
Window-Eyes, HPR.
2. Scope attribute on either TH's or TD's - JFW and HPR.
3. Axis attribute on TH's or TD's - JFW.
4. Use TH for headings - JFW and HPR.
5. Headers attribute with id's specifying heading cells - JFW and HPR.
6. abbr attribute on heading cells - JFW and HPR.

Jim
Accessibility Consulting
http://jimthatcher.com
512-306-0931
Evaluation of web evaluation tools at http://jimthatcher.com/erx.htm


-----Original Message-----
From: w3c-wai-ig-request@w3.org [mailto:w3c-wai-ig-request@w3.org]On
Behalf Of Al Gilman
Sent: Thursday, September 12, 2002 7:25 AM
To: WAI IG
Subject: Re: SCOPE vs. ID/HEADER




>On Thu, 12 Sep 2002, Steve Vosloo wrote:
>
> >I've always used ID and HEADER attributes when creating accessible data
> >tables, but after reading the Access Board's bit for 508 compliant
> >tables, I might user SCOPE instead. From what they say SCOPE is as
> >widely recognised by user agents and it is definitely easier to
> >implement.
> >
> >Any thoughts on why we don't all simply use SCOPE and code our tables in
> >a tenth of the time?

Use ID and HEADERS.  SCOPE is still not implemented widely enough to merit
your relying on it at this time.

This was the report of Ken Nakata and Doug Wakefield to the
FedStats workshop of accessible tables as recently as the end of June.

  http://workshops.fedstats.gov/Nakata_Fedstats.ppt

  http://www.w3.org/2002/Talks/06/24-US_FedStatsWorkshop/slide1-0.html

  http://workshops.fedstats.gov/FS508Workshop.htm

The 508 materials you refer to are older, hopeful, and not yet valid as
reflecting implemented technology.  You should regard what Ken and Doug
reported to the FedStats workshop as a clarification with regard to the
earlier technical information from the Access Board.

Al

At 04:31 AM 2002-09-12, Charles McCathieNevile wrote:

>On Thu, 12 Sep 2002, Steve Vosloo wrote:
>
> >I've always used ID and HEADER attributes when creating accessible data
> >tables, but after reading the Access Board's bit for 508 compliant
> >tables, I might user SCOPE instead. From what they say SCOPE is as
> >widely recognised by user agents and it is definitely easier to
> >implement.
> >
> >Any thoughts on why we don't all simply use SCOPE and code our tables in
> >a tenth of the time?
>
>Browser makers implemented headers first, so that is what people started
>recomending. When browser makers didn't implement scope people got laughed
at
>for suggesting using it (understandable really) with the result that people
>who write sites got given the hard way first, and had to wait for the
simple
>solution to be useful.
>
>Unfortunately (but again understanably really) users don't change their
>systems very often. So you don't get to take advantage of the newer
features
>(well in terms of implementation - these were all proposed in '96 or '97)
to
>make your life easier until users go through the process of upgrading,
unless
>you are happy leaving a whole lot of users in the cold.
>
>Chaals



