docno="lists-080-12708361"
received="Thu Jun  3 06:17:24 2004"
isoreceived="20040603101724"
sent="Thu, 3 Jun 2004 09:54:23 +0100 (BST)"
isosent="20040603085423"
name="David Woolley"
email="david@djwhome.demon.co.uk"
subject="Re: More scripting thoughts Pt. 2  (was RE: Accessible road maps)"
id="200406030854.i538sNm01259@djwhome.demon.co.uk"
charset="us-ascii"
inreplyto="1049.129.174.36.240.1086214579.squirrel&#64;www.stevendale.com"
expires="-1"


To:w3c-wai-ig@w3.org


> > That may have been an aim, but it sure wasn't one that came to bear.
> > javascript won that battle.

I can't find the original for this, so I've threaded it to the reply.

Microsoft doesn't seem to believe that JavaScript (i.e. EcmaScript, plus
HTML plus object models) won the battle, as they are pushing .NET, which
owes most of its inheritance to Java not JavaScript.  I think this is
one of the reasons why IE development is frozen.

I suspect the main reasons that JavaScript is popular are:

-  as I think shown here, people don't consider scripted web pages to
   be programs, so they don't see scripting's proper use as requiring
   technical skills (even though it very much does need them - and once
   the managment decision is made, the work may be handed off to people
   skilled in using the wrong tool for the job);

-  you can start with a static mockup or cut and paste from other sites to
   create some sort of prototype, whereas more conventional programming
   languages either need development tools sets, or the ability to think in
   depth at the outset - once you have the prototype, you will tend to 
   complicate it rather than start over and code it in a way that handles
   the required richness of behaviour in an elegant way.  Often tools that
   do simple things easily make doing more complex things very difficult, but
   the project can be sold on the simple model.

I think Microsoft see their revenue as coming from business customers with
intranets, and that those customers are maturing towards realising that
simple workarounds have their limits and complex systems need languages
designed for them.  They certainly don't want to be just another supplier
of products conforming to a specification created by a consortium with
their competitors, so don't really want their products to fall within the
scope of the W3C, if they can avoid it.  That means that there is a risk
that an important area for accessibilty will be taken out of the scope
of W3C.



