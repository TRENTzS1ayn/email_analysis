docno="lists-080-7206801"
received="Wed Dec 10 19:38:39 2003"
isoreceived="20031211003839"
sent="Thu, 11 Dec 2003 11:27:38 +1100"
isosent="20031211002738"
name="Geoff Deering"
email="gdeering@acslink.net.au"
subject="Re: The Cult of Pseudo Accessibility"
id="3FD7B9FA.6030209@acslink.net.au"
charset="us-ascii"
inreplyto="200312102204.hBAM4CJ20774&#64;djwhome.demon.co.uk"
expires="-1"


To: David Woolley<david@djwhome.demon.co.uk>
Cc:w3c-wai-ig@w3.org


David Woolley wrote:
>>As a programmer you should know that all they have to do is at least in 
>>this situation parse the functions calls and match them in a DOM tree 
>>table to see if they meet critical or none critical criteria and flag 
>>them as such?
> 
> 
> You can only do this for stereotyped code (the sort that links (not lynx)
> can partially cope with).  I don't think there is any doubt that 
> ECMAScript is Turing complete, so the halting problem is unsolvable; that
> means that any fully general script analyzer will take an amount  of 
> time that can only be determined by actually running the analyzer to fully
> analyze the script.  (The halting problem says that you cannot construct
> an algorithm that will determine whether an arbitrary program will ever
> complete and which, itself, will always complete in finite time.)
> 
> More prosaically, function calls can be against objects that are multiply
> indirected through object variables; that means that you have to analyze
> program and data flow; you cannot do just a static analysis.

What I am saying was addressing what James was saying, about 
*non-essential* and *essential* functionality and flagging it as a 
possible problem.

What about all those sites that use document.write to generate all or 
most of their content?

I would look at all these things and flag them and show them their page 
free of all the javascript implementations.  That does not need the 
level of complexity that you have indicated.  I'm just talking about 
checking for the basic and obvious stuff, not a full on full blown DOM 
analyser.

Geoff Deering



