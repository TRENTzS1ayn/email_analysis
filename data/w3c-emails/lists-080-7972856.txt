docno="lists-080-7972856"
received="Thu Dec 25 03:06:51 2003"
isoreceived="20031225080651"
sent="Thu, 25 Dec 2003 19:06:17 +1100"
isosent="20031225080617"
name="Geoff Deering"
email="gdeering@acslink.net.au"
subject="Re: How Far Can Web Accessibility Go?"
id="3FEA9A79.6080002@acslink.net.au"
charset="ISO-8859-1"
inreplyto="000301c3ca85$17ea0660$2b0310ac&#64;mitsue.co.jp"
expires="-1"


To: keiko okada<k-okada@mitsue.co.jp>
Cc:w3c-wai-ig@w3.org


keiko okada wrote:

>
>
>The lack of understanding of this medium is not the only factor, or an
>excuse. I agree with you that we don't have enough skilled designers,
>developers, and engineers in this needed field. But they can get help
>from outside if they really are in need. Sadly though, there are still
>so many people who do not take this issue seriously. It is too sad to
>know that it is often the budget and dicision makers attitude that are
>making it so difficult to say yes to the question. First we need to
>understand the needs, then the skills (or skilled people). 
>
>Kind regards,
>Keiko
>
>  
>
Hi Keiko,

I think it is very important to be able to show ROI on accessibility.  
There is a WAI document on that.

http://www.w3.org/WAI/bcase/benefits.html

But it is important to be able to *show* people just how they can 
implement design strategies to improve and cut the cost of their SDLC.

   1. Seperate content from design (HTML/CSS)
   2. Layout informational and structural elements in the design
   3. Develop to a formal grammar

Just to start with these is a really big step to accessibility, and just 
avoiding the simple mistakes.  Without the extras, you already have a 
site that facilitates accessibility without really focusing on it.  All 
that has been done is focused on good web development principles.  If 
people do that, they are improving their web development practices, and 
as a side issue, making their site more accessible.  Trouble is, we are 
creatures of habit, and tools like Dreamweaver still generate garbage 
code.  There is no mode within it you can switch to *real* W3C standards 
developer and have it generate the correct code.

There are enough examples of how to front end, but there is a real need 
to see CMSs and backend publishing tools facilitate these concerns, only 
then will development teams really feel they can address these issues 
site wide.  I'd like to see Dublin Core metadata repositories in CMS, 
which also serves as good document versioning.  Probably the likes of 
Cocoon and Axkit best facilitate/represent the direction of things to come.

http://cocoon.apache.org/
http://axkit.org/
http://xml.apache.org/

I know a lot of people will come down on me for this, but I feel the 
future of web development is in backend development.  I only see front 
end development for template design and small sites.  But I am wrong 
about a lot of things, and especially picking trends :-(

regards
Geoff Deering



