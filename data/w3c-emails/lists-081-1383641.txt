docno="lists-081-1383641"
received="Mon Mar 29 15:29:02 2004"
isoreceived="20040329202902"
sent="Mon, 29 Mar 2004 21:25:36 +0100"
isosent="20040329202536"
name="Ian Anderson"
email="lists@zstudio.co.uk"
subject="Re: Skip Sections"
id="001901c415cb$febdc310$0400a8c0@QUIXOTE"
charset="iso-8859-1"
inreplyto="BC8DBE8D.27AF8%andrew_kirkpatrick&#64;wgbh.org"
expires="-1"


To:"Andrew Kirkpatrick"<andrew_kirkpatrick@wgbh.org>,"Nick Kew"<nick@webthing.com>
Cc:<w3c-wai-ig@w3.org>


> > Correct me if I'm wrong, but that's not really an option for insets.
> > CSS float relies on the floated content appearing before what floats
> > around it, while fixed or absolute positioning precludes the main
> > story flowing around any kind of inset, and suffers from rather a
> > lot of buggy implementations.
>
> Not satisfied with "this should work, in theory"?  Yes, there are lots of
> buggy CSS implementations.  I don't have a good example on hand that is an
> exact parallel of your file.  I'll check around my favorites...

It strikes me that Nick uncovered an excellent example of where HTML/CSS
theory conflicts with good accessibility for non-visual UAs. Using float is
a key principle of CSS, but as mentioned it relies totally on intermixing
the two content streams in a manner that is inconsistent with separating
presentation and structure.

Thinking back to my design for print days, there was no need to insert a
sub-story into the main story flow in Quark or PageMaker in order to create
the text-wrapped display that float replicates. The two stories remained
whole and separate regardless of how they were streamed onto the page.

Both PageMaker and Quark support text-flowing models that allow the story to
be displayed in discontiguous blocks on the page while remaining part of
complete threads internally.

The issue raised originally is real, and absolute or relative CSS
positioning cannot replicate the design function of floats. This is why CSS
has floats :)

The solution would need to be implementing the same sort of sophisticated
box and story handling models in CSS that print designers enjoy in DTP
applications. Physical positioning is only part of the story, something I
had overlooked until Nick's post. In CSS, we should be able to define
display boxes and link them to story threads in the HTML source. The browser
would be responsible for dynamically flowing the story into its boxes
depending on local settings like window size and font properties.

Maybe in CSS8? :)

Thought provoking stuff. The bottom line is you either compromise the design
or the HTML structure if you want to do this kind of DTP-style layout in
todays browsers.

Take care

Ian Anderson
zStudio



