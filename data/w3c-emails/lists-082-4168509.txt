docno="lists-082-4168509"
received="Thu Oct 15 01:30:58 1998"
isoreceived="19981015053058"
sent="Thu, 15 Oct 1998 01:27:45 -0400"
isosent="19981015052745"
name="Harvey Bingham"
email="hbingham@ACM.org"
subject="on events with different UA ???"
id="199810150530.BAA08539@mail-out-1.tiac.net"
charset="us-ascii"
expires="-1"


To:w3c-wai-ua@w3.org

The draft Jon circulated 12 hours ago:

Techniques: 
1. Sequential keyboard access to explicit events associated 
with an element. [+P1][+Tnav-dhtml-sequential] 
2. Direct keyboard access to explicit events associated with an element.
[+P1][+Tnav-dhtml-direct] 
3. Keyboard equivalents for simulating mouse explicit events.
[+P1][+Tnav-dhtml-simulate] 

For reference to what we are discussing, the list of "on..." event 
attributes in HTML 4.0 are:

onblur      %Script; #IMPLIED -- the element lost the focus --
onfocus     %Script; #IMPLIED -- the element got the focus --
onkeydown   %Script; #IMPLIED -- a key was pressed down --
onkeypress  %Script; #IMPLIED -- a key was pressed & released --
onkeyup     %Script; #IMPLIED -- a key was released --

ondblclick  %Script; #IMPLIED -- a pointer button was 
                                  double-clicked--
onmousedown %Script; #IMPLIED -- a pointer button was pressed down --
onmouseup   %Script; #IMPLIED -- a pointer button was released --
onmousemove %Script; #IMPLIED -- a pointer was moved within --
onmouseout  %Script; #IMPLIED -- a pointer was moved away --
onmouseover %Script; #IMPLIED -- a pointer was moved onto --
onselect    %Script; #IMPLIED -- some text was selected --
onchange    %Script; #IMPLIED -- the element value was changed --

onsubmit    %Script; #IMPLIED -- the form was submitted --
onreset     %Script; #IMPLIED -- the form was reset --
onload      %Script; #IMPLIED -- the document has been loaded --    
onunload    %Script; #IMPLIED -- the document has been removed --

Many of the above apply to most all the element types.

In a mouse-free environment I doubt that there is a 1:1 correspondence 
with the alternative mouse/cursor/focus/select mode of control. So, 
some keyboard sequence maps to the particular "on..." event.
How is this conveyed to a UA, and to a user?

It is unlikely that the same keyboard sequence (including various
Ctrl/Shift/Alt concurrent keys) are appropriate for voice commands.

Is it correct that the single script named in the CDATA of any 
of those %Script; must handle the variety of responders for the 
different media?

If so, does some pre-processor have to map from the keyboard/voice command
onto the proper "on..." attributes identifying the %Script; and supplying
the same information (positional, and select/focus/blur) as if it came as a
result of some prior or current mouse/select/keypress/etc. to process that
request for action with the single specified %Script; .

How does one substitute a different set of scripts? Can their names be 
indirect, so a user preference set of scripts can participate in determining 
which particular scripts are to be used/substituted for the specified one?

Is it our job to anticipate how this mapping might be done? or only that
a mapping is required? or that alternative, more appropriate %Script;
might be substituted for the particular usage command set/presentation form?

Questioning/Harvey 



