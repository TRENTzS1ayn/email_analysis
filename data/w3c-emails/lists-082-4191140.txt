docno="lists-082-4191140"
received="Thu Oct 15 09:14:06 1998"
isoreceived="19981015131406"
sent="Thu, 15 Oct 1998 15:13:49 +0200"
isosent="19981015131349"
name="Daniel Dardailler"
email="danield@w3.org"
subject="Re: on events with different UA ???"
id="199810151313.PAA19234@www47.inria.fr"
inreplyto="on events with different UA ???"
expires="-1"


To: Al Gilman<asgilman@access.digex.net>
cc:hbingham@ACM.org(Harvey Bingham),w3c-wai-ua@w3.org


> Good questions.  Here are some related thoughts.

More data, more souvenirs...

Back when I was working on implementing the X Window and Motif
toolkit, we had defined a level of event notification that would allow
application to transparently support keyboard or mouse control in all
widgets (i.e. UI WIndow obJECTS).

If you take any good Motif programming book, you'll find definitions
for things like

osfCopy
osfCut
osfPaste
osfClear
osfEscape
osfPageUp
osfPageDown
osfPageRight
osfActivate
osfMenuBar
osfEndLine
osfBeginLine
osfSelect
osfUndo
osfCancel
osfHelp
osfSelectAll
osfDeselectAll
etc

All these "virtual keysym", in our jargon, were meant to provide a
layer of abstraction that permitted programs to stay independent of
the device. In order to really be independent, the program "callbacks"
had to follow some discipline and not dig into the guts of the real
event that was behind this virtual notification.

In retrospect, I think we should have made it impossible for the
program API to access the real event details.

Anyway, as Web pages involving DTHML are more and more ressembling the
imperative coding practices of the past (vs. the declarative UI
practives HTML FORM had introduced), this technology is likely to find
a new use.



