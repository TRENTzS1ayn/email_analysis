docno="lists-082-8115240"
received="Tue Apr 27 13:51:03 1999"
isoreceived="19990427175103"
sent="Tue, 27 Apr 1999 13:51:16 -0400"
isosent="19990427175116"
name="Denis Anson"
email="danson@miseri.edu"
subject="Navigation techniques"
id="NCBBIAJHOLHLLMFFNLDDKEFNCAAA.danson@miseri.edu"
charset="iso-8859-1"
expires="-1"

To:"WAI UA Group"<w3c-wai-ua@w3.org>


I'm enclosing my efforts on these checkpoints as text, html, and Word
format.  I'll also include it in the body.  That should meet the needs of
most members.

Denis

Navigation of Web Pages
Pages on the world wide web may broadly be grouped into three intended uses.
These are:
1.Gateway pages: These are web pages for which the primary activity is to
provide access to other pages on the web.  Such pages are frequently
dominated by links.
2.Query pages: The primary function of these pages is to gather information
from user.  Such pages might be subscription pages, registration pages, or
even query pages for an on-line database.  Such pages contain forms into
which the user of the page inserts information for submission to a remote
web server.
3.Content pages. The primary purpose of content pages is to provide
information to the user.  These pages might be on-line books or other
publications, catalog entries for an electronic commerce site, or personal
web pages describing an individual?s likes and dislikes.

Additionally, the information presented on web pages may be accessed
differently depending on whether the content is already known (or
suspected), or whether a user is exploring the content of the page without
any preconceived notion as to probable content.  These two types of use may
be described alternatively as ?browsing? and ?searching? the content of a
page.  The three types of application may all be browsed or searched,
depending on the prior knowledge and needs of the user.

The navigation techniques that are used for these types of pages are
somewhat different, and a user agent should provide the tools to navigate
each type of page to users with disabilities.

Gateway pages
Browsing
When a user enters a page for the first time, and has no definite goal in
mind, s/he should be provided with the ability to explore a web page
displayed in a browser.

#16: Sequentially navigate to only link elements (Open)
Historically, gateway pages consist of collections of hyperlinks.  These
pages may be formatted as lists or tables of links, or may be formatted to
look like content pages by embedding links within pages of text.  In other
cases, the links are embedded in a graphic in the form of an image map.
However, in most cases, most of the information content of a site is
actually on the linked pages.  Since the functionality of the page is
provided through the links, and the other elements on the page are intended
to provide context or aesthetic appeal, the user should be able to directly
access the functionality of the page, bypassing other elements.
In order to discover the links on such a page, the user agent should provide
a facility to move the focus of the user agent from link to link in the
logical order of the page via a device independent action.  Because third
party assistive technology typically is capable of generating character
codes, some character level command should be provided to enact this method
of navigation in addition to direct selection via a pointing device.

#3: Should user agents be able recognize markup for navigation bars
As the web evolves, pages are including navigation bars as alternatives to
lists of text links.  Navigation bars appear as collections of buttons or
text which provide links to other pages, and may have added behaviors such
as changing size or color when the mouse pointer hovers over them.  The
document markup for such navigation bars may be substantially different from
that of traditional links, but in order to provide equivalent functionality
for users with disabilities, navigation bars should be accessible both via
direct selection with a pointing device and via character level commands.
Searching
When a web page is commonly used by an individual as a gateway, and the user
has a significant familiarity with the content of the page, it may be more
efficient to jump directly to a desired link.  If the user enters a gateway
page for the first time, but with a definite goal in mind, s/he may wish to
quickly discover if the page contains a link to a specific destination.
Finally, a user who is exploring a page may wish to distinguish between
links that have been visited, and those that have not.
#21: Search for link based on its text content (Open)
A user agent should provide the ability to search for a web page based on
the text content of the link.  For example, if the user were looking for
information on Koala bears, it would be useful to be able to search for
links containing the term Koala.  This will allow the user to move directly
to a link on a page, or to determine that the page does not contain such a
link.
#38: Search for a link based on its attribute value (Open)
When a user is exploring the web, and returns to a gateway page, s/he may
wish to either return to a linked page that had previously been visited, or
to move directly to unvisited links.  In either case, the user agent should
be able to search for links based on their attributes.  Additionally,
because the text of a link may not be identical with the content of a link,
it may be desirable to search within the text of a URL, in addition to the
content of a link.  For example, the link to http://www.biology.au/Koala.htm
might contain text like ?cute, cuddly bears with vile tempers.?  Searching
for the text ?Koala? would not find this link.  Searching within the
attribute would.
Query Pages
Query pages allow web sites to obtain information from users.  This
information might be used to place orders from an e-commerce site, to
subscribe to a newsletter or magazine, or to request information from an
online database.  In each case, the goal is to obtain information from the
user of the page.  Such pages may have significant explanatory text around
the data collection elements, which is helpful to the novice user, but
unnecessary by the experienced user.  Because a user with a disability may
not be able to scroll directly to elements of interest and directly select
their content with a pointing device, the user agent should provide
equivalent functionality.
Browsing
#22: Sequentially navigate between forms in a document (Open)
A complex query site may have multiple forms or equivalent embedded objects
to support a range of possible query types.  A library site might have
separate forms for ?Search by Author,? ?Search by Title,? and ?Search by
Topic.?  An able-bodied user can scan a page, and use a pointing device to
select the first element of the desired query form. Each form may be
composed of many elements, and sequential navigation of form elements on a
page would be a substantial burden to a user if this were the only way to
navigate to a form that was several forms down a page.
To provide equivalent functionality for individuals with disabilities, a
user agent should provide a means to move through the page by form level
markup.  This would allow the person with a disability to jump directly to a
form, determine if the form met the desired intent, and, if not, jump
directly to the next form, without the need to move through each element of
the form.
#17: Sequentially navigate to only form controls in a document (Open)
Once the user has located the desired form, it is essential that s/he be
able to move from form control to form control within the form, in order to
provide the functionality of the form to the user who does not have access
to a pointing device.

Searching
#24: Search for a form control based on its attribute values (i.e. label or
control type) (Open)
The user who is visiting the on-line library, and is searching for books by
a favorite author may wish to jump directly to a form which requests
information about authors.  The ability to search a page by form control
attributes would provide this functionality.
#23: Search for a form control based on text content (Open)
It is sometimes useful to search for a form control based not on its label,
but on its content.  For example, some web sites evaluate data entry at the
time the data is submitted, and will not accept data that is in the wrong
format.  If the user has inadvertently made a typographical error in
entering his/her address, it would be desirable to be able to jump directly
to this error to correct it.  However, the form control for the address
might be labeled ?Address,? ?Address1,? or even ?Street.?  Because the
labels are inconsistent, the user may not be able to directly find the
information that must be corrected.  However, since the user knows that the
item contains ?Pine St.?, being able to search for form controls based on
content would allow immediate navigation to the data to be corrected, in
spite of inconsistent labeling of the control.

Content Pages
While many pages are used to solicit information, or to guide users to other
pages, one primary reason for browsing the World Wide Web is to obtain
information from it.  A user desiring content from the web needs to be able
to move through the content of the page in blocks of content that allow
access to the information contained on the page.  Able-bodied users are able
to read text on the screen, and scroll quickly through a document, visually
scanning for content of interest.  In some cases, the user is actively
seeking content on a specific topic.  In others, the user is simply looking
for content that will peek his/her interest, and provide entertainment.
User agents should support both types of examination of web pages.
Browsing
#20: Sequentially navigate header elements (Open)
A well-formed document may be structured with header elements describing a
section of content, followed by that content.  The headers might form the
titles of chapters of a book, or the sections of a professional document.
One method of navigating a long document in search of content would be to
move from header to header through the document.  Since, headers are, by
their nature, hierarchical, a header navigation technique should allow
navigation by headers of different levels.  The user should be able to move
from <H1> element to <H1> element, and then move to lower level elements
within a document.
#18: Sequentially navigate to only elements with long descriptions (longdesc
attribute or OBJECT content) (Open)
The user may wish to obtain information about the embedded objects within a
page, by moving from descriptive element to descriptive element through a
page.  In this way, the visually impaired user, for example, could quickly
get a sense of the graphical elements on a page that are absorbed
peripherally by the sighted user.

The most important, but frequently overlooked aspect of page browsing is
navigation of the text of a web-based document.  Sighted users navigate
pages by reading them from the screen, and scrolling through the document
using a pointing device.  The inability to visually access a page, or
physically access a pointing device can substantially limit access to the
content of pages by individuals with disabilities.  In order to provide
equivalent functionality, a user agent should provide the ability to shift
the point of regard through a document encompassing the content in
meaningful segments.  While the page-down function of a browser allows
movement through a document in sections, the sections are determined by the
window of the browser rather than the content of the document.  After
shifting the view port of a browser, the text displayed may begin in the
middle of a sentence, and not be meaningful outside of its context.  To
provide equivalent access for individuals with visual deficits, the user
agent should allow changing the point of regard by paragraphs, as well as by
larger block structures.
Searching
When entering a page that has been identified as containing specific
information, the user may have to do significant scrolling to find that
information.  It is, therefore, essential that a user agent allow the user
to search for specific text within a page.  The browser should provide the
ability to search for the next occurrence of a segment of text without
retyping the search key.

Global Issues
Browsing
#15: Sequentially navigate between active elements (Resolved)
Many web pages include active elements that can provide functionality based
on user actions.  These include features activated by ?mouseover? and
?mouseleave? events, features activated by clicking on an object within a
page, and other scripted functionality.   Scripts may be attached to
arbitrary components of a page, not just to links and form controls.  In
order to provide equivalent access to users with disabilities, a user agent
should provide a means of locating and activating embedded active elements.
This functionality would require moving the mouse pointer (or other point of
regard indicator) over active elements, and simulating mouse clicks in a
device independent manner.

#27: Move to the next element in the document tree as defined by DOM (Open)
#28: Move to the child level element of the current element in the document
tree (Open)
#29: Move to the next (or previous) sibling element in the document tree
(Open)
#30: Move to the parent element of the current element in the document tree
(Open)
One strategy for navigating a document is to allow the user to ?walk the
document tree.?  In this strategy, the user is able to move from the root
element of a tree throughout its structure.  Such functionality requires
that the user agent provide a means of moving from any element to its first
descendent, to its prior or next sibling, and to its parent.  In a fully
functional implementation, a user would be able to move from an element to
its parent, and then move directly back to the starting element, regardless
of where it falls in the sibling hierarchy.
Walking the document tree, by its nature, provides much of the functionality
of navigation of a document described in earlier sections, but has the
disadvantage of requiring the end user to understand the concept of the
document tree, and the structure of an arbitrary document in order to
predict the action of any given command.
#11: Move to the next element with the same attributes and element type
(Open)
Examining the degrees of functionality required for equivalent access shows
that, if each of the types of navigation were provided by separate commands,
a user would have a significant cognitive task in learning to navigate the
browser.  Having individual commands for navigation by links, by link
attributes, by navigation bars, by forms, by form elements, and by headers
and paragraphs would require the user to remember each type of command to
use the provided functionality.  This would significantly disadvantage users
with limited cognition.
As an alternative strategy, a user agent might be designed to allow the user
to ?find the next thing like this one.?  Such a browser would have to
implement a point of regard indicator that moved from block element to block
element under the control of the user.  When the user found the type of
element that seemed to be significant to his or her purposes, a command
could be issued that would ?find the next element like this one.  Such a
command would be sensitive to links, visited links, forms, form controls,
tables, table cells, headers and paragraphs.  It would also sensitive to
attributes such as font characteristics.  In this way, even though the
author of a page uses font attributes to simulate headers, a user agent
would be able to simulate moving through headers by matching the font
attributes selected.
The most significant advantage of this strategy is that it requires minimal
understanding of the document structure and command structure by the user.
When the user finds a document section that seems to contain the type of
information of interest, a single command can move to the next similar
element, regardless of the nature of the element under consideration.  A
second command would find the previous element, allowing two-way navigation
throughout the document.
Searching
#26: Search for an element based on its text content (Open)
Searching a document?s contents should be possible by either its text
content, or, given the functionality suggested above, by the attributes of
the content.  When a user enters a web page that, according to their web
search utility, contains information on Koala bears, s/he may wish to locate
the word Koala on the page.  Since the term may be located many screens down
a document, such search facility adds significantly to the usability of a
user agent.
Many authors use in-line markup to indicate elements of interest.  Key words
in a document may be formatted as <strong> to indicate their importance.
Key paragraphs may be formatted in a different font, or with different
indenting. These techniques allow the visual user to quickly identify
significant ideas while scanning through a document.
To provide equivalent access to users with visual impairments, a user agent
should provide the ability to search within a document based on the
attributes of the text as well as the content of text. A user might seek to
find elements with <strong> formatting, or elements with a specific font.




application/msword attachment: Navigation_of_Web_Pages.doc

text/html attachment: Navigation_of_Web_Pages.htm

text/plain attachment: Navigation_of_Web_Pages.txt




