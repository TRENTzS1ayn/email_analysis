docno="lists-084-15195213"
received="Mon Nov 13 21:13:29 2000"
isoreceived="20001114021329"
sent="Mon, 13 Nov 2000 21:09:11 -0500"
isosent="20001114020911"
name="Phill Jenkins/Austin/IBM"
email="pjenkins@us.ibm.com"
subject="Comment on 2.7 unsupported natural languages"
id="OF02BFF44A.BDE0A589-ON86256997.0005503F@raleigh.ibm.com"
charset="iso-8859-1"
expires="-1"

To:w3c-wai-ua@w3.org
Cc:"Richard Schwerdtfeger/Austin/IBM"<schwer@us.ibm.com>,"Catherine Laws/Austin/IBM"<claws@us.ibm.com>


Checkpoint 2.7?Allow the user to configure the user agent not to render
content marked up in a recognized but unsupported natural language.
Indicate to the user in context that author-supplied content has not been
rendered. P3.

This checkpoint is confusing and further clarification is needed.

1. This checkpoint intermixes the terms "recognized" and "supported".   For
example, today IE "recognizes" that a page has Korean text, and that that
support is or isn't installed, and allows the user to install the Korean
text display support.  Korean is only "recognized" because it is also
"supported" but not installed.  I only know of implementations that
"recognize" that a supported language (or character set in this example) is
not installed or turned on.  So if it is "unsupported" it is also
"unrecognized" and degrades to some installed default speech or character
set text rendering. The techniques need to point to referenced
implementations, if there are any, for further clarification.

2.  Is this checkpoint asking for the design of UA's to now add support to
"recognize" what it doesn't fully support AND also add support for
"skipping over by not rendering" that unsupported language content? In
other words, IE wouldn't comply because it has to do more than just notify
the user that there is Korean [which it supports], but it must also allow
the user to choose NOT to render the Korean content as gobbly gook. Besides
these two separate requirements, there seems to be a third implied
requirement to support natural language detection.  First the UA needs to
have support to detect the natural language via the various techniques
listed in the techniques.  If it does support the lang= attribute for
example, then it needs to support notifying the user that it detected a
language code that is unsupported, for example lang="qx".  This unsupported
language code is either a typo supplied by the author - or - a language
truly unsupported, but recognized by the UA.  And thirdly, the UA then must
add support to allow the user to configure it to not render the unsupported
content.  It might be clearer if it were three separate P3 checkpoints.

3.  This is all well and good for "internationalization and
translatability", but I found that neither the guidelines nor the
techniques explain why this is needed for accessibility.  This seems to be
a requirement for a specialized assistive technology.  Perhaps the argument
could be made for reducing confusion by eliminating the gobbly gook
characters, but all three views; graphical, speech, or Braille, would get
the same access to gobbly gook characters. What data do we have that says a
user is more confused by the gobbly gook characters than a message saying
that something is "Unknown language - unable to read".  It would also
prevent access to some of the content that would get rendered in the
unsupported language.  For example, if I don't install the Korean support
in IE, I still get some of the recognizable (at least to an English reader)
English text  So why have a UA checkpoint that is a special assistive
technology requirement to turn off in-line unsupported language?

4.  The other variable not considered in the techniques is in the
synthesizer languages installed by the user.   Neither the user agent nor
the assistive technology may know what languages are supported by the
synthesizer since the user may be allowed to install other language
synthesizers.  So is the checkpoint requiring the UA to dynamically add and
delete support for the supported and unsupported natural languages?

5. If a UA documents which additional languages it supports, and allows the
user to switch to the desired language or configure the UA to automatically
detect and switch to the supported  language - would it fail this
checkpoint but be considered to be more accessible than a UA that doesn't
support any other natural languages than one, but would pass this
checkpoint as not applicable?

Regards,
Phill Jenkins
IBM Research Division - Accessibility Center



