docno="lists-085-1246763"
received="Wed Apr 18 12:17:03 2001"
isoreceived="20010418161703"
sent="Wed, 18 Apr 2001 12:16:05 -0400"
isosent="20010418161605"
name="David Poehlman"
email="poehlman1@home.com"
subject="findings on techniques for navigation"
id="002801c0c822$defc64e0$2cf60141@mtgmry1.md.home.com"
charset="iso-8859-1"
expires="-1"


To:"User Agent Working group list"<w3c-wai-ua@w3.org>

I have two edits and a possible addition.  I am not sure though if the
edition should be in the techniques or in the checkpoint body.
I used the text version drawn from:
http://www.w3.org/TR/2001/WD-UAAG10-TECHS-20010409/
My comments are confined to checkpoint 9.7 and are marked with "dp:"
without the quotes.

   9.7 Allow the user to search within rendered text content for a
          sequence of characters from the document character set. Allow
          the user to start a forward search (in document order) from
any
          selected or focused location in content. When there is a match
          (1) move the viewport so that the matched text content is
          within it, and (2) allow the user to search for the next
          instance of the text from the location of the match. Alert the
          user when there is no match, when the search reaches the end
of
          content, and prior to any wrapping. Provide a case-insensitive
          search option for text in scripts (i.e., writing systems)
where
          case is significant. [Priority 2] Content only. (Checkpoint
          9.7)
          Note: If the user has not indicated a start position for the
          search, the search should start from the beginning of content.
          Use operating environments conventions for indicating the
          result of a search (e.g., selection or content focus). A
          wrapping search is one that restarts automatically at the
          beginning of content once the end of content has been reached.

      Example techniques:

         1. Use the selection or focus to indicate found text. This will
            provide assistive technologies with access to the text.
         2. Allow users to search all views (e.g., including views of
the
            text source).
         3. For extremely small viewports or extremely long matches, the
            entire matched text content may not fit within the viewport.
            In this case, developers may move the viewport to encompass
            the initial part of the matched content.
         4. The search string input method should follow operating
            environment conventions (e.g., for international character
            input).
         5. When the point of regard depends on time (e.g., for audio
            viewports), the user needs to be able to search through
            content that will be available through that viewport. This
is
            analogous to content rendered graphically that is reachable
            by scrolling.
         6. For frames, allow users to search for content in all frames,
            without having to be in a particular frame.
         7. For multimedia presentations, allow users to search and
            examine time-dependent media elements and links in a
            time-independent manner. For example, present a static list
            of time-dependent links.
         8. Allow users to search the element content of form controls
            (where applicable) and any label text.
         9. When searching a document, the user agent should not search
            text whose properties prevent it from being visible (such as
            text that has visibility="hidden"), or equivalent text for
            elements with such properties (such as "alt" text for an
            image that has visibility="hidden").

      Doing more:

         1. If the number of matches is known, provide this information
            to orient the user.
dp: Provide a list of matches that may be nabigated?  This may appear in
the checkpoint or here?
2. It may be confusing to allow users to search for text content
            that is not rendered (and thus that they have not viewed).
If
            this type of search is possible, alert the user of this
            particular search mode.
         3. Allow the following additional search functionalities:
              1. Allow the user to start a search from the beginning of
                 the document rather than from the current selection or
                 focus.
              2. Provide distinct alerts for the situation where the
user
                 has searched through all content or where the user has
                 simply reached the end of the document and needs to
wrap
                 to the beginning.
              3. Allow reverse search so the user doesn't dp: have to
                 start the search from dp: the beginning of the document
if
                 the search goes too far.
              4. Allow the user to easily start a search from the
                 beginning of the content currently rendered in the
                 viewport.
              5. Provide the option of searching through conditional
                 content that is associated with rendered content, and
                 render the found conditional content (e.g., by showing
                 its relation to the rendered content).

Hands-on Technolog(eye)s
Touching The Internet
http://members.home.com/poehlman1/
mailto:poehlman1@home.com
voice: 301.949.7599



