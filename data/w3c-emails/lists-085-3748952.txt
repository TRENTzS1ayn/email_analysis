docno="lists-085-3748952"
received="Fri Jun  1 14:06:27 2001"
isoreceived="20010601180627"
sent="Fri, 01 Jun 2001 13:06:29 -0500"
isosent="20010601180629"
name="Jon Gunderson"
email="jongund@uiuc.edu"
subject="Re: Checkpoint 6.4"
id="4.3.1.2.20010601121343.0294ad30@staff.uiuc.edu"
charset="us-ascii"
inreplyto="OF000D690D.0323023F-ON86256A5D.0071EFFD&#64;raleigh.ibm.com"
expires="-1"


To:"Richard Schwerdtfeger"<schwer@us.ibm.com>,<w3c-wai-ua@w3.org>

I would like to thank everyone who participated in yesterday's 
teleconference and I would like to summarize my view of the results related 
to checkpoint 6.4.

What I Heard:

1. Ideally for read/write access to user interface controls user agent 
developers should use one standard accessibility API to reduce the number 
of API that an assistive technology developer needs to support.

2. Current standard accessibility APIs (.i.e MSAA for the WIndows OS) don't 
always provide the capabilities some assistive technology developers need 
to provide functionality to their users and therefore they develop or use 
other APIs to provide these functionalities.

3. Some operating systems do not have standard accessibility APIs (i.e. 
Apple Macintosh, UNIX/X-Windows)

4. Some user agent developers are developing cross platform technologies 
that make it difficult to support standard operating system accessibility 
APIs and maintain a cross platform code base.

5. We want to support cross operating system inter-operability wherever 
possible

6. We want to support cross application inter-operability wherever possible

What our current checkpoint 4.6 says:

1. Use OS specific accessibility APIs or use a W3C recommendation (i.e. 
DOM) to provide access to user interface controls.
a. The use of W3C recommendations is intended to support cross platform 
accessibility
b. OS specific accessibility APIs provide cross application

Comment: This seems to be somewhat mutually exclusive design goals at this 
point.  We say the developer must choose one.

2. If accessibility APIs are not available and available accessibility APIs 
are not sufficient to satisfy other requirements of UAAG, then publicly 
documented APIs that support accessibility should be used.

Comment: This provides a means for some types of information to be 
communicated to AT, that may not be possible with current OS accessibility 
APIs or through the use of W3C recommendations.

Analysis
It seems like the current checkpoint is the best we can do right now.
The note after could include Rich's suggestion of encouraging the use of 
existing APIs would help clarify the consensus of the group[1] to not 
require AT developers to support a large number of accessibility APIs.

1. Use of accessibility of APIs designed for operating system accessibility 
are preferred over accessibility APIs designed for a specific application 
running on an operating system (i.e. APIs that support cross application 
accessibility)

Comment: This statement implies the use of accessibility APIs that are used 
and tested by current assistive technologies

2. Accessibility APIs should use standards that promote inter-operability 
between platforms

Comment: This statement implies that using open standards will provide 
better tools and resources for AT developers to support an accessibility API

Does this seem to capture the consensus of the group?

Please comment!

Jon

[1] http://lists.w3.org/Archives/Public/w3c-wai-ua/2001AprJun/0231.html
Jon Gunderson, Ph.D., ATP
Coordinator of Assistive Communication and Information Technology
Division of Rehabilitation - Education Services
MC-574
College of Applied Life Studies
University of Illinois at Urbana/Champaign
1207 S. Oak Street, Champaign, IL  61820

Voice: (217) 244-5870
Fax: (217) 333-0248

E-mail: jongund@uiuc.edu

WWW: http://www.staff.uiuc.edu/~jongund
WWW: http://www.w3.org/wai/ua



