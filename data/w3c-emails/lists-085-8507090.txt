docno="lists-085-8507090"
received="Tue Mar 13 15:09:02 2001"
isoreceived="20010313200902"
sent="Tue, 13 Mar 2001 14:11:45 -0600"
isosent="20010313201145"
name="Jon Gunderson"
email="jongund@uiuc.edu"
subject="Issue and techniques for Checkpoint 9.3"
id="4.3.1.2.20010313125109.02bb0ee8@staff.uiuc.edu"
charset="us-ascii"
expires="-1"


To:w3c-wai-ua@w3.org

The following outlines my understanding of Checkpoint 9.3.  I encourage 
people to read, respond and add to my statements.

Part A: List of user interface event handlers that typically automatically 
execute scripts:

1. Event handlers typically automatically executed when focus changes using 
the keyboard
onBlur
onFocus
onChange

2. Event handlers typically automatically executed when a pointing device 
is moved into and out of an elements box
onMouseOut
onMouseOver
onMouseMove

Part B: What are common accessibility problems that this feature would 
reduce or eliminate
Scenario 1. onChange is a big problem in conjunction with a SELECT 
element.  As a user tries to move between OPTIONS the onchange script often 
takes them to a new resource.  The user therefore can not get to all the 
items in the SELECT box.

My guess is that onFocus and onBlur are used infrequently on the Web since 
most authoring tools do not support them in their automatic script 
generation and most users do not even know there are keyboard commands to 
control their browser.  May want to look at how current scripting used with 
the pointer would be problematic if it supported keyboard based events.


Part C: Expected behavior as focus moves between enabled active elements

1. Enabled active elements still receive focus, only their automatically 
triggered event handlers are disabled

2. User can query or be alerted to the event handlers available

3. User can select an event handler to execute

4. Event handler passes element information through the event object (i.e. 
pointer position, button press, ...)

5. Possible techniques for implementation

Technique 1: Sequential Access. The TAB key is used to also navigate the 
User Interface event handlers for an element.  Each user interface event 
handler would have a tab stop (as would also a link, if the element was 
also a link).  The status line would show the event for that tab stop.  The 
user could trigger the event by pressing the ENTER key.

Technique 2: Query Access: The TAB key is used to move between enabled 
active elements.  The user can do a contextual query of the element (right 
click on the pointer or Shift-F10 from the keyboard) to get a list of the 
attributes of the element.  The attributes include event 
handlers.  Selecting an event handler from the list activates the event 
handler.

Note: In addition to alerting the user to the UI events with event 
handlers, the name of the function associated with the event handler could 
also be provided to the user.







Jon Gunderson, Ph.D., ATP
Coordinator of Assistive Communication and Information Technology
Division of Rehabilitation - Education Services
MC-574
College of Applied Life Studies
University of Illinois at Urbana/Champaign
1207 S. Oak Street, Champaign, IL  61820

Voice: (217) 244-5870
Fax: (217) 333-0248

E-mail: jongund@uiuc.edu

WWW: http://www.staff.uiuc.edu/~jongund
WWW: http://www.w3.org/wai/ua



