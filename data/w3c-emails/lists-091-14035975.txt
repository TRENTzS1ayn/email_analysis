docno="lists-091-14035975"
received="Wed Oct  2 21:35:33 2002"
isoreceived="20021003013533"
sent="Thu, 3 Oct 2002 11:35:25 +1000"
isosent="20021003013525"
name="Jason White"
email="jasonw@ariel.ucs.unimelb.edu.au"
subject="RE: activation / focus and users Re: Access Key"
id="15771.40669.258609.628229@jdc.local"
charset="us-ascii"
inreplyto="002401c26a90$04adf760$09c10681&#64;GV6101"
expires="-1"


To: wai-xtech<wai-xtech@w3.org>


The following was originally sent to PF; having read the subsequent
discussion on xtech I think my comments still apply, however.

I propose that two requirements should be placed on user agents with
respect to access keys:

1. that every access key defined in a document can be activated by the
   user. Specifically this means that there must be some mechanism by
   which the Unicode character given as the value of the attribute can
   be entered.

2. that a mechanism be provided whereby the mapping of access keys to
   elements within the document can be exposed in the user interface.

If there are duplicate access keys in a single document, one can
either provide that the first (or the last) should take precedence, or
leave this as an implementation-defined or unspecified behaviour.

Everything else, including whether an access key activates a link or
merely shifts the focus, should be implementation-defined.

It might also be useful to draw a distinction between (1) features and
behaviours which are defined in the specification and must be
implemented for purposes of conformance; (2) behaviours which are
implementation-defined, and must be documented as part of a
conformance claim; and (3) behaviours which are unspecified, hence
entirely within the realm of the implementor's discretion
and need not be documented as part of a claim of conformance.

If such a distinction were made, then I would suggest that the
behaviour of access keys (specifically whether they activate the
element or merely shift focus) should be implementation-defined rather than
unspecified, according to the above definitions.

Obviously, some flexibility is needed here, and one can envisage
various aspects of the required behaviour as amenable to user
configuration preferences. This is why the requirements of the
specification should be minimal.



