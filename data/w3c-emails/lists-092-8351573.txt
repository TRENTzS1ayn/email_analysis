docno="lists-092-8351573"
received="Wed May  3 02:25:38 2000"
isoreceived="20000503062538"
sent="Wed, 03 May 2000 08:25:19 +0200"
isosent="20000503062519"
name="Irene VATTON"
email="Irene.Vatton@inrialpes.fr"
subject="Re: memory deallocation bug"
id="200005030625.IAA01173@tahiti.inrialpes.fr"
charset="us-ascii"
inreplyto="20000501195915.1650.qmail&#64;my-deja.com"
expires="-1"


To:bglbv@my-deja.com
cc:www-amaya-dev@w3.org

> Following up on my earlier report of memory problems: it turned out to be a
> code generation bug in gcc. The gcc maintainers will have the report as soon
> as I find a way of getting past the message size limit on their mailing list.
> 
> Meanwhile, here is a patch that doesn't confuse gcc and saves two lines
> of source code (at no loss in functionality).
> 
> --- pristine/Amaya/thotlib/view/boxrelations.cMon Apr 17 12:05:22 2000
> +++ ./Amaya/thotlib/view/boxrelations.cMon May  1 20:48:38 2000
> @@ -2372,11 +2372,9 @@
>       while (j < MAX_RELAT_POS)
>         {
>    k = j + 1;
> -  pPosRel->PosRTable[j - 1].ReBox = pPosRel->PosRTable[k - 1].ReBox;
> -  pPosRel->PosRTable[j - 1].ReRefEdge = pPosRel->PosRTable[k - 1].ReRefEdge;
> -  pPosRel->PosRTable[j - 1].ReOp = pPosRel->PosRTable[k - 1].ReOp;
> +  pPosRel->PosRTable[j - 1] = pPosRel->PosRTable[k - 1];
>    if (pPosRel->PosRTable[k - 1].ReBox == NULL)
> -     j = MAX_RELAT_POS;
> +     break;
>    else
>      {
>         j++;
> 

Ok, I patched the code, but I'm surprised that gcc has trouble with this code.
Thanks
-- 
     Irene.



