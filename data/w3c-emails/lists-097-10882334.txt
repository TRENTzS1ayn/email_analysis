docno="lists-097-10882334"
received="Tue Dec 18 18:03:11 2001"
isoreceived="20011218230311"
sent="Wed, 19 Dec 2001 00:02:30 +0100"
isosent="20011218230230"
name="Frank van Harmelen"
email="Frank.van.Harmelen@cs.vu.nl"
subject="Re: UPDATE: initial message concerning syntax"
id="3C1FCB06.B08278D7@cs.vu.nl"
charset="us-ascii"
inreplyto="p05100303b84503c30cdb&#64;[137.108.24.52]"
expires="-1"


To: Enrico Motta<e.motta@open.ac.uk>
CC:pfps@research.bell-labs.com,phayes@ai.uwf.edu,jjc@hplb.hpl.hp.com,horrocks@cs.man.ac.uk,mdean@bbn.com,lynn.stein@olin.edu,hendler@cs.umd.edu,connolly@w3.org,www-archive@w3.org

Enrico,

As you might guess, I disagree with what you wrote.
Of course, surface syntax should not give false impressions,
but I don't think this will be the case here:

Some of the typical DAML+OIL idiom corresonds >*exactly*< with the usual frame-based constructions. (for example the locally defined range-striction on a slot, which I used as example in my msg; same for cardinality constraints; same for "defined"-classes; etc).

Your point about behaviour requires more thinking, I agree:

> Even when dressed as a frame system a DL will always
> behave as a DL (with anonymous classes and automatic
> re-classification)

I know that Stefan Decker has been thinking about a restricted semantics of DAML+OIL which would indeed only deal with named classes (for instance to classify instances). 

So, in my view, there are two issues, one easy, one hard, both important:

- (easy): define frame-based modelling-idiom as syntactic constructions for DAML+OIL
- (hard): try to think what DAML+OIL would look like if it only dealt with named classes

Frank.
   ----



