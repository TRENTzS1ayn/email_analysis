docno="lists-097-11000193"
received="Thu Dec 20 10:16:49 2001"
isoreceived="20011220151649"
sent="Thu, 20 Dec 2001 10:15:53 -0500"
isosent="20011220151553"
name="Peter F. Patel-Schneider"
email="pfps@research.bell-labs.com"
subject="Re: UPDATE: initial message concerning syntax"
id="20011220101553N.pfps@research.bell-labs.com"
charset="us-ascii"
inreplyto="OF66D949BA.5434D089-ONC1256B23.004AF46A&#64;bayer-ag.com"
expires="-1"

To:jos.deroo.jd@belgium.agfa.com
Cc:las@olin.edu,phayes@ai.uwf.edu,jjc@hplb.hpl.hp.com,Frank.van.Harmelen@cs.vu.nl,horrocks@cs.man.ac.uk,mdean@bbn.com,lynn.stein@olin.edu,www-webont-wg@w3.org,www-archive@w3.org,hendler@cs.umd.edu,connolly@w3.org


From: jos.deroo.jd@belgium.agfa.com
Subject: Re: UPDATE: initial message concerning syntax
Date: Sat, 15 Dec 2001 14:43:29 +0100

> Hi Peter,
> 
> [...]
> 
> I think SWOL is really nice.
> In the RDF/RDFS MT we have, among other things, a bunch
> of entailment rules. I think SWOL should just extend that
> idea via additional SWOL entailment rules.
> So using SWOL vocabulary brings extra SWOL entailment rules.
> Let's start with a simple example:
> 
>   :Person a swol:Class; swol:disjointUnionOf ( :Man :Woman ) .
> 
> where the range of swol:disjointUnionOf a list of classes
> (and it is always a list, even when it is a singleton)
> Now we can entail stuff via following entailment rule
> for all :C, :D, :L, :x
> 
>   { :C swol:disjointUnionOf :L . :L :member :D . :x a :D  }
>     log:implies { :x a :C } .
> 
> (maybe we should also add { :L a swol:List } to the LHS)
> and for :member one has also entailment rules
> for all :x, :a, :b
> 
>   ( :x / :b ) :member :x .
>   { :b :member :x } log:implies { ( :a / :b) :member :x } .
> 
> where ( :x / :y ) is syntactic sugar for
> [ a swol:List; swol:first :x; swol:rest :y ]
> 
> I think if we can do that for all SWOL vocabulary
> there should be no trouble for SWOL entailment
> and actually for ANY entailment.

Unfortunately, as I have already indicated in several places, this approach
does not work, or, at best, only works with a lot of difficulty and
fiddling.  To make it work correctly you have to include a full theory of
lists and other syntactic constructions in your theory.  Once this is done,
semantic paradoxes, or, if you prefer, the ability to derive a
contradiction from the empty knowledge base, are very hard to avoid.
Even if the whole formalism does not fail, there are quite a number of
related issues that affect interpretations and inference.

> It is also interesting to use SWOL vocabulary for
> RDFS entailment rules e.g.
> 
>   rdfs:subPropertyOf a swol:TransitiveProperty .
>   rdfs:subClassOf a swol:TransitiveProperty .
> 
> instead of the RDF/RDFS MT rules rdfs5 and rdfs8.
> (just as we already use log:implies) so it's
> not hierarchically layered, but wild web like :-)

It is precisely this absence of layering that opens up the possiblity of
semantic problems.

> --
> Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/

peter



