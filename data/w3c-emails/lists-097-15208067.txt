docno="lists-097-15208067"
received="Sun Jun 17 21:49:52 2001"
isoreceived="20010618014952"
sent="Sun, 17 Jun 2001 20:14:58 -0400"
isosent="20010618001458"
name="Geoff Chappell"
email="geoff@sover.net"
subject="Re: Inference in daml"
id="04cb01c0f78b$b5c86d60$835ec6d1@goat"
charset="iso-8859-1"
inreplyto="09c101c0f793$37745d40$66da93c3&#64;z5n9x1"
expires="-1"


To:"Sean B. Palmer"<sean@mysterylights.com>
Cc:<www-archive@w3.org>


----- Original Message -----
From: "Sean B. Palmer" <sean@mysterylights.com>
To: "Geoff Chappell" <geoff@sover.net>
Cc: <www-archive@w3.org>
Sent: Sunday, June 17, 2001 8:59 PM
Subject: Re: Inference in daml


> Taking this off-list (actually, to www-archive) because my
> understanding is a bit murky from here on in...
>
Thanks for sticking with it.

> > But can't you make use of logical equivalents? i.e. "p->q" has
> > the same truth table as "q or not p" -- which can be expressed
> > in daml.
>
> But I think that once you go from "p->q" to "q or not p" which in DAML
> is more like "union of q and the compliment of p" as you have
> demonstrated, you can only rely on the semantics (i.e. rules,
> inferences) of DAML to provide the implications, because it lacks the
> terms required to become a full FOL language.

I guess that's what I'm trying to figure out - whether it really does lack
the terms required to become a full FOL language. If it has implication,
universal and existential quantification (via toClass and hasClass), boolean
operations and negation, can't it express FOL (albeit in a cumbersome
fashion)? (BTW, I don't know the answer to that question - either whether it
truly has those features or if they are sufficient to claim FOL-ness).

>DAML is there to provide
> a simple ontology framework, not to state the full range of inferences
> up front. It does howver provide you with enough terms to create
> simple statements from which many inference rules can be derived.
>
I understand that the primary intent of daml (at this point anyway) is not
to provide a basis for a full-fledged inference system. Whether the
designers intended it to be and whether it is are different questions.

> > The question is, if you express the rule in that form (by defining
> > a class of things that are q or not p and say that all things are
> > members of that class) will a processor that correctly interprets
> > the semantics of the daml language necessarily interpret the rule
> > as an implication?
>
> It should do, but in general RDF inference engines, you'll probably
> have to feed the rules in yourself, which is useful because
> practically you only want to come to one particular conclusion,
> although you could quite easily generate hundreds of others. The
> complication arises when you want one particular bit of information,
> but have to go through several different inferences to get there,
> which you don't care about (i.e. don't want on the output).

My interest really isn't in having a daml-speaking system be able to do
inference (though I think that by claiming to fully support daml such a
system would have to). I'm more interested in understanding if daml can
provide a firm semantic base for rule interchange between different systems.
So rules in prolog,datalog,etc can be serialized in daml and reliably,
predictably and without loss of meaning be deserialized by n3/cwm or some
other logic system. Not sure it would really make sense to do so - just
exploring the possibility...

>
> Once again, TimBL's log namespace, DAML, and RDF Schema make a
> powerful mix.
>
I haven't really played with it. I'm sure it does has the necessary
expressive power (when interpreted by a system that understands log
namespace). I'm just not clear where it's going - is it trying to become a
knowledge representation language or a logic system? is it anticipated that
n3 will become the interchange standard which all other logic systems must
speak? what's the relationship to the current rdf standards process? etc.

--geoff



