docno="lists-097-15219516"
received="Mon Jun 18 09:34:44 2001"
isoreceived="20010618133444"
sent="Mon, 18 Jun 2001 14:35:28 +0100"
isosent="20010618133528"
name="Sean B. Palmer"
email="sean@mysterylights.com"
subject="Re: Inference in daml"
id="001401c0f7fb$ac448ec0$e0ec93c3@z5n9x1"
charset="iso-8859-1"
inreplyto="04cb01c0f78b$b5c86d60$835ec6d1&#64;goat"
expires="-1"


To:"Geoff Chappell"<geoff@sover.net>
Cc:<www-archive@w3.org>,"Seth Russell"<seth@robustai.net>

> I guess that's what I'm trying to figure out - whether it really
> does lack the terms required to become a full FOL language.
> If it has implication, universal and existential quantification (via
> toClass and hasClass),

How are toClass and hasClass universal and existential qualifiers?
DAML doesn't have the notion of a variable; they're parts of a
restriction, not a logical construct.

> boolean operations and negation,

You can have the cardinality constraints, but where's the negation?
How do you assert that a statement is false in DAML? For a start, to
make logical expressions in DAML, you would need an "AND", and to do
that you'd need to group reified statements, i.e. a context.

> (BTW, I don't know the answer to that question - either
> whether it truly has those features or if they are sufficient
> to claim FOL-ness).

Neither do I, but my gut feeling tells me that it's just an ontology
and inference language, not a full first order logic language. For
that, you need truths, implications, a universal/existensial
qualification, and you need those as first class predicates and
classes, not as things that are just inferrable from the language.

For example, how would you do the following in DAML:-

   { { :x :a [ :b :c; :d :h ] } log:implies { :b :c :d }}
   a log:Truth; log:forAll :b , :d .

I don't think it can be done.

[...]
> I'm more interested in understanding if daml can provide a
> firm semantic base for rule interchange between different
> systems. So rules in prolog,datalog,etc can be serialized in
> daml and reliably, predictably and without loss of meaning
> be deserialized by n3/cwm or some other logic system. Not
> sure it would really make sense to do so - just exploring the
> possibility...

It would be neat to have some kind of universal logic language for the
Semantic Web, so that some of the terms in DAML could, for example, be
expressed properly rather than in prose, and so that we could build
proper conversion machines, but I don't think it's going to happen
soon. I keep hearing the word "SWeLL" in the air, but I don't know
where that's going. The SW actually moves quite slowly at the moment.

> > Once again, TimBL's log namespace, DAML, and RDF Schema
> > make a powerful mix.
>
> I haven't really played with it. I'm sure it does has the necessary
> expressive power (when interpreted by a system that understands
> log namespace). I'm just not clear where it's going - is it trying
to
> become a knowledge representation language or a logic system?

DAML seems to come from many of the KR people, and the log namespace
is something purely from TimBL to play about with (understood natively
only by CWM).

> is it anticipated that n3 will become the interchange standard which
> all other logic systems must speak?

No. N3 is a "poor man's RDF modelling language" (paraphrasing DanC),
but I can (kinda) be serialized into XML RDF. XML RDF is to be the
standard interchange format that all logic systems speak
(hopefully)...

> what's the relationship to the current rdf standards process?

Notation3 is purely a hack from Tim and Dan, but a good hack. CWM is
quite easily the most advanced query/inference engine that has come
from the SW efforts so far (except perhaps XSB which can be used in a
similar way), and because it has FOL and so forth, you an do quite a
lot with it. But it's also a little bit buggy - Tim seems to have gone
for cramming it with features rather than optimizing it for stability
and speed, which is fine because it's mainly for demonstration at the
moment.

--
Kindest Regards,
Sean B. Palmer
@prefix : <http://webns.net/roughterms/> .
:Sean :hasHomepage <http://purl.org/net/sbp/> .



