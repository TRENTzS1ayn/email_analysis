docno="lists-097-15315779"
received="Mon Jun 25 15:19:30 2001"
isoreceived="20010625191930"
sent="Mon, 25 Jun 2001 15:19:30 -0400 (EDT)"
isosent="20010625191930"
name="Dan Brickley"
email="danbri@w3.org"
subject="danbri xml proc notes"
id="Pine.LNX.4.30.0106251518260.23217-100000@tux.w3.org"
charset="US-ASCII"
expires="-1"

To:<www-archive@w3.org>


xml processing workshop position paper, dan brickley, june 2001.

RDF Schemas and the XML Processing model: schema language pluralism for
XML data exchange.

This paper proposes an account of the role RDF Schema processing may play
in the XML world. Due to space limitations, some background knowledge of
RDF and RDF Schema is assumed.

In recent years, the notion of the XML infoset has come to prominance as a
unifiying formalism for the XML family of specifications. XML as
originally defined was simply a file format; XML documents are sequences
of characters, structured using '<'' and '>'. By introducing the notion of
the XML Infoset, we can move beyond this, and give a name to the more
abstract entities (tree-shaped data structures) that really constitute
xml. In one formulation, 'XML documents are the means by which XML
Infosets reproduce themselves'. This view also erves to remind us that
xml is a means to an end, and not an end in itself.

Meanwhile, many communities have been using XML documents to write down
their own data structures using '<', '>', and the elements, attributes and
namespacing mechanisms shared by all XML applications. Some of these
applications of XML are themselves generic data structuring systems, and
(like the Infoset), can be thought of as merely using XML as a transfer
sytax. SVG is 'written in' XML; XML Topic Maps are 'only XML when they're
not being used'; RDF developers focus on its non-anglebracketty abstract
information model rather than its representation in markup.

There is a parallism here: just as the XML infoset exploits angle-brackets
to reproduce itself, other data structures in turn exploit the XML infoset
to reproduce themselves.

The focus of this paper is on the limits of general XML processing: how
do events in the lifecycle of these applications that merely "use" the
Infoset relate to the events anticipated to be useful to all XML-based
systems. This theme recurs in various contexts: when should we use XLink
to express relationships, rather than some other XML vocabulary. When
should we describe composite document structures using XInclude versus
using some other mechanism? Do we risk babel by opting out of these
universal

infoset merging,data aggregation
rdf - what an infoset tells you
xml - schema , definc



