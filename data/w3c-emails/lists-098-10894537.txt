docno="lists-098-10894537"
received="Fri Mar 29 17:18:13 2002"
isoreceived="20020329221813"
sent="Fri, 29 Mar 2002 17:17:37 -0500"
isosent="20020329221737"
name="Tim Berners-Lee"
email="timbl@w3.org"
subject="Re: Patel-Schneider Paradox ..."
id="015501c1d76f$88b9bc60$c4061812@CREST"
charset="iso-8859-1"
inreplyto="20020118091722L.pfps&#64;research.bell-labs.com"
expires="-1"


To:"\"Peter F. Patel-Schneider\""<pfps@research.bell-labs.com>
Cc:<www-archive@w3.org>

Peter,

I feel that I have, though lack of time, not to mention
background and ability, failed to get mind loaded with the
thinking behind your paradox.

The most concise definition I could find with Google
was in
http://lists.w3.org/Archives/Public/www-webont-wg/2002Jan/0099.html
and nearby.

With respect to the set of triples
> _:1 rdf:type owl:Restriction .
> _:1 owl:onProperty rdf:type .
> _:1 owl:maxCardinalityQ "0" .
> _:1 owl:hasClassQ _:2 .
> _:2 owl:oneOf _:3 .
> _:3 owl:first _:1 .
> _:3 owl:rest owl:nil .
> _:1 rdf:type _: 1 .

you say, "The question is whether the above collection of triples is
entailed by an empty collection of triples."

How would that be entailed?  Certainly, the owl:first and owl:rest triples
are
axiomatically true.  However, looking at it naively, that set of triples
is indeed inconsistent, but I don't see why they should have the status of
a paradox. Why should be inference engine believe them and more
than it believes anything else inconsistent?  Is there a set
of rules for constructing classes which exist consistently from a vacuum?

In Russell's paradox, why must one consider the class of
classes which are not members of themselves?  What forces
one to fall prey to it?  I thought it was the assumption that
for every thing and every class that thing had to be either a member
or not a member, akin to the idea that all sentences are either true
or false.  If you drop that requirement, then the paradox just sits
there.

I realize I'm asking you a big favor to reiterate this, and that I would
probably know why had I studied the lists more effectively.

Tim



