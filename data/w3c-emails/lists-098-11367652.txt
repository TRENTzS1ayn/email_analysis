docno="lists-098-11367652"
received="Sun Nov  3 14:10:02 2002"
isoreceived="20021103191002"
sent="Sun, 3 Nov 2002 14:09:58 -0500 (EST)"
isosent="20021103190958"
name="Dan Brickley"
email="danbri@w3.org"
subject="Mozilla XUL &lt;-&gt; Squish thing workie"
id="Pine.LNX.4.30.0211031405340.12319-100000@tux.w3.org"
charset="US-ASCII"
expires="-1"

To:<libby.miller@bris.ac.uk>,<eric@w3.org>, Damian Steer<D.M.Steer@lse.ac.uk>
cc:<www-archive@w3.org>




http://www.w3.org/2001/sw/Europe/200209/xul/simple/

squish2xul.rb > _simple.xul

...generates XUL that Mozilla's happy with and displays in a pretty table
 widget.

Code snippet below. Is almost useful, except I don't explain anywhere the
role that several things play w.r.t. XUL (see comments in code).

Dan



  query = SquishQuery.new().parseFromText <<EOQ
   SELECT ?uri, ?bugs, ?bug,
   WHERE(b::bugs ?uri ?bugs)
  (rdfs::member ?bugs ?bug)
(b::id ?bug ?id)
(b::component ?bug ?component)
(rss::title ?bug ?rsst)
 USING  b FOR http://www.bugzilla.org/rdf#
rss FOR http://purl.org/rss/1.0/
 rdfs FOR http://www.w3.org/2000/01/rdf-schema#

EOQ


  xul = XULData.new
  xul.src_data = 'http://bugzilla.mozilla.org/duplicates.cgi' #what is
this?

  xul.columns = [
              {'id'=>'id', 'label'=>'ID'},
              {'id'=>'component', 'label'=>'Component Name'},
              {'id'=>'rsst', 'label'=>'Title'},
             ]
  xul.root='?uri'
  xul.itemvar='?bug' # what do these do?

  top = xul.wrapper
  tree = xul.toXULTree query
  window = top + tree + "\n</window>\n\n"



