docno="lists-098-11376991"
received="Sun Nov  3 14:45:55 2002"
isoreceived="20021103194555"
sent="Sun, 3 Nov 2002 14:45:51 -0500 (EST)"
isosent="20021103194551"
name="Dan Brickley"
email="danbri@w3.org"
subject="Re: Mozilla XUL &lt;-&gt; Squish thing workie"
id="Pine.LNX.4.30.0211031445010.12319-100000@tux.w3.org"
charset="US-ASCII"
inreplyto="Pine.GSO.4.44.0211031932150.13886-100000&#64;mail.ilrt.bris.ac.uk"
expires="-1"

To: Libby Miller<Libby.Miller@bristol.ac.uk>
cc: eric<eric@w3.org>, Damian Steer<D.M.Steer@lse.ac.uk>, www-archive<www-archive@w3.org>




Yeah, you have to do it locally...

On Sun, 3 Nov 2002, Libby Miller wrote:

>
> this looks very cool.
> I can't seem to load it from the web. Locally, with the generated file
> modified to refrence a local version of simple.xml, I get ID,
> component name, title as the titles of columns but no data. Am I missing
> something obvious?
>
> Libby
>
>
> On Sun, 3 Nov 2002, Dan Brickley wrote:
>
> >
> > http://www.w3.org/2001/sw/Europe/200209/xul/simple/
> >
> > squish2xul.rb > _simple.xul
> >
> > ...generates XUL that Mozilla's happy with and displays in a pretty table
> >  widget.
> >
> > Code snippet below. Is almost useful, except I don't explain anywhere the
> > role that several things play w.r.t. XUL (see comments in code).
> >
> > Dan
> >
> >
> >
> >   query = SquishQuery.new().parseFromText <<EOQ
> >    SELECT ?uri, ?bugs, ?bug,
> >    WHERE(b::bugs ?uri ?bugs)
> >   (rdfs::member ?bugs ?bug)
> > (b::id ?bug ?id)
> > (b::component ?bug ?component)
> > (rss::title ?bug ?rsst)
> >  USING  b FOR http://www.bugzilla.org/rdf#
> > rss FOR http://purl.org/rss/1.0/
> >  rdfs FOR http://www.w3.org/2000/01/rdf-schema#
> >
> > EOQ
> >
> >
> >   xul = XULData.new
> >   xul.src_data = 'http://bugzilla.mozilla.org/duplicates.cgi' #what is
> > this?
> >
> >   xul.columns = [
> >               {'id'=>'id', 'label'=>'ID'},
> >               {'id'=>'component', 'label'=>'Component Name'},
> >               {'id'=>'rsst', 'label'=>'Title'},
> >              ]
> >   xul.root='?uri'
> >   xul.itemvar='?bug' # what do these do?
> >
> >   top = xul.wrapper
> >   tree = xul.toXULTree query
> >   window = top + tree + "\n</window>\n\n"
> >
> >
> >
> >
>



