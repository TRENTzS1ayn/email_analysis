docno="lists-098-12293097"
received="Tue Nov 26 13:39:14 2002"
isoreceived="20021126183914"
sent="Tue, 26 Nov 2002 18:39:12 +0000 (GMT)"
isosent="20021126183912"
name="Ian Hickson"
email="ian@hixie.ch"
subject="Re: Understanding RDF"
id="Pine.LNX.4.21.0211261812390.4582-100000@dhalsim.dreamhost.com"
charset="US-ASCII"
inreplyto="707FEF0D-016A-11D7-AAEC-003065F376B6&#64;aaronsw.com"
expires="-1"

To: Aaron Swartz<me@aaronsw.com>
Cc:"www-archive@w3.org"<www-archive@w3.org>



On Tue, 26 Nov 2002, Aaron Swartz wrote:
> 
> You represent you by giving yourself a URI

Which URI?


> and then saying stuff about it
> 
>   p:Hixie rdf:type foaf:Person .
>   p:Hixie foaf:homepage <http://index.hixie.ch/> .
>   p:Hixie dc:title "Ian Hickson" .

So URIs all represent further resources, some of which can also be used to
describe relationships?

If you go deep enough, can you end up with statements in the form:

   a:foo a:foo a:foo .

...? I guess I'm trying to work out how much knowledge you have to give an
RDF system, and how much it can work out for itself.

If there are just three types in RDF, namely resources with URIs,
resources without URIs, and strings, then how do you say things about
strings? How do you distinguish between a string and a resource's URI in
the XML serialisation?


> "about" (which really should be rdf:about) is pointing to the URI of
> the subject. I don't see resource here but similarly it points to the
> object.

Wow, that seems excessively verbose.

So to say "data:,1" "http://example.net/isa" "http://example.net/number" I
would say what?

   <rdf:Description
     rdf:about="data:,1"
     rdf:resource="http://example.net/number"/>

...?

No, that doesn't work.

How does n3 map to XML-based RDF?


> The date is in standard W3CDTF format[1].

So there is no RDF-based way of reifying a date? For example, if I have
two statements in the form:

   foo:a bar:born "1970-01-01T00:00:01Z" .
   foo:b bar:born "1970-01-01T00:00:02Z" .

...can my generic RDF engine derive:

   foo:a bar:born-before foo:b .

...? (Does this even make sense?)


> A Description is basically an element saying "OK, I'm gonna start
> making RDF statements now, watch out". You subclass when an existing
> term is useful but not specific enough (like you might make a loc:issn
> subproperty of dc:identifier because dc:identifier is pretty vague).

Ok, that makes sense. Is there anything to prevent:

   a:foo rdfs:subPropertyOf a:bar .
   a:bar rdfs:subPropertyOf a:foo .

...?


> What do you want to tell?

Well, if I tell my RDF engine to give me all things that are a:foos, will
it also get things that are subclasses of a:foos?


> > Basically, the theory is great, but how do I actually _use_ this thing.
> 
> 1. provide information
> 2. parse the information
> 3. build cool apps that use the information
> 
> Same as any other format, I think.

Ok, so if it is a data handling format, how is it better than specialised
MySQL databases?


Thanks, by the way, this is really helping with my understanding.

-- 
Ian Hickson                                      )\._.,--....,'``.    fL
"meow"                                          /,   _.. \   _\  ;`._ ,.
http://index.hixie.ch/                         `._.-(,_..'--(,_..'`-.;.'



