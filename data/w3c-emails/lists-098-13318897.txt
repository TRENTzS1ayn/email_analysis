docno="lists-098-13318897"
received="Fri Oct 25 13:37:33 2002"
isoreceived="20021025173733"
sent="Fri, 25 Oct 2002 12:37:30 -0500"
isosent="20021025173730"
name="Aaron Swartz"
email="me@aaronsw.com"
subject="reification examples"
id="700D74B1-E840-11D6-A567-003065F376B6@aaronsw.com"
charset="US-ASCII"
expires="-1"

To:www-archive@w3.org



Reification can be thought of like quoting. Just like how putting 
quotes around a bunch of text turns it into something we can talk 
about, rather than use to talk, reifying a triple turns it into an RDF 
resource so we can talk about it.

Compare:

"I like donuts," said John.
{:John :likes :donuts} :says :John .

"I like donuts" and {:John :likes :donuts} are both valid statements on 
their own, but we quote them above (and in this sentence) so we can 
talk about them. Also like English, even when the contents of the 
reification are the same, you can't merge the nodes. If you heard:

"we are engaged in a great civil war" was said on November 19, 1863.
"we are engaged in a great civil war" John said.

You wouldn't conclude that John said it in 1863. Similarly, from:

{:US :engagedIn :CivilWar} :saidOn "1863-10-19" .
{:US :engagedIn :CivilWar} :saidBy :John .

you can't merge the two reification nodes and conclude:

{:US engagedIn :CivilWar} :saidOn "1863-10-19"; :saidBy :John .

In this sense, a reification refers to a specific instance of a triple, 
not the abstract triple itself.

Here's a more interesting example:

{ :1WeekFetuses rdfs:subClassOf :People } :says :ProLifersInternational 
.
{ :1WeekFetuses daml:disjointFrom :People} :says 
:ProChoicersInternational .
{ :ProLifersInternational rdf:type :UntrustworthyOrganization} :says 
:DemocraticParty .
:ShellyP rdf:type :Democrat .

{ ?x says :DemocraticParty . ?person rdf:type :Democrat } => { ?person 
:probablyBelieves ?x } .

-- 
Aaron Swartz [http://www.aaronsw.com] "Curb your consumption," he said.



