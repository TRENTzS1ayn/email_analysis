docno="lists-098-1378859"
received="Mon Sep  3 14:21:12 2001"
isoreceived="20010903182112"
sent="Mon, 3 Sep 2001 14:21:10 -0400 (EDT)"
isosent="20010903182110"
name="Dan Brickley"
email="danbri@w3.org"
subject="Re: Working RDF query client using Apache Axis"
id="Pine.LNX.4.30.0109031409171.8261-100000@tux.w3.org"
charset="US-ASCII"
inreplyto="01de01c13493$1b260d40$6b00a8c0&#64;ne.mediaone.net"
expires="-1"

To: Glen Daniels<gdaniels@macromedia.com>
cc:<libby.miller@bris.ac.uk>,<www-archive@w3.org>



On Mon, 3 Sep 2001, Glen Daniels wrote:

> > Seems to work. The 3rd argument to the server specifies the serialization
> > policy (ie. whether to use the Map construct); this may turn out to be an
> > interop headache, dunno.
>
> We're thinking of adding a convenience function which will deserialize
> everything it doesn't understand by default as a HashMap of element->content
> (content = String or another HashMap), which is probably something like what
> SOAP::Lite does too.  Not in yet, though.

That could be rather useful. I'm also tempted to lobby for an RDF view of the
data, since RDF's model is kind of like a glorified hash of hashes. See
Edd Dumbill's comments in http://edd.oreillynet.com/stories/storyReader$65
for a variant on that idea:

[[
I think of XML schemas as a C struct, or a Java class -- there's
centralized control and no extensibility mechanism. The plus side is it's
simple for applications.

My main reason for suggesting RSS is better reformulated in RDF is
precisely that there are no limits what can go in. In programming language
terms, RDF is a Perl hash or a Java Hashtable. The processing application
is responsible for figuring out which bits it wants and which it doesn't
-- a little more complicated than the schema situation.
]]

...by "lobby for", I mean: help design, if doing so makes sense.

For a taster of what a Java RDF API can look like (the graph stuff not
query) you might find Jena interesting. See:
http://www-uk.hpl.hp.com/people/bwm/rdf/jena/
http://www-uk.hpl.hp.com/people/bwm/rdf/jena/rssinjena.htm
...or a recent xml.com article:
http://www.xml.com/lpt/a/2001/05/23/jena.html

Dunno if that'll leave you cold or not; guess it depends what your mental
model of the SOAP pt5 structure is. If you're thinking of pouring it all
into a hash-of-hashes, I suspect RDF might even prove useful.

> How's this (didn't run it, btw):

> package org.w3c.inkling.soap;

[snip]

Thanks; I've also tidied mine up a bit since then. Am working on
integrating it with Libby's all-in-Java JDBC-based interfaces. Will fwd
you a copy for interest.

cheers,

Dan



