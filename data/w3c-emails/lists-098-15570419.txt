docno="lists-098-15570419"
received="Wed Sep 18 13:59:36 2002"
isoreceived="20020918175936"
sent="Wed, 18 Sep 2002 13:59:04 -0400"
isosent="20020918175904"
name="Joseph Reagle"
email="reagle@mit.edu"
subject="Re: [RSS-DEV] Re: Time for a name change?"
id="200209181359.04391.reagle@mit.edu"
charset="iso-8859-1"
inreplyto="EBEPLGMHCDOJJJPCFHEFCECDHNAA.danny666&#64;virgilio.it"
expires="-1"

To:rss-dev@yahoogroups.com,"Danny Ayers"<danny666@virgilio.it>,"e_vitiello_jr"<yahoo@perceive.net>



On Wednesday 18 September 2002 12:34 pm, Danny Ayers wrote:
> ps. what does 'amortized' mean?

Updated!

http://goatee.net/2002/09#_18we
?02.09.18.we | design is like a mortgage

   Continuing to extend the metaphor of Balancing and Swinging the Seesaw
   to home mortgages:

     > ps. what does 'amortized' mean?

     "To write off an expenditure for (office equipment, for example) by
     prorating over a certain period."

     When I think about an application, there's a certain expenditure
     one must make with respect to design. I can do it quick and cheap
     now and incur the most of the cost later (with compounded interest)
     when confronted with issues of scalability, interop, extensibility,
     etc. Or I can spend a a lot up front modeling, and designing for
     flexibility and extensibility. Think of purchasing a cool old
     fixer-upper home, you can select from a couple of properties on the
     market. First, you want something with the soundest footing at the
     most inexpensive price. Also, you'd probably need a mortgage. The
     smaller the down payment, the larger the total cost. So ideally,
     you want your down payment to be as large as possible. But, your
     initial cash reserve is limited, so you put down your limited down
     payment and then can at least move in and start fixing it up and
     increasing your value. Same thing with applications! In the end you
     want to move in and improve where most needed, but you also want
     something with a sound architectural footing. That's a balancing
     act -- though sometimes there's design principles and technologies
     that lessen immediate and future costs. RDF has a great
     architectural footing -- those who don't like it are doomed to
     reinvent it poorly -- but an immediate/localized cost of
     comprehension. Additionally, the order semantic of RSS nces
     sequences unfortunately imposes such a cost without much benefit.
     (It's a sequence, but you don't know what sort of sequence: a
     mandatory RDF artifact for an optional feature doesn't make much
     sense to me.)

     Plus, in the great marketplace of ideas, maybe this
     design/technology wasn't going to go anywhere anyway. So spending
     too much time on it at the start might be an unwise investment.
     (Torvalds' theory on design and project management is useful
     reading on this note.)



