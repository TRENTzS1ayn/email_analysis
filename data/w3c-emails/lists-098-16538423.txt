docno="lists-098-16538423"
received="Thu Apr  3 17:08:42 2003"
isoreceived="20030403220842"
sent="Thu, 3 Apr 2003 17:08:30 -0500 (EST)"
isosent="20030403220830"
name="Ryan Lee"
email="ryanlee@w3.org"
subject="cwm uripath.py bug"
id="Pine.LNX.4.30.0304031648400.25190-100000@tux.w3.org"
charset="US-ASCII"
expires="-1"

To:<www-archive+n3bugs@w3.org>
cc: Tim Berners-Lee<timbl+n3bugs@w3.org>, Dan Connolly<connolly@w3.org>



http://dev.w3.org/cvsweb/2000/10/swap/uripath.py

A while loop at line 194 increments a string index past the end of the
shortest string (contrary to the comments) in the case where refTo(base,
uri) is comparing uneven length strings.  If uri is shorter, then code
like uri[i] on line 217 will complain about the index being out of bounds
(whereas code using splicing like line 208 will just ignore the problem).

Fixed by checking that i<len(uri) in line 217, which I think is correct:
if base and uri match for the whole length of uri, then it will take some
number of '../' to get to uri from base, with no other trailing
characters (the else case).

Passes uripath.py tests, Python no longer barfs on what I run it on -
checked in change.

-- 
Ryan Lee
ryanlee@w3.org



