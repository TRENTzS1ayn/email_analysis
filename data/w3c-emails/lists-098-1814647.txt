docno="lists-098-1814647"
received="Mon Sep 24 16:25:30 2001"
isoreceived="20010924202530"
sent="Mon, 24 Sep 2001 22:25:07 +0100"
isosent="20010924212507"
name="jos.deroo.jd@belgium.agfa.com"
email="jos.deroo.jd@belgium.agfa.com"
subject="extra axiom?"
id="41256AD1.0075A8A7.00@ambem5.eps.agfa.be"
charset="us-ascii"
expires="-1"

To:timbl@w3.org
Cc:www-archive@w3.org


Tim,

I came across http://ilrt.org/discovery/chatlogs/rdfig/2001-09-24.html
and found
[[
  [03:14:20] tim
  So I am left wondering whether to build
  this log:forAll :x. {} log:implies { :x a rdf:Resource }.
                                               ^s
  into cwm so that I can use Jos's rules directly -- or is
  the whole idea that you have to turn on each rule - you have
  control of them. I didn't notice this axiom in his list.
]]

I see that adding that rule doesn't help CWM to infer
more, and that Euler has a parser problem
while I thought that I fixed that {} :-(
Adding
->
  { :s :p :o } log:implies { :s a rdfs:Resource }.

is better, and CWM now thinks
->
    rdfs:Resource     a rdfs:Class,
                rdfs:Resource .

    rdfs:domain     a rdfs:ConstraintResource,
                rdfs:Resource .

    rdfs:range     a rdfs:ConstraintResource,
                rdfs:Resource .

however is see that it is not finding
->
    rdfs:ConstraintResource a rdfs:Class.

whereas Euler thinks it is
->
   {:RULE7 a rdfs:Resource.
    rdfs:domain a rdfs:ConstraintResource} log:implies
  {rdfs:ConstraintResource a rdfs:Class}.

   {:RULE7 a rdfs:Resource.
    rdfs:range a rdfs:ConstraintResource} log:implies
  {rdfs:ConstraintResource a rdfs:Class}.

We actually have that rule built in (and also the one
to infer wether a thing is a rdf:Property) because we
could,t find a way to do that in a back-chaining way...
There was not an "idea that you have to turn on each rule"
but that could be interesting :-)

--
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/



