docno="lists-098-2499048"
received="Tue Apr 23 11:16:13 2002"
isoreceived="20020423151613"
sent="Tue, 23 Apr 2002 16:16:05 +0100"
isosent="20020423151605"
name="Sean B. Palmer"
email="sean@mysterylights.com"
subject="CWM Tests"
id="03ad01c1ead9$cd182900$0a540150@localhost"
charset="utf-8"
expires="-1"


To:<www-archive@w3.org>

Test data: :x :y :z . _:x :y :z . [ :y :z ] . { :p :q :r } :y :z .

The following tests are conducted by merging the rules with the data above,
and then filtering (CWM --filter=f.n3) the file against itself.

The tests:-

--filter: { :x :y :z } => { :x :y :z } .
CWM: :x :y :z .
EepII: <#x> <#y> <#z> .

--filter: { _:x :y :z } => { _:x :y :z } .
CWM: :_gx :y :z .
EepII: _:x <#y> <#z> .

Notes: CWM doesn't output a log:forSome :_gx, which seems inconsistent.

--filter: { _:x :y :z } => { _:y :y :z } .
CWM: :_gy :y :z .
EepII: _:y <#y> <#z> .

Notes: as above.

--filter: { [ :y :z ] } => { [ :y :z ] } .
CWM: [ :y :z ]. [ :y :z ]. [ :y :z ]. [ :y :z ].
EepII: _:thing4 <#y> <#z> .

Notes: I'm not actually sure which one is inconsistent here. CWM is
generating a new node for each descendant, whereas EepII converts the [] to
a _:thing and processes it as usual.

--filter: { { :p :q :r } :y :z } => { { :p :q :r } :y :z } .
CWM: { :p :q :r }:y :z .
EepII: _:formula4 <#y> <#z> .

Notes: EepII serialization problem, there. Note that they both match the
identical formula, but no other bNodes.

--filter { ?x :y :z } => { ?x :y :z } .
CWM: :_g2 :y :z . :_gx :y :z . :x :y :z .
EepII: <#x> <#y> <#z> .
_:x <#y> <#z> .
_:thing3 <#y> <#z> .
_:formula4 <#y> <#z> .

Notes: once again, no quantification from CWM, and a formula serialization
problem for EepII.

--filter { [ ?x ?y ] } => { [ ?x ?y ] } .
CWM:       [      :forAll v:x ].
      [      :forAll v:y ].
      [      :forSome <#_g4> ].
      [      :forSome <#_gx> ].
      [      <#y> <#z> ].
      [      <#y> <#z> ].
      [      <#y> <#z> ].
      [      <#y> <#z> ].
      [      :implies {
              [      v:x v:y ].
            } ].
EepII: _:thing4 <#y> <#z> .
_:thing4 <http://www.w3.org/2000/10/swap/log#implies> _:formula3 .

Notes: they both go a bit nuts on this. CWM will actually loop forever
on --think for this test.

--
Kindest Regards,
Sean B. Palmer
@prefix : <http://purl.org/net/swn#> .
:Sean :homepage <http://purl.org/net/sbp/> .



