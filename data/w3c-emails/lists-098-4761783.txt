docno="lists-098-4761783"
received="Thu Dec  5 17:09:32 2002"
isoreceived="20021205220932"
sent="Thu, 05 Dec 2002 17:05:56 -0500"
isosent="20021205220556"
name="Sandro Hawke"
email="sandro@w3.org"
subject="Re: bees, ants, grid, web services, semweb, voice, TAG interaction"
id="200212052205.gB5M5us15608@wadimousa.hawke.org"
inreplyto="5.1.0.14.0.20021203181937.03025f78&#64;0-mail-1.hpl.hp.com"
expires="-1"


To: Brian McBride<bwm@hplb.hpl.hp.com>
cc:www-archive@w3.org



Some more thoughts, with a little more time.   Ccing www-archive, so
not quoting you much.

> I've read through your stuff a couple of times and in a nutshell I think 
> what you are saying is:
> 
>    compare/contrast ws/sw:
> 
>      - ws is about transient communication (bees)
>      - sw is about persistent communication (ants)

I don't think the "ws" and "sw" labels match the two modes very well
(but I know I gave the impression I did then).  People sending RDF in
e-mail are doing transient communication but might think of themselves
as sw folks; people using a GET-encoding of SOAP are doing perfectly
appropriate access to a persistent shared memory.

So yes, there are the dual ways of communicating, which was the point
of Bees/Ants.  I should say more there about writing applications (as
you talk about here) based on a shared information space.  The first
three e-mail systems I used were on a mainframe and simply wrote into
shared files.  One of them had wonderful features like letting you
take back mail you'd sent if it hadn't been read yet, and seeing if it
had been read.  It naturaly saved all e-mail until you removed it.
I'm pretty sure ORACLE and LOTUS have systems like this; it's so much
easier to write groupware on top of a shared memory than on top of
message-passing! 

Meanwhile, we have SW and WS.   

It's totally possible to do web services on top of shared memory, as I
think you suggest.  You can buy a book by writing the "sandro
purchased isbn-xxxxxxxx at 2002-12-05-15:21 with credit card number
yyyyyyyyyyyyyyyy" into Amazon's database, assuming their security &
integrity constraints on the database allow it.  In this case they'd
have to run a credit-card authorization check, but sure, why not?  (or
maybe that's done later, and causes a follow-up "approved" record to
be added -- there are lots of ways to model the workflow).

The SemWeb folks, on the other hand, are working on a Layerable
Knowledge Representation (KR) Language for the Masses.  They're tired
of a million languages and a 10^12 conversion programs between them.
XML looked like it might solve it, but it's only half-way.  RDF goes
the rest of the way, although there's still a ton of room for making
it easier to work with (OWL is another step there.)  This settles (1)
how you should think about the encoding of the information you want to
send in messages and (2) how you should *appear* to store information
in your database.

So yes SW and WS are pretty orthogonal to each other and to the
Bees/Ants issue, although people often get them confused because of
the use cases they're thinking about.

Does that sound about right to you?

     -- sandro



