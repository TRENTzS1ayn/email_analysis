docno="lists-098-6440481"
received="Fri Jan  4 14:03:07 2002"
isoreceived="20020104190307"
sent="Fri, 4 Jan 2002 20:01:45 +0100"
isosent="20020104190145"
name="Raphael Volz"
email="rvo@aifb.uni-karlsruhe.de"
subject="A wishlist for orthodox christmas OR some DAML+OIL experiences"
id="DMECLAFLIOFJEFFIAJPCIEHKCHAA.rvo@aifb.uni-karlsruhe.de"
charset="iso-8859-1"
expires="-1"

To:"Mike Dean"<mdean@bbn.com>
Cc:<www-archive@w3.org>,<www-webont-wg@w3.org>,"Rudi Studer"<rst@aifb.uni-karlsruhe.de>,"Steffen Staab"<sst@aifb.uni-karlsruhe.de>, J?rgen Angele<angele@ontoprise.de>, Alexander M?dche<ama@aifb.uni-karlsruhe.de>,"Frank van Harmelen"<frank.van.harmelen@cs.vu.nl>


-------------------------
DAML + OIL Experiences
AIFB, FZI @ University of Karlsruhe
Ontoprise GmbH
-------------------------

This document presents the experiences with
DAML+OIL collected in implementing and using
several tools (OntoEdit [5], OntoMat [3], KAON Reverse [4]) that
can read, write and work with a (large) subset of DAML+OIL.
[1] gives an exact survey, which features are supported.

Also some relevant experiences from teaching DAML+OIL
in several classes given at the University of Karlsruhe
are presented.

Different representations
=========================
Please note that the internal representation of our tools is
not based on description logics (being the "standard" mapping
from DAML+OIL to logics).

OntoEdit relies on F-Logic [5], an object-oriented
language and deductive database system. This allows also
to have user-supplied rules in ontologies. Mapping DAML+OIL to
F-Logic additionally provides a query mechanism, which comes in
handy when building applications and tools.

KAON Reverse and OntoMat rely on an internal data model whose
expressivity essentially corresponds to a relational algebra without
negation and complemented with structural recursion. The subset used
here essentially corresponds to the intersection of DAML+OIL with RDFS
primitives. This representation is also implemented on top of SQl3-compliant
relational databases.

Consequently,
o A web ontology language should be implementable choosing different
  internal representations and reasoning techniques.

        o Mappings to rule-based representations simplify the
  task of constructing a rule / query language for the
  web ontology language.

Multilinguality
===============
All our applications and tools support multi-lingual ontologies, however
as DAML+OIL does not have a notion of multi-lingual labels and
documentation.
This feature, which is crucial in an international setting, is a number one
requirement for a web ontology.

Integration / Interoperability
==============================
Our experience from teaching semantic Web issues to students and
professionals
is that they prefer to think in and exploit the models they have used
before,
i.e. UML, Java classes, ER models etc.

Therefore, we found that many of them have difficulties with the
non-frame-like
modelling primitives offered by DAML+OIL. The fact, that it is additionally
possible to model information that is semantically equivalent using
different
syntactic encodings (see [6]), leads to difficulties in authoring
and additionally hinders understandability.

Of course, many applications are existing. We cannot expect everyone to
reinvent
their stuff, thus a web ontology language should leverage primitives to
which
systems can map their own (alien) conceptual models easily. Thus a smooth
integration
with the existing modelling world should be one of our principle goals.


Modularization
==============
As of now, our tools don't support modularization of ontologies yet. We are
currently
working on modularization support but will not restrict ourself on the
intended
semantics of daml:imports, which only allows to (transitively) import all
definitions
contained in a different file. To make it short, we plan to allow:
o all statements in a file (~ daml:imports)
o a collection of definitions (using a home-made collection primitive)
o single definitions
o single definitions together with conceptually related definitions


Documentation
=============
The possibilities given in DAML+OIL to document an ontology is restricted to
version information and comments.
This is not sufficient. We use the full set of elements defined by DC within
our own tools. Eventually it
should also be possible to attach several documentation parts to an ontology
(collections of statements) within one file.
Within the OntoWeb portal application DC markup given for a set of RDFS
statements is used to
provide authorship information when content is syndicated from different
community members.

Meta-Model
==========
The primitives offered by a web ontology language should be easily
extendable. For example KAON Reverse and Ont-O-Mat
would benefit of new property type "KeyProperty", which asserts that there
cannot be two distinct instances x1, x2 which have
the same range for a property. This requires an extensible meta-model for
the web ontology language

N-ary Relations
===============
Neither RDFS nor DAML+OIL allows for n-ary relations at the moment although
modelling is much more
natural having a  primitive for n-ary relations instead of decomposition
into sets of binary relations
as it is proposed now. In many application scenarios this kind of
information must be modelled.

Usage Perspectives
==================
Up till now design choices taken for DAML+OIL were mainly choosen for
a specific user group: ontology modellers. It seems to us that few
conciderations have been made for two other import user groups:
the people that actually build tools to support the language and
those people that actually provide the good-old A-Box: Instance data
that provides the flesh in the Semantic Web. As our experience from
actually implementing and using applications show, other aspects of
a language become relevant, we could have been aware of earlier.

Extensability
=============
While rules and query languages are a non-issue of our group. The current
working group aim, working with DAML+OIL, is not practical without them.
One of our main reasons for not working directly with DAML+OIL, but with
mappings
into other paradigms were the lack of rules and especially the query
language.

In order to be able to provide a query language and a rule language
reasonably
soon after the definition of the ontology language, we propose that the
theory
for querying and rules based on the ontology language should mostly be
understood
during the design process. Otherwise, the time lag between theoretical
development and practical usability may endanger the success of the
ontology language.

Therefore, we'd actually prefer
a simpler language than DAML+OIL that uses layers of language features to
allow early adaption of core features !
(! certainly something with a formal semantics !)



References:
-----------
[1] http://lists.w3.org/Archives/Public/www-rdf-logic/2001Dec/0018.html
[2] http://citeseer.nj.nec.com/kifer90logical.html
[3] http://ontobroker.semanticweb.org/annotation/ontomat/
[4] http://kaon.semanticweb.org/kaon/REVERSE
[5] http://ontoserver.aifb.uni-karlsruhe.de/ontoedit/
[6] http://www.semanticweb.org/SWWS/program/full/paper40.pdf

--
 Raphael Volz             Tel:   49 721 608-7363
 Institut AIFB            Web:   http://www.aifb.uni-karlsruhe.de/WBS/rvo
 Uni Karlsruhe (TH)       EMail: volz@aifb.uni-karlsruhe.de
 PGP-Key Fingerprint:
C5A1 52FA D0F1 47B9 7075  1F22 F3E3 BEE2 68BB 1643




