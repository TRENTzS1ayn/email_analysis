docno="lists-098-6923226"
received="Fri Jan 11 09:25:20 2002"
isoreceived="20020111142520"
sent="Fri, 11 Jan 2002 14:21:33 -0000"
isosent="20020111142133"
name="Jeremy Carroll"
email="jjc@hplb.hpl.hp.com"
subject="PD datatyping doc plans"
id="JAEBJCLMIFLKLOJGMELDGEMHCCAA.jjc@hplb.hpl.hp.com"
charset="us-ascii"
inreplyto="B864A474.B66C%patrick.stickler&#64;nokia.com"
expires="-1"

To:"Patrick Stickler"<patrick.stickler@nokia.com>
Cc:<www-archive@w3.org>




Hi Patrick,

note I've moved off-list, but copying to www-archive.
This allows the conversion to be public domain but not in-your-face for the
rest of the group.

Assuming the telecon OKs the plan we've just agreed, I suggest we propose
that we do our work off-list in this way. This should help reduce RDF Core
bandwidth utilisation.

I like your pictures, I think they are really helpful.

I think we should decide which horse to back and forget the others for now.

My reckoning is that S is leading the race, and PL is in the race, and both
are different from the sort of solutions we have been in favour of.

For me, the race will be won on rdf-interest (not rdf-core), hence the
familiarity of the PD proposal is IMO the key.

So I suggest restricting our write-up to PD, and forgetting, for now, U and
P++.

Any thoughts?


On the maths ...

Your suggested framework ...

[[[[[

1. Take up to section 4.1 as a starting point (rework section 3 and
   remove sections 4.2 onwards, including section 5).

2. Add math in or following section 4.1 that states that for any pairing

       (lexical_form, data_type_URIref)

   there is one and only one mapping

       (lexical_form, data_value)

   between the lexical space and value space of that data type.

Surely the math for this is straightforward (I wish I could provide it).

3. Add final sections detailing the idioms P and D, how they define such
   pairings of lexical form and data type.

]]]]]]]

I started thinking about this and got a bit of nervous.

So far, we have decided not to have a processing model for RDF: step 3 above
looks like creeping towards one, and overall this looks like an extra layer
in our analysis.

I am beginning to see the attraction of trying to do it all in the model
theory, which, as far as I understand, Pat made a stab at in:

http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2001Nov/0011.html

"Datatypes and MT"

I am beginning to feel that I need to bite the bullet and build on top of
Pat's work and actually do some model theory.

Then your diagrams and some text would be the informal part, and we simply
wouldn't have the intermediate level math that would actually be useful to
an implementor!

My understanding is the MT route that we have taken overall is a decision to
leave implementation to implementators and to prioritise being clear over
being at the right level for implementators.

I am flying out to the WebOnt F2F this weekend, I will try and have a stab
at PD model theory on the plane. ("stab" is perhaps an unfortunate turn of
phrase).

Jeremy



