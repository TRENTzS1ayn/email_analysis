docno="lists-099-0930982"
received="Mon Aug 18 10:41:14 2003"
isoreceived="20030818144114"
sent="Mon, 18 Aug 2003 10:41:04 -0400 (EDT)"
isosent="20030818144104"
name="Peter F. Patel-Schneider"
email="pfps@research.bell-labs.com"
subject="Re: testing that RDF datatypes can have more than one URI name"
id="20030818.104104.84903390.pfps@research.bell-labs.com"
charset="us-ascii"
inreplyto="200308180344.h7I3i2Al006880&#64;roke.hawke.org"
expires="-1"


To:sandro@w3.org
Cc:www-archive@w3.org


From: Sandro Hawke <sandro@w3.org>
Subject: Re: testing that RDF datatypes can have more than one URI name 
Date: Sun, 17 Aug 2003 23:44:02 -0400

> 
> > PS:  Note that this [1] can be used to defeat just about any scheme for special
> > syntactic processing of XML literals in RDF/XML.
> 
> Jeremy's "Option 3" [2] does a purely syntactic treatment, including
> xml:lang, where XML Literals look like perfectly normal
> (string^^datatype) pairs by the time they get to N-Triples.  That
> wouldn't get tripped up here, as far as I can tell.

I believe that it will.   For example, how will it handle something like
the following.

...

<rdfs:Datatype ex:bar>
  <owl:sameAs rdf:resource="&rdf;XMLLiteral" />
</rdfs:Datatype>

<ex:baz xml:lang="fr">
  <ex:blat rdf:datatype="&ex;bar">&lt;bar /&gt;</ex:blat>
</ex:baz>

...


> More deeply, do you have a simple explanation of why it doesn't work
> to have two kinds of datatypes -- language sensitive and language
> insensitive ones?   

It would work if the determination could be made during semantic
processing.  However, the schemes I have seen perform different actions at
syntactic processing time, where it is not reasonable to distinguish the
two kinds of datatypes.

> I'm not sure the simplest way to arrange it, but
> maybe:
>    - the lexical space of each datatype is either a set of Unicode
>      strings (exclusive) OR a set of pairs of <Unicode string,
>      language string>.  (That is, the range of L is the union of the
>      set of Unicode strings and the set of string/string pairs.  The
>      domain of L2V(xsd:int) is the set of Unicode strings like "0",
>      "1", etc.  The domain of L2V(rdf:XMLLiteral) is the set of pairs
>      of Unicode strings like <"<a></a>", "en-US">, <"<b></b>,
>      "en-US">, etc.
> or
>    - the lexical space of each datatype is a pair (as above); for
>      many datatypes the second item in the pair does not play a 
>      role in L2V(d); for all x,y,z: L2V(xsd:int)(x,y)=L2V(xsd:int)(x,z)
> 
> These are certainly more complicated, and perhaps offensively so, but
> they hardly seem impossible or even impractical.  I'm no expert in
> this kind of abstraction; am I missing something important?

I think so.

The problems do not arise in RDF itself, as RDF is so expressively
impoverished.  However, as soon as the formalism can produce identities
between datatypes, it is not reasonable to perform different syntactic
processing for different datatypes.

>      -- sandro
> 
> [1] http://lists.w3.org/Archives/Public/www-webont-wg/2003Aug/0084
> [2] http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2003May/0016

peter



