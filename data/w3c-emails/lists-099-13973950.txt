docno="lists-099-13973950"
received="Wed Mar 10 03:13:35 2004"
isoreceived="20040310081335"
sent="Wed, 10 Mar 2004 10:10:41 +0200"
isosent="20040310081041"
name="Patrick Stickler"
email="patrick.stickler@nokia.com"
subject="Re: Named graphs etc"
id="6C281F4F-726A-11D8-964D-000A95EAFCEA@nokia.com"
charset="US-ASCII"
inreplyto="BHEGLCKMOHGLGNOKPGHDCEMPCCAA.jjc&#64;hpl.hp.com"
expires="-1"


Cc:"Pat Hayes"<phayes@ihmc.us>,<www-archive@w3.org>,<chris@bizer.de>
To:"ext Jeremy Carroll"<jjc@hplb.hpl.hp.com>



On Mar 09, 2004, at 18:43, ext Jeremy Carroll wrote:

>
>
> A few comments ...
>
>>>
>>> Publication of a graph, or an RDF/XML instance, should not equate to
>>> assertion.
>>
>> I don't think that follows. And in any case, its too late to try to
>> change this now, seems to me.
>
>
> Some published RDF/XML docs are asserted, some are not (e.g. WG test 
> cases).
> We dropped the sections of RDF Concepts that presumed that
> publishing=asserting, partly because there was no consensus.
>

OK. Good. I wasn't hallucinating in my recollections.

Given the latest discussions, I'm more of the opinion that publishing
an RDF/XML instance should not be presumed to equate to asserting the
graph it serializes.

Either there should be a bootstrapping vocabulary (easier to introduce
since it's disjunct from the existing specs) or some attribute on the
<rdf:RDF> element to explicitly define assertion.

Some applications may wish to presume that graph serialized in
some RDF/XMl instance is asserted, but social liability will
most likely depend on explicit statements of assertion (similar
to "uttering a statement" which is subject to debate whether
the statement was asserted versus "making a statement under oath"
where the contextual "machinery" makes it clear that the statement
was in fact asserted).

>
>
>> Asserting isn't a kind of logical sentence, it's a speech act. It
>> stands outside the logical semantics.
>
> English works both to carry content and speech acts, I think the 
> suggestion
> is that RDF can carry its own speech act status,

Agreed.

> and the bootstrapping is in
> the user perceptions (the trust layer).

If we consider that trust layer grounded in a specialized bootstrapping
vocabulary, or alternatively, special attributes in the serialization,
then I agree.

One other benefit to the vocabulary approach is that it is independent
of serialization, thus it is immediately usable with RDF/XML, N3, 
Turtle,
TriX, all the various query expression dialects, etc.

The tricky part (or maybe it's easy) and what I'd like Pat to comment
on is how hard (or even possible) it is to constrain the interpretation
of a particular property to the graph in which the statement occurs.

I.e. given some special property (partially) defined as follows:

    x:specialProperty rdfs:domain x:Graph .
    x:specialProperty rdf:type x:GraphQualificationProperty .

Then both of the following graphs are valid

:G { :G x:specialProperty ?object . }
:H { x:thisGraph x:specialProperty ?object . }

the first because the subject of the statement is the same graph
as that containing the statement, and the second because the
subject automatically denotes the graph containing the statement

yet the statement in the following graph

:K { :G x:specialProperty ?object . }

has no interpretation because (a) the subject of the statement is
not the same graph as the graph containing the statement, and (b)
no equivalence (owl:sameAs) can be determined based on statements
in the graph itself.

I.e., the interpretation of any member of x:GraphQualificationProperty
is made against the graph itself, irrespective of any other statements
in any other graph -- and any statements made about any other graph
using such a property simply have no interpretation.

If, however, we had the graph

:K { :G x:specialProperty ?object . :G owl:sameAs :K }

or the graph

:K { :G x:specialProperty ?object . :G owl:sameAs x:thisGraph }

then the statement would be valid and have an interpretation
in terms of the graph in which it occurs. But

:K { :G x:specialProperty ?object . }
:W { :G owl:sameAs :K }

doesn't make the statement in graph :K have any interpretation
because the interpretation of any x:GraphQualificationProperty
is limited to the particular graph alone in which it occurs.

Eh?

It's a little more complicated than an XML attribute, but has
that great advantage of being immediately compatible with all
RDF serializations (and no'one can really expect any changes
to RDF/XML, N3, etc. just to experiment with this stuff...)

Patrick

--

Patrick Stickler
Nokia, Finland
patrick.stickler@nokia.com



