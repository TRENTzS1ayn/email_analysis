docno="lists-099-1968013"
received="Wed Feb  5 14:06:24 2003"
isoreceived="20030205190624"
sent="Wed, 5 Feb 2003 19:05:25 -0000"
isosent="20030205190525"
name="Sean B. Palmer"
email="sean@mysterylights.com"
subject="Decent Hypermedia, and RDF vs. XML"
id="015001c2cd49$af62f540$01540150@localhost"
charset="utf-8"
expires="-1"


To:"Aaron Swartz"<me@aaronsw.com>
Cc:<www-archive@w3.org>


> [On hypermedia formats:] Can you be more specific by
> what you mean by decent? I am quite curious.

I don't know about other people, but I find HTML horribly
constraining. When I take notes, I scribble bits of text here and
there, URIs askew of dates, times, places, possibly with lines
indicating connetions between parts, little diagrams scattered about,
perpendicular annotations, doodles, the odd scribbling out...

I know that each of the things that I put down on the paper could have
a discrete datatype, and that the connections could be expressed as
RDF. I know that the layout is just my expression of the relationships
between the bits, and could form a tabbing order. If I could transfer
that to a digital format, HTML would feel rather antiquated to me.

So I want a format with flexibility; a format with the layout
capabilities of SVG, and the formailty of RDF.

Hypermedia documents shouldn't have any clear edge to them: I'd like
my documents to be little Webs within themselves. For example, I might
have a document with three main information pieces:-

John (bit about John) -foaf:friend-> Bill (bit about Bill)
Bill -foaf:friend-> Bob (bit about Bob)
Bob -foaf:friend-> John

Where does the document start? It's a circle of references. Perhaps
they might be displayed as three floating blobs on a fast device, or
as a simple menu linking to each of the descriptions on a smaller
device. Heh, or perhaps they could be displayed as 3 dimensional
overlapping spheres on some holographic display unit in the future!

HTML got so bad so quickly because people were worried about how their
documents look. I'd like a format that's so flexible that the
presentation of the data will no longer be as much of an issue: yet it
won't stop them from having beautiful displays. People should just be
aware that styles are suggestions for this format. And flexibility
doesn't mean it has to fail the principle of least power test: the
language doesn't have to be Turing Complete, or anything... just needs
to be able to hold anything from well thought out notes to messy
partially-formed data models.

It's the messiness that gets to me. HTML is too rigid, and yet not
powerful enough. I mean, there's not even a standard machine readable
way for giving the homepage address of the page's author. RDF
should've come before HTML!

I could hot-air a lot more over this, but I prefer to code.

> XML has a power-to-the-people principle?

XML has a few things that I like:-

* The idea that people need to be able to work according to their own
needs: they need to be able to create their own applications that suit
them.
* The idea that these applications may need to merge at a later date.

(Note that the second of these two is often ignored: there's not even
a facility in XML Schema for saying how other languages should be able
to mix with yours. There's some more on that in Tim's DesignIssues, of
course, so no need to expand here--but I felt it when I was working on
expressing the XML infoset in RDF. I still think that Sands is a
highly neglected thing).

* The idea that style gets pasted onto semantics.

(Alright, not quite. We had fun discussing that in preparing XAG, but
that's all past tense stuff now.)

* The ability to support a commons of applications: the idea for
MathML and XLink etc., that they should be imported into other
languages, is rather neat.
* Transformability. I really like the idea of FOPL rules being RDF's
equivalent of XSLT.

I still think everything was done bass-ackwards. RDF should've come
first, so that people could think about the semantics of their li'l
projects, and then all the serializations and applications could
follow. I mean, you can tell something went a bit wrong when XML 1.0
came first, then the infoset, and then a formalization of the infoset
in RDF. XML wasn't developed carefully: it was hacked down from SGML
with a scant regard for what people would actually use it for (at last
that's what it feels like to me).

Anyway, from one RDF zealot to another...

--
Sean B. Palmer, <http://purl.org/net/sbp/>
"phenomicity by the bucketful" - http://miscoranda.com/



