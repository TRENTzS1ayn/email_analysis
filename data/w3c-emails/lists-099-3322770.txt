docno="lists-099-3322770"
received="Fri Jan 17 15:04:45 2003"
isoreceived="20030117200445"
sent="Fri, 17 Jan 2003 14:57:24 -0500"
isosent="20030117195724"
name="Sanjiva Weerawarana"
email="sanjiva@us.ibm.com"
subject="Re: Types re-write for WSDL Part 1"
id="OF92846F88.917DE5F8-ON85256CB1.006A45A5-85256CB1.006DA02C@us.ibm.com"
charset="US-ASCII"
inreplyto="92456F6B84D1324C943905BEEAE0278E02D30B85&#64;RED-MSG-10.redmond.corp.microsoft.com"
expires="-1"

To:"Martin Gudgin"<mgudgin@microsoft.com>
Cc:"W3C Public Archive"<www-archive@w3.org>,"Jean-Jacques Moreau"<moreau@crf.canon.fr>,<roberto.chinnici@sun.com>,"Jeffrey Schlimmer"<jeffsch@windows.microsoft.com>,"Amelia A. Lewis"<alewis@tibco.com>







Hi Gudge,

I disagree - the way you had written the component model there were
fundamental properties called element and type declarations. While those
make sense for XML Schema, they make no sense at all for non-XML type
systems. What we agreed to was that WSDL would cleanly support multiple
type systems, including non-XML ones. The approach you're suggesting treats
XML centric type systems in a first-clas maner and everything else in a
different way. That's not acceptable.

The re-write I started was to make it clear that any type system has the
same place in the model. Have you un-done what I started working on?

(My CVS access is still busted and I'm currently in Heathrow; so poor net
access.)

Sanjiva.



"Martin Gudgin" <mgudgin@microsoft.com> on 01/17/2003 10:35:39 AM

To:    "W3C Public Archive" <www-archive@w3.org>, "Jean-Jacques Moreau"
       <moreau@crf.canon.fr>, <roberto.chinnici@sun.com>, Sanjiva
       Weerawarana/Watson/IBM@IBMUS, "Jeffrey Schlimmer"
       <jeffsch@windows.microsoft.com>
cc:    "Amelia A. Lewis" <alewis@tibco.com>
Subject:    Types re-write for WSDL Part 1



I've been looking at the initial start of the types re-write. I think
that types should remain in a separate section. I'm not convinced that
there is a types component at the abstract level. I think we just stick
with {element declarations} and {type definitions} properties in the
definitions component. We agreed in VA that additional type systems
would add their own properties to existing components in the abstract
model. I believe that the other XML based type systems should populate
these properties. We then define how the QName reference stuff works
just once.

Other type systems that are not XML based would need to specify what
properties they add to the definitions components. I've added text
saying that the component model can be added to by extensbility elements
and/or attributes.

 Gudge



