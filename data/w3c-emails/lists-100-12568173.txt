docno="lists-100-12568173"
received="Fri Apr 20 11:53:37 2001"
isoreceived="20010420155337"
sent="Fri, 20 Apr 2001 17:48:56 +0200"
isosent="20010420154856"
name="Dimitris Dimitriadis"
email="dimitris.dimitriadis@improve.se"
subject="SV: [General] Language-independent test representation"
id="9F67DC27F4CCD311ABA600508B6A66A4319C56@VXOIMP1"
charset="iso-8859-1"
expires="-1"


To:"'Joseph Kesselman'"<keshlam@us.ibm.com>,"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>

Point taken.

However, if there is any optimism to be deduced from these thoughts, I for
one would be willing to pursue this, both in terms of developing it, as well
as maintaing it. Of course we would need to brake if things were to get out
of hand.

Hopefully we will be able to look at the DTD that the NIST tests have used
fairly soon. In the meanwhile, please follow joe's example and mail your
thoughts.

Thanks for your comments, Joe.

/Dimitris

-----Ursprungligt meddelande-----
Fr?n: Joseph Kesselman [mailto:keshlam@us.ibm.com]
Skickat: den 20 april 2001 17:43
Till: 'www-dom-ts@w3.org'
?mne: Re: [General] Language-independent test representation



My one hesitation with this proposal is that, when I've tried to craft
nontrivial testcase scripts in XML in the past, I've found myself either
(a) unrolling any logic in the test to turn it into a flat series of
operations, which makes the script both huge and hard to read, or (b)
trying to write a fairly complete programming language in XML syntax, in
order to handle the conditionals/logic/variables... which snowballs rapidly
into a much larger project than the tests themselves.

If we assume that programming languages are inherently fairly regular, it
may be possible to write a simple XML-based pseudocode language which can
be "blindly" translated into specific languages. But I suspect that larger
tests are likely to push the boudaries of this approach as they start to
require non-DOM programming activity to generate/manuipulate/validate the
information... and it does mean an ongoing effort to maintain and develop
the test language and its mappings.

It's definitely worth looking at. But I won't be surprised or terribly
disappointed if it turns out that human porting of many (most?) testcases
is needed after all. If programming languages were really that similar, we
wouldn't generate quite so many of them.

______________________________________
Joe Kesselman  / IBM Research



