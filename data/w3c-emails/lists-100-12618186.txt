docno="lists-100-12618186"
received="Fri Apr 20 13:25:32 2001"
isoreceived="20010420172532"
sent="Fri, 20 Apr 2001 11:23:17 -0600"
isosent="20010420172317"
name="Arnold, Curt"
email="Curt.Arnold@hyprotech.com"
subject="RE: [General] Language-independent test representation"
id="B2C1451A181BD411B88A00E018C1C19C08ABE0@THOR"
charset="iso-8859-1"
inreplyto="[General] Language-independent test representation"
expires="-1"


To:"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>

> I take it your main point is that it seems to be besides the point to
> introduce an XML-based vocabulary since we can use the Java 
> form and port it
> from there. 

It has seemed to be extremely trivial to port when
the test cases have been written to avoid constructs that are
binding specific.

> 
> Functionally, there is no difference. Code is code (the 
> XML-coded snippet
> will eventually become code as well). Once you think of the 
> test forming
> only part of the test _submitted_, allowing for 
> documentation, author info
> and so forth (which is in XML), I think my point becomes clearer.
> Streamlining this to allow only for XML-encoded information seems more
> straightforward.

I guess it depends on the complexity of this additional information.  Documentation and author info could probably be sufficiently addressed
using Javadoc comments.  If the nature of the additional information 
is sufficiently complex, then a separate XML document that provides 
the additional information could be linked to the tests by test name.

In addition, you could generate a total XML representation by running
the Java based tests through JavaML to create an XML representation
and then doing appropriate XSLT transforms.

I don't think that using a JUnit based framework for developing and 
evaluating tests precludes and eventual formulation of an abstract
XML representation of the tests and it should be relatively easy to 
generate the abstract XML representation after most of the tests have
been developed.



