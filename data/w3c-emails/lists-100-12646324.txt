docno="lists-100-12646324"
received="Fri Apr 20 15:40:43 2001"
isoreceived="20010420194043"
sent="Fri, 20 Apr 2001 15:40:15 -0400 (EDT)"
isosent="20010420194015"
name="Fred L. Drake, Jr."
email="fdrake@acm.org"
subject="Re: Node synchronization [was RE: Node identity comparisons on TS lis t]"
id="15072.37023.652419.935201@cj42289-a.reston1.va.home.com"
charset="us-ascii"
inreplyto="B2C1451A181BD411B88A00E018C1C19C08ABE2&#64;THOR"
expires="-1"


To:"Arnold, Curt"<Curt.Arnold@hyprotech.com>
Cc:"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>,"'www-dom@w3.org'"<www-dom@w3.org>


Arnold, Curt writes:
 > Follow up to:
 > http://lists.w3.org/Archives/Public/www-dom-ts/2001Apr/0030.html
 > http://lists.w3.org/Archives/Public/www-dom-ts/2001Apr/0032.html
...
 > Does (or should) DOM 3 address this by adding a getMutex() or 
 > similar method, something like:

  I'll chime in to note that the DOM currently does not (as far as I
can tell) have anything to say about concurrency.  In particular, it
does not require or imply that support for concurrent operation is
required.
  I think this is a good thing.
  While I think I understand your interest, it's not clear to me that
the DOM needs provide direct support for concurrency-related issues.
If something like this is required, the specification should at least
make it clear that the getMutex() can return null -- not all
environments support concurrency, or an implementation may not want to
provide explicit support for it.
  Perhaps you need to present your motivation for using the DOM nodes
as synchronization objects independently from Java -- the idiom of
using an arbitrary object for synchronization is not used in all
languages.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Digital Creations



