docno="lists-100-12867913"
received="Fri Apr 27 16:36:33 2001"
isoreceived="20010427203633"
sent="Fri, 27 Apr 2001 16:35:20 -0400"
isosent="20010427203520"
name="Joseph Kesselman"
email="keshlam@us.ibm.com"
subject="Re: Thoughts on language independent rep"
id="OF74CFE19B.3793D4D8-ON85256A3B.007072A3@pok.ibm.com"
charset="us-ascii"
inreplyto="Thoughts on language independent rep"
expires="-1"

To:"Arnold, Curt"<Curt.Arnold@hyprotech.com>
Cc:"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>,"'xmlconf-developer@lists.sourceforge.net'"<xmlconf-developer@lists.sourceforge.net>



>I'd really like to be able to round-trip the language independent
>representation (LIR) with JUnit code, that is be able to generate the  LIR
>from JUnit as well as generate the JUnit from the LIR
>without degradation.  This would help rapid development of tests since the
>tests could be developed within Java IDE's and exported to LIR.

You're talking about a decompiler from Java (or whatever) to LIR. Judging
by past decompiler efforts, this is proabably a larger undertaking than you
expect. The problem is that hand-maintained code is NOT going to restrict
itself to the relatively simple and regular patterns that
LIR-to-specific-langauge would, and may in fact use things that the LIR
honestly can't represent (since there's no intention to make the LIR a
fullly general programming language, and since languages differ in
capabilities and the LIR has to restrict itself to a reasonably portable
subset of functions).

It's probably possible, but I can see it rapidly approaching the size of a
Java compiler and generating non-human-readable LIR code.

If some subportion of the test community wants to work on it, great. If you
can get it working soon enough to be useful, better still.

But  I strongly recommend that we do NOT make it part of the the test
team's official plan, because it bids fair to being a huge time-sink.

______________________________________
Joe Kesselman  / IBM Research



