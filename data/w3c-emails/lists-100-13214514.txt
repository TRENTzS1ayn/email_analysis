docno="lists-100-13214514"
received="Sun Aug 12 13:56:29 2001"
isoreceived="20010812175629"
sent="Sun, 12 Aug 2001 19:56:15 +0200"
isosent="20010812175615"
name="Dimitris Dimitriadis"
email="dimitris.dimitriadis@improve.se"
subject="SV: [General] Status?"
id="9F67DC27F4CCD311ABA600508B6A66A44A6BAA@VXOIMP1"
charset="iso-8859-1"
expires="-1"


To:"'Arnold, Curt'"<Curt.Arnold@hyprotech.com>,"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>

I think separate directories are preferrable, since we may want to build
suites that consist of different subsets, except if we explicitly remove the
files we don't want to use. Provided we can't solve it with another mechanis
that is. Can ANT look into xml-files without including them in the build? I
realise that would take lots of extra time, but then we could instruct ANT
to include only tests that have an explicit value on the test "status"
attribute.

-----Ursprungligt meddelande-----
Fr?n: Arnold, Curt [mailto:Curt.Arnold@hyprotech.com]
Skickat: den 10 augusti 2001 20:36
Till: 'www-dom-ts@w3.org'
?mne: RE: [General] Status?


> Arnold, Curt writes:
>  > They could be in the same directory as long as we use a 
> distinct  > extension for test definitions.  If they are all 
> .xml files, then  > ANT can't determine which files are test 
> definitions and should be  > validated or transformed and 
> which are test resources.
> 
>   I'm not sure I understand just what the limitation is.  
> I'll have to dig into Ant a little more to figure it out.
> 

There needs to be some pattern so the build can determine which files are
test definitions and should be transformed and which files are resource
files used in the test and should be copied without
transformation.

Explicitly listing the tests (or excluding the resource files) in build.xml
is undesirable.  Running everthing through the transform is unacceptible
since some files aren't XML (for example, the
DTD's) and the extension is determined outside the transform, so resource
files would all end up with .java, .js, .cs, et al extensions and cause
problems in compilation.

The options are to either use pattern to test definitions file names (such
as *.domtest or test*.xml), or to keep the test definitions and resource
files in different locations.  Since all the scraped
test files had .xml extensions and there were also resource files with .xml
extensions, I chose to keep them in parallel hierarchies.  Using a files
subfolder is just a slightly different approach.

It is basically the same problem as if you used a .java extension for
non-Java files, the build process would become much more complicated since
it would assume that those files were Java source code
and try to compile them.



