docno="lists-100-14378018"
received="Thu Aug 23 11:18:23 2001"
isoreceived="20010823151823"
sent="Thu, 23 Aug 2001 11:12:42 -0400"
isosent="20010823151242"
name="Mary Brady"
email="mbrady@nist.gov"
subject="Re: [Action Items] Top priority (Revision period, ECMA transform, Harness, Packaging)"
id="00be01c12be6$0e12cc70$293b0681@HAPPY"
charset="iso-8859-1"
inreplyto="00c601c12b4d$420451a0$a800a8c0&#64;CurtMicron"
expires="-1"


To:"Curt Arnold"<carnold@houston.rr.com>,"Jason Brittsan"<jasonbri@microsoft.com>
Cc:<www-dom-ts@w3.org>


----- Original Message -----
From: "Curt Arnold" <carnold@houston.rr.com>
To: "Jason Brittsan" <jasonbri@microsoft.com>
Cc: <www-dom-ts@w3.org>
Sent: Wednesday, August 22, 2001 4:58 PM
Subject: Re: [Action Items] Top priority (Revision period, ECMA transform,
Harness, Packaging)


>
> The second thing is to snag the inital domunit release which contained my
> initial take on the NIST test suite for ECMAScript.
> http://prdownloads.sourceforge.net/xmlconf/DOMUNIT.zip.  In that download,
> there should be a jsunit directory which contains JScript based tests.
>
> Download Jsunit from http://www.jsunit.net and expand it into
> domunit/jsunit/jsunit
>
> There should be a file like DOMTestCaseConfig.js in the /domunit/jsunit
> directory that will need to be edited to provide your base directory and
the
> parser under test.
>
> Then load /domunit/jsunit/jsunit/testRunner.html in IE, hit the browse
> button and file a test file in /domunit/jsunit.  Hopefully you should now
be
> running tests.
>
> We will probably diverge substantially from that, but that it at least
where
> I'm starting from.
>
> -------

[mb] I expect that the jsunit version is based on the initial NIST
ECMAScript
tests?  If so, I wouldn't start from here -- it has not been updated to
include
info we learned from doing the java tests -- in particular, info that we
learned
regarding whitespace, entity expansion, etc., and is probably slanted
towards
MSXML, since that's what we had available at the time.  In addition, those
tests were dependant on either synchronous load capabilities, or data
islands.

In the last month, I've had one of my project members working on a html
version.
He has put together a solution based on the current xml version of the tests
and has
figured out a way to get at least some of the tests working in both Mozilla
and IE -- there are issues with the entity, notation, and some namespace
tests
in Mozilla, but other than that, things seem to work on the surface.

His work is based on some of the earlier schema work, and has to be updated
to
be consistent with the present schema files.  I'll spend some time today
trying to
get it to work on my end, and post the results.  I'm sure the user interface
will
need some work, but it's a logical starting point.

--Mary

>
> If you have (or want to setup) the build environment, build the
> "dom1-core-ecmascript" target to generate a directory of .js files (I
think
> it is build/ecmascript/level1/core).  I haven't done any verification of
the
> code and am not an ECMAScript expert.  Could you examine the files to
notice
> any significant structural problems such as using language features that
> would not be available on all targets.  Is there any tool we could use to
> check the generated syntax before trying to run the tests, for example,
> could JScript.NET's command line compiler.
>
> I've placed a snapshot of the currently generated ECMAScript at
http://home.
> houston.rr.com/curta/ecmascript.ZIP
>
> The tests (like the Java implementation) have two parts, the constructor,
> which determines if the test is compatible with the capabilities of the
> parser under test, and the test itself.  If a test was incompatible (say
it
> required hasFeature("HTML","") to be true and it was running on just an
XML
> parser), then it would throw an exception in the constructor and not be
> reported as either a pass or a failure.
>
>



