docno="lists-100-15747822"
received="Fri Jun  1 13:53:14 2001"
isoreceived="20010601175314"
sent="Fri, 1 Jun 2001 11:52:40 -0600 "
isosent="20010601175240"
name="Arnold, Curt"
email="Curt.Arnold@hyprotech.com"
subject="&quot;Bug&quot; categorization [Was: Minutes in brief and action items]"
id="B2C1451A181BD411B88A00E018C1C19C08ACC9@thor.aeathtl.com"
charset="iso-8859-1"
expires="-1"


To:"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>

For comparison, you might look at Apache's bugzilla:

http://nagoya.apache.org/bugzilla/query.cgi

I would have actually flipped those definitions of Category and Group.
However both are vague enough that they can mean anything until you
populate the acceptable values.

I would have had Category roughly equivalent to Severity and 
Group roughly equivalent to Component.  I'll continue the discussion
using the Apache terms, but eventually we would want to bind
them to one of to Category and Group.

The Apache bugzilla has the following values for Severity:
Blocker, Critical, Major, Normal, Minor, Enhancement.

That is reasonably for software components, but to describe
submitted tests and issues against them, we would want
to have some severities like:

invalid: The test is not valid against the schema for tests plus 
additional constraints such as declaring variables before use.

optional-behavior: The test checks behavior beyond that required by the spec.  
For example, requiring entity references when the spec doesn't require them.

misinterpretation: The test misinterprets the DOM spec.

brittle: The test is fails when used with different processor settings (such as ignore element white space), doesn't convert well to other languages.

enhancement: The test could make some additional assertions that would add value.

Any other ways a test could be bad (or at least sub optimal)?

On Component, using the names of major test submissions might be appropriate.
For example, nist.dom1.attr, nist.html1.HTMLTableElement, or xmlconf.dom2.events.EventTarget.  The transforms, schemas, etc could be
components but use the standard software severity.

Now I know what the trashcan next to developer name does.



