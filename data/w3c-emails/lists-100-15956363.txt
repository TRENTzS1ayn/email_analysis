docno="lists-100-15956363"
received="Tue Jun  5 16:28:04 2001"
isoreceived="20010605202804"
sent="Tue, 05 Jun 2001 13:31:39 -0700"
isosent="20010605203139"
name="Ray Whitmer"
email="rayw@netscape.com"
subject="Re: Recap and action items"
id="3B1D41AB.5050006@netscape.com"
charset="us-ascii"
inreplyto="B2C1451A181BD411B88A00E018C1C19C08ACD0&#64;thor.aeathtl.com"
expires="-1"


To:"Arnold Curt"<Curt.Arnold@hyprotech.com>
CC:"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>

Arnold, Curt wrote:

>>[schema-specific]
>>1. We still haven't decided on whether to use roundtripping 
>>to the schema or
>>not during the transform. I personally prefer not doing this, 
>>and putting
>>any necessary information in the test description file, especially for
>>information that is present in the DOM Spec.
>>
>>I personally think we should use as much information from the spec as
>>possible, and not require that roundtripping be made, either 
>>to our DOM TS
>>schema, or to the DOM spec, during transformation. Following 
>>this argument,
>>we would also have to explicitly declare return types, as was 
>>done a few
>>iterations ago.
>>
>
>
>You would need to have more than just returnType attributes,
>you would also need to supply parameter ordering and
>might need parameter types.
>
>It seems a whole lot cleaner to me that the invariant DOM
>definition be kept separate from the test definition.  Otherwise,
>then we have to determine what subset of the DOM definition that
>we need to replicate in the test definition and we have to
>iterate if we don't put enough in.
>
>As I have mentioned in the previous messages, we can
>defer this decision with no adverse impact on test
>authoring.
>
>I think the last iteration is pretty stable, however I think it
>would be premature to "finalize" it before we have attempted
>to write the tests and transforms.
>
I almost answered before.

I am just fine with not respecifying the DOM specification, as long as 
the test generator uses the DOM specification, not only to call methods, 
but to make sure that in languages like ECMAScript the correct data type 
is being returned by the call.  We know there are significant problems 
today in implementations that need to be detected and should prevent an 
implementation from being counted as a conforming implementation.  I 
think you can do this one of several ways:

1.  Create specific tests for determining the return types of a call to 
each API in the specification.  In that case, of course, you have nearly 
embedded the return type into the test.

2.  When the ECMAScript generator generates a call to any method with a 
return value, with it generate a check to make sure the type of the 
returned value is correct.

Ray Whitmer
rayw@netscape.com



