docno="lists-100-15966089"
received="Tue Jun  5 17:06:22 2001"
isoreceived="20010605210622"
sent="Tue, 5 Jun 2001 15:05:29 -0600 "
isosent="20010605210529"
name="Arnold, Curt"
email="Curt.Arnold@hyprotech.com"
subject="RE: Recap and action items"
id="B2C1451A181BD411B88A00E018C1C19C08ACD1@thor.aeathtl.com"
charset="iso-8859-1"
inreplyto="Recap and action items"
expires="-1"


To:"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>

Ray Whitmer wrote:
> I am just fine with not respecifying the DOM specification, 
> as long as 
> the test generator uses the DOM specification, not only to 
> call methods, 
> but to make sure that in languages like ECMAScript the 
> correct data type 
> is being returned by the call.  We know there are significant 
> problems 
> today in implementations that need to be detected and should 
> prevent an 
> implementation from being counted as a conforming implementation.  I 
> think you can do this one of several ways:
> 
> 1.  Create specific tests for determining the return types of 
> a call to 
> each API in the specification.  In that case, of course, you 
> have nearly 
> embedded the return type into the test.
> 
> 2.  When the ECMAScript generator generates a call to any 
> method with a 
> return value, with it generate a check to make sure the type of the 
> returned value is correct.
> 
> Ray Whitmer
> rayw@netscape.com

I'd was leaning to option 2 since the the test will be implicit 
in strongly-typed languages and could automatically be generated 
for weaker-typed languages.

The two ways I could think of testing return type was to
either check retobj.nodeType against the expected value (for
Node's and derivatives) or invoking some property unique
to the expected type.  Is there some other mechanism
that we could consider?



