docno="lists-101-13224430"
received="Wed Dec 10 14:59:36 2003"
isoreceived="20031210195936"
sent="Wed, 10 Dec 2003 13:59:48 -0600"
isosent="20031210195948"
name="Curt Arnold"
email="carnold@houston.rr.com"
subject="DOMTS language extensions"
id="3FD77B34.5020700@houston.rr.com"
charset="ISO-8859-1"
expires="-1"


To:www-dom-ts@w3.org


There are a couple of test issues that appear to require extensions to 
the DOMTS language.

LSParser.parseWithContext allows an implementation to throw an 
NOT_SUPPORTED_ERR if it doesn't support the method.  There is no 
construct in the DOMTS language that would support allowing either the 
exception or a conformant implementation.  What I'd suggest is allowing 
an <else> element to appear after the known error elements in 
assertDOMImplementation.  Like:

<assertDOMImplementation id="notSupported">
    <NOT_SUPPORTED_ERR>
         <parseWithContext var="result" obj="parser" node="context"/>
    </NOT_SUPPORTED_ERR>
    <else>
          <assertNotNull actual="result" id="resultNotNull"/>
    </else>
</assertDOMImplementation>

I'm also anticipating adding two new values for implementationAttribute, 
schemaValidating and ECMAScript.  implementationAttributes are used to 
force the setting of a parser configuration or skip the test.  These 
would be used like:

<test>
     <metadata/>
      <!--   This test is not applicable to ECMAScript 
implementations    -->
     <implementationAttribute name="ECMAScript" value="false"/>
     ...

or

<test>
    <metdata/>
    <!--   this test is only applicable when the parser performs schema 
validation   -->
    <implementationAttribute name="schemaValidating" value="true"/>



