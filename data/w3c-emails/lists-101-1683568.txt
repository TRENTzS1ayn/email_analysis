docno="lists-101-1683568"
received="Fri May 25 13:31:10 2001"
isoreceived="20010525173110"
sent="Fri, 25 May 2001 19:30:45 +0200"
isosent="20010525173045"
name="Dimitris Dimitriadis"
email="dimitris.dimitriadis@improve.se"
subject="[Design] Updated proposal outlined"
id="9F67DC27F4CCD311ABA600508B6A66A44A65C3@VXOIMP1"
charset="iso-8859-1"
expires="-1"


To:www-dom-ts@w3.org
Cc:batik-dev@xml.apache.org,xmlconf-developer@lists.sourceforge.net

In an effort to merge the two frameworks we'll send an updated proposal as a
base for continued discussion. It will be in DTD form but could easily be
converted to a Schema.
 
The major difference is that the <CALL /> element is no longer used, instead
IDL interfaces and methods will be defined in the DTD. This in accordance
with Curt's proposal in which elemenets were meaningfully defined keeping
the structure closer to the specification.
 
Please have a look at it at let's discuss the following points (if you have
more, just say so):

1. Loading mechanism
2. Test packaging (<suite> with enclosed <test href=""> seems to be a good
option)
3. Variable declaration will perhaps still be an open issue
4. Transformation. the XSLT that Mary sent a while back was indeed based on
the DTD that was proposed at the time. Rewriting XSLT for Java and ECMA
should not be a problem.
 
I think the difference between this newer version and the existing two is
small enough to motivate us to try to unify the two previous efforts and
brings whatever is lacking at the time of the proposal into the newer
framework.
 
We should also discuss how to divide work between us once we decide on the
DTD/Schema. We will need to write tests (for DOM level 1), example files to
post on the mailing lists and the W3C page and other places, documentation,
FAQ and so forth.
 
/Dimitris

-----Ursprungligt meddelande-----
Fr?n: Curt Arnold [mailto:carnold@houston.rr.com]
Skickat: den 24 maj 2001 10:29
Till: www-dom-ts@w3.org; xmlconf-developer@lists.sourceforge.net
Kopia: batik-dev@xml.apache.org
?mne: [Xmlconf-developer] Update of JUnit based DOM tests


I've made an update the JUnit part of the DOMUNIT subproject to enable
testing of the Oracle XML Parser and the Batik DOM implementation.  This
will probably be the final "release" based on my personal translation of the
NIST tests to JUnit.  The files can be downloaded from
http://sourceforge.net/project/showfiles.php?group_id=8114
<http://sourceforge.net/project/showfiles.php?group_id=8114&release_id=36555
> &release_id=36555
 
Xerces-J 1.4.0 and the CVS version of Crimson pass all the NIST tests.
Xerces fails my experimental events tests since the release version expects
DocumentEvent.createEvent("Event") not ("Events").  You can run just the
official NIST tests by using
net.sourceforge.xmlconf.domunit.dom1.nist.NISTDOM1Test as the main class.
 
Batik still has a lot of test failures, primarily due to not maintaining DTD
information.  I haven't confirmed that all the DOM issues that I reported
before the Batik 1.0 release were fixed.
 
The tests are pretty easy to run.  If you have a JAXP compatible parser in
your classpath or have Xerces, Crimson or XML4J in the same directory, you
can just run 
 
java -jar domunit.jar
 
If you want to run the Oracle V2 parser, you need a JAXP implementation
(either jaxp.jar or xerces.jar) in the classpath or current directory and
then
 
java
-Djavax.xml.parsers.DocumentBuilderFactory=net.sourceforge.xmlconf.domunit.O
racleDocumentBuilderFactory
 
To run Batik, you need some subset of the Batik jars (there are now like 10
of them and I'm not sure what subset is necessary) in the same directory and
a JAXP compatible SAX parser (xerces.jar or jaxp.jar + crimson.jar)
 
java
-Djavax.xml.parsers.DocumentBuilderFactory=net.sourceforge.xmlconf.domunit.B
atikDocumentBuilderFactory
 
The output will document 5 or so switches that allow you to test ignoring
whitespace, validating, expanding enities, etc.



