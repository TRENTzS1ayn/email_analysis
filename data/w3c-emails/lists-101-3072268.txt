docno="lists-101-3072268"
received="Sat Nov 17 19:53:12 2001"
isoreceived="20011118005312"
sent="Sun, 18 Nov 2001 01:50:12 +0100"
isosent="20011118005012"
name="Dimitris Dimitriadis"
email="dimitris@ontologicon.com"
subject="Re: L2-core-getElementsByTagNameNS02"
id="200111180051.fAI0pVU09746@mail.24-7webhosting.com"
charset="us-ascii"
inreplyto="06f101c16fc6$a0b66400$6800000a&#64;brownell.org"
expires="-1"


Cc: Curt Arnold<carnold@houston.rr.com>,www-dom-ts@w3.org
To: David Brownell<david-b@pacbell.net>

comments inlined

On Saturday, November 17, 2001, at 11:53  PM, David Brownell wrote:

>>    If the
>> ultimate correct answer is 2, then the test should be changed to 
>> require
>> exactly 2 elements in the node list.
>>
>> I would agree that your interpretation of the recommendation text is
>> reasonable and possibly what the WG was trying to say, but if all (or 
>> almost
>> all) the implementations read it a different way, then I would suggest 
>> an
>> errata to ratify the defacto behavior.
>
> That's pretty much what I said ... either the spec has a bug, or some
> implementations do.  I think it's the implementations, but the question
> does need to get answered.  Ratifying random bugs is a dangerous route.
>
> How does the DOM WG get involved when such issues get raised?
>
[dd] If there are tests that bring up the question of there possibly 
being an error in the specification, it gets immediately discussed by 
the DOM WG for further action. There can be basically two outcomes:

1. The test is considered incorrect, in which case the specification 
remains intact, perhaps reqwriting is necessary to clarify things futher
2. The tests is correct, in which case the WG decides on what should be 
done to the spec, perhaps an erratum

This is not an exhaustive list, things can end up in between. In any 
case it is written into the DOM TS charter that tests bringing 
specification ambiguity to the surface are dealt with in due course.

There area of course cases in between

>
>> If you could pass along some quick notes on using Saxon with Ant, I'd 
>> be
>> grateful.
>
> All I did was run ANT 1.4.1 (current) in an environment that's set up 
> to default
> to using the current GNUJAXP code (SAX and DOM) and Saxon 6.4.2; I've
> no idea if more recent versions of Saxon would behave differently.
>
> The build ran fine, modulo out-of-memory problems caused by having too
> much other stuff going on at the same time.
>
> - Dave
>
>



