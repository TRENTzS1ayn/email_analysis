docno="lists-101-4365003"
received="Thu Oct 25 14:32:16 2001"
isoreceived="20011025183216"
sent="Thu, 25 Oct 2001 12:30:01 -0600"
isosent="20011025183001"
name="Arnold, Curt"
email="Curt.Arnold@hyprotech.com"
subject="RE: isSupported12.xml"
id="70E215722F6AD511820A000103D141D40AA62F@thor.aeathtl.com"
inreplyto="isSupported12.xml"
expires="-1"


To:"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>


> [mb] That's only valid if the spec indicates what should 
> happen with an unrecognized or malformed feature or version.  
> In this case, no DOMExceptions are defined.  By the way, I 
> think that all of the isSupported tests could be replaced 
> with a modified version of isSupported12.xml, where we run 
> through all of the known features, and assert that a variable 
> = "done" after successful completion.

The spec says that No Exceptions are thrown.  Well, possibly unless you are passing a null string for feature (which might be covered by a general caveat in the Exceptions section).  Being able to
pass an arbitrary string that does not correspond to a well known feature and having a value returned is a behavior that is depended upon.  If the spec writers had intended for the implementation to
throw an exception if the feature or version did not been some expectation, it would have been explicitly stated.

> 
> In looking into this problem, we've also noticed that the 
> feature "XML" corresponds to all of the extended interfaces.  
> These interfaces do not have to be supported by a HTML-only 
> implementation, and therefore should not be included in core. 
>  Maybe we should identify a different tree, called XML, for 
> the tests that correspond to these interfaces, so that there 
> is a clear mapping to the spec.

Any test that starts by loading an XML document (as I believe that all the current tests do) should also support the "XML" feature.  When we start putting "HTML" tests into core (for core features
within an HTML implementation), then we would need to guard the XML specific tests with a <hasFeature feature="XML"/> in the prolog and HTML specific tests with a <hasFeature feature="HTML"/>



