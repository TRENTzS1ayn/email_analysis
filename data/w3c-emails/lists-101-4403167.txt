docno="lists-101-4403167"
received="Thu Oct 25 15:41:05 2001"
isoreceived="20011025194105"
sent="Thu, 25 Oct 2001 13:38:47 -0600"
isosent="20011025193847"
name="Arnold, Curt"
email="Curt.Arnold@hyprotech.com"
subject="RE: isSupported12.xml"
id="70E215722F6AD511820A000103D141D40AA630@thor.aeathtl.com"
inreplyto="isSupported12.xml"
expires="-1"


To:"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>

> [mb]  I'm not following you here.

[ca]
An implementation is not allowed to purposefully throw an exception for conditions that aren't explicitly defined.  There is a general allowance that run-time errors, such as memory exhaustion and
null pointer references, can occur.  However, if a method says "No Exceptions" then it shouldn't purposefully throw an exception.  The expected behavior of isSupported when presented with an
unrecognized or unusual feature is to return false.  Throwing an exception, however well-intended, is not conformant.

Putting a wacky feature in the test list is a check that the implementor didn't decide to throw an exception.


> [mb] I disagree.  The spec clearly states that the extended 
> interfaces are optional --

[ca]
However, to get to the section of the test that checks isSupported(), this particular test (and most if not all of our other tests) loads an XML document.  This test presupposes support for XML as
part of its minimal condition to run.  We have not been putting that minimum requirement into the test prolog, however we will need to do so eventually.  When that is placed in the prolog, this test
would not run unless the implementation.hasFeature("XML") returned true.

So with the precondition that this test only runs on implementations where implementation.hasFeature("XML"), then isSupported("XML") should also return true.



