docno="lists-101-4446050"
received="Thu Oct 25 21:18:15 2001"
isoreceived="20011026011815"
sent="Thu, 25 Oct 2001 21:25:52 -0700"
isosent="20011026042552"
name="Mary Brady"
email="mbrady@nist.gov"
subject="Re: isSupported12.xml"
id="001801c15dd6$4d00ff20$0100a8c0@scooby"
charset="iso-8859-1"
inreplyto="70E215722F6AD511820A000103D141D40AA631&#64;thor.aeathtl.com"
expires="-1"


To:"Arnold, Curt"<Curt.Arnold@hyprotech.com>,<www-dom-ts@w3.org>


> > As far as throwing exceptions, when I see that there are No
> > Exceptions, I read that as no DOMExceptions -- are you
> > talking about something else?
>
> No Exceptions means that the implementation should throw no exceptions,
DOMException or other.  The caller depends that the only exceptions thrown
are those that are declared.  If the implementation
> throws an exception that was not declared (on platforms where that is
possible, it is enforced by the language in Java), then the contract with
the caller is violated.
>

[mb] Is this defined in the spec somewhere, because I'm not seeing it.  In
fact, I see the opposite in the spec.

from the spec...
DOM operations only raise exceptions in "exceptional" circumstances, i.e.,
when an operation is impossible to perform (either for logical reasons,
because data is lost, or because the implementation has become unstable). In
general, DOM methods return specific error values in ordinary processing
situations, such as out-of-bound errors when using NodeList.

Implementations should raise other exceptions under other circumstances. For
example, implementations should raise an implementation-dependent exception
if a null argument is passed.

...

Depending on how wanted to code this, it could be thrown by the language, or
it could be caught and an implementation-dependent exception could be
thrown.

--Mary



