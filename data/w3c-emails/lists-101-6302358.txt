docno="lists-101-6302358"
received="Sat Feb  2 23:23:48 2002"
isoreceived="20020203042348"
sent="Sat, 2 Feb 2002 22:23:35 -0600"
isosent="20020203042335"
name="Curt Arnold"
email="carnold@houston.rr.com"
subject="Java bootstrap rework now supports DOM4J close on Batik"
id="001f01c1ac6a$8c5b9e90$a800a8c0@CurtMicron"
charset="iso-8859-1"
expires="-1"


To:<www-dom-ts@w3.org>

I started trying to do a little code clean up and couldn't help myself.  I just committed a pretty substantial rework of the bootstrapping code that added support for DOM4J and is really close on Batik.

Though the underlying code is pretty radically changed, running tests on the JAXP supporting parsers should be unchanged.

To run the test suite on DOM4J, place dom1-core.jar, junit.jar, junit-run.jar and dom4j-full.jar in the same directory.  Avoid placing another JAXP parser in the directory to allow DOM4J to use the embedded Aelfred SAX parser (things crash when Xerces-J 2 is used instead).  Then either

1a) java -jar junit-run.jar
1b) enter org.w3c.domts.level1.core.TestDOM4J as the class to test

2) java -classpath junit-run.jar junit.textui.TestRunner org.w3c.domts.level1.core.TestDOM4J

Batik appears to fail with IO errors for every test (maybe due to a problem with ent1 , maybe not).  To run it,

1) copy dom1-core.jar, junit.jar, junit-run.jar into Batik lib directory
2) Download Crimson 1.1.3 and replace crimson-parser.jar with crimson.jar
3) java -jar junit-run.jar
4) Select org.w3c.domts.level1.core.TestBatik

Getting Batik to return reasonable test results may require digging into the Batik code and see why it is failing.

The logic that disqualifies tests that are inconsistent with the parser settings are unlikely to be correct, however both Batik and DOM4J fail so many tests that the inappropriate failures are dwarfed by the other failures.

I added a moderate amount of JavaDoc comments and the design is cleaner, so hopefully the automatically generated documentation is now somewhat helpful.



