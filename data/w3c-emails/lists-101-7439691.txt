docno="lists-101-7439691"
received="Thu Feb 14 16:19:48 2002"
isoreceived="20020214211948"
sent="Thu, 14 Feb 2002 14:20:17 -0700"
isosent="20020214212017"
name="Arnold, Curt"
email="Curt.Arnold@hyprotech.com"
subject="RE: Clarification in index.html"
id="70E215722F6AD511820A000103D141D40AA7BC@thor.aeathtl.com"
inreplyto="Clarification in index.html"
expires="-1"


To:"'www-dom-ts@w3.org'"<www-dom-ts@w3.org>

Currently, DOMTestCase.js sniffs the browser to detect the appropriate DOM
implementation.  If it sniffs Mozilla, it will try to use its DOM.  If it
sniffs IE, then it will try to create the MSXML parser using new
ActiveXObject("MSXML2.DOMDocument").  If the media type is SVG, then it will
use Adobe's SVG control.

The failure of the test suite to run on Mac OS X IE is due to the browser
sniffing IE, but trying a Windows specific mechanism of getting an XML
parser.  A smarter DOMTestCase.js would be sniffing if IE is running on a
Mac and finding the right way to load an XML document (how to do that I
haven't found).

So there are a couple of ways to run the test suite for non-default IE XML
parsers:

A) Manually change the new ActiveXObject() statement in DOMTestSuite.js.

B) Change the registry so that MSXML2.DOMDocument points to MSXML4.

If you could suggest what DOMTestSuite.js could "sniff" to determine that
MSXML4 is the appropriate parser to test, we might consider adding more
smarts.  But as it stands, DOMTestSuite.js considers that there is only one
loader per combination of browser and media type and the loader for IE and
"text/xml" is whatever is registered for MSXML2.DOMDocument.



