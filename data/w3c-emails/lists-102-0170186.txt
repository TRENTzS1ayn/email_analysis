docno="lists-102-0170186"
received="Thu May  4 18:14:39 2000"
isoreceived="20000504221439"
sent="Fri, 5 May 2000 00:14:22 +0200"
isosent="20000504221422"
name="Julian Reschke"
email="reschke@muenster.de"
subject="RE: [dom-xpath] XPath or? (was RE: Announcing www-dom-xpath&#64;w3.org)"
id="NCBBIPMOPKLLGKJPBINCOEAHEDAA.reschke@muenster.de"
charset="US-ASCII"
inreplyto="NDBBKDFLFKGBNPJPGKDFAEIACDAA.dave.pawson&#64;virgin.net"
expires="-1"

To:<dave.pawson@virgin.net>,<www-dom-xpath@w3.org>


> From: www-dom-xpath-request@w3.org
> [mailto:www-dom-xpath-request@w3.org]On Behalf Of Dave Pawson
> Sent: Thursday, May 04, 2000 7:27 PM
> To: www-dom-xpath@w3.org
> Subject: RE: [dom-xpath] XPath or? (was RE: Announcing
> www-dom-xpath@w3.org)
>
> ...
>
>      Maybe this actually is the killer use case for XPath on DOM?
>      That an XSLT
>      engine should be able to use it rather than to have to
>      implement it's own
>      XPath implementation?
>
> Sorry to sound negative, but I haven't yet heard anything
> convincing that says this is 'real'.
>
>
> Some... may.. could.. I guess...
>
> Can I sound unconvinced that there is a real use case here.
> Regards, DaveP

The point I was trying to make (:-) was: if one aims for a "complete" API,
it certainly needs to implement all XPath functionality an imaginary
XSLT-on-top-of-DOM-implementation would need.

BTW: I am sure that those ones who work on persistent DOMs would love to be
able to use an off-the-shelf XSLT on top of their  own DOM/XPath
implementations.

Julian



