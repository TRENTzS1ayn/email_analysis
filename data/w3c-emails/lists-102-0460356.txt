docno="lists-102-0460356"
received="Tue May  9 03:59:25 2000"
isoreceived="20000509075925"
sent="Tue, 09 May 2000 08:57:16 +0100"
isosent="20000509075716"
name="Francis Norton"
email="francis@redrice.com"
subject="Re: [dom-xpath] Competing Proposals Proposal"
id="3917C4DC.C936CBF@redrice.com"
charset="us-ascii"
inreplyto="OFEEAF36DB.7F3DAC97-ON852568DA.0002AC63&#64;lotus.com"
expires="-1"


To: Scott Boag/CAM/Lotus<Scott_Boag@lotus.com>
CC:www-dom-xpath@w3.org



Scott Boag/CAM/Lotus wrote:
> 
> Francis Norton <francis@redrice.com> wrote:
> > In other words an API that supports both
> > feature sets will be a 2) rather than a 1) in any case.
> 
> I was thinking that 1) would be a method directly on the node, as the
> Microsoft and Oracle methods are today, while 2) would be a separate
> interface, minimal but with an eventual complete interface in mind.
> 
In this case, is the choice between 1) and 2) something like this?:

ease of initial use:(1) +1;(2): 0?
ease of implementation:(1) ?; (2) ?
ease of expansion:(1) -1;(2) +1

Are there any other big issues? 

I'd be happy to work through my use case and any others suggested using
(1) and (2) syntaxes to investigate the ease of use / slope of learning
curve, once we have a (2)-style proposal. 

Francis.



