docno="lists-102-10121185"
received="Tue Oct 20 10:54:12 1998"
isoreceived="19981020145412"
sent="Tue, 20 Oct 1998 15:49:31 +0100"
isosent="19981020144931"
name="Miles Sabin"
email="msabin@cromwellmedia.co.uk"
subject="RE: An observation about &quot;live&quot; NodeLists"
id="c=US%a=_%p=Cromwell_Media%l=ODIN-981020144931Z-24680@odin.cromwellmedia.co.uk"
inreplyto="An observation about &quot;live&quot; NodeLists"
expires="-1"


To:"'Arnaud Le Hors'"<lehors@w3.org>,"'www-dom@w3.org'"<www-dom@w3.org>

Arnaud Le Hors wrote,
> keshlam@us.ibm.com wrote:
> > Since Java's GC-based, making the Nodes aware of the 
> > NodeLists means the NodeList objects have to persist
> > as long as the Nodes they're based on do; there's no 
> > architected way to tell the DOM that they're no longer
> > needed.
> 
> I know we can't rely on this yet but the WeakReferences
> in Java 1.2 will greatly help address this problem.

Sadly not ... even with 1.2 weak refs we still have no
guarantees on how soon we will be notified that an object
has only weak refs to it. Basically the situation is
much the same as it is with finalize() ... the only
difference is that the strong ref/strong ref cycle that
JK is worrying about (because it prevents GC) can be
broken by replacing it with a strong ref/weak ref cycle
(which will allow GC). But we're still at the mercy of
the indeterminacies of Java GC.

There is, in any case, a way of dealing with the cycle
that gets you just as much/little as weak refs, but is
fine with Java 1.1 ... hint, try a combination of the
handle-body idiom with finalize().

Err ... I can elaborate on that if it's not too far off
topic for this list ...

Cheers,


Miles

-- 
Miles Sabin                          Cromwell Media
Internet Systems Architect           5/6 Glenthorne Mews
+44 (0)181 410 2230                  London, W6 0LJ
msabin@cromwellmedia.co.uk           England



