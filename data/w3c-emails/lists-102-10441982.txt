docno="lists-102-10441982"
received="Tue Nov  3 09:03:25 1998"
isoreceived="19981103140325"
sent="Tue, 3 Nov 1998 09:03:04 -0500"
isosent="19981103140304"
name="keshlam@us.ibm.com"
email="keshlam@us.ibm.com"
subject="Re: XML APIs"
id="852566B1.004C76B7.00@us.ibm.com"
charset="us-ascii"
inreplyto="XML APIs"
expires="-1"

To:www-dom@w3.org


If you want to use the DOM as the XML parse tree, I really don't see
anything that keeps you from doing so. There are hazards if you attempt to
simultaneously iterate through it (which is what NodeList is, in disguise)
and modify it, but in one guise or another that's true of most data
structures.

The iterative-tree-traversal mechanism certainly does work; I'm using it.
In fact, in some places it works better than I'd really like it to -- If I
were king <grin/> I would have preferred that EntityReference point to an
Entity for its value, rather that replicating the Entity's children.

I agree that iterators, unlike NodeList, shouldn't attempt to be "live" but
should simply walk the tree. And I'm assuming that's exactly what they'll
do. We haven't yet seen the spec for Level 2; let's note that a concern has
been stated (I think everyone is _VERY_ aware of the issue!), see what the
WD looks like, and _then_ pick it apart if there's a problem.

I'm willing to trust that NodeList is a unique solution for a special set
of problems and a particular customer base.
______________________________________
Joe Kesselman  / IBM Research
Unless stated otherwise, all opinions are solely those of the author.



