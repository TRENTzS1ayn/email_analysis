docno="lists-102-10748722"
received="Tue Nov  3 21:54:04 1998"
isoreceived="19981104025404"
sent="03 Nov 1998 18:59:21 -0800"
isosent="19981104025921"
name="Stephen R. Savitzky"
email="steve@rsv.ricoh.com"
subject="Re: Walking the DOM (was: XML APIs)"
id="qc90hsqi2e.fsf@gelion.crc.ricoh.com"
inreplyto="Tue, 03 Nov 1998 17:09:42 -0800"
expires="-1"

To:www-dom@w3.org


Claude Zervas <claude@utlco.com> writes:

> Again, I think that in light of all the severe disagreements about
> NodeList 'liveness' and iterator behaviour there should be a branching of
> the spec for applications that are not designed for naive script writers
> and where performance is of foremost importance.

THANK YOU!  THANK YOU!  THANK YOU!
I was beginning to think I was the only one with this opinion.

> This 'server-or-whatever' DOM would have at least the following
> characteristics:

Call 'em "features", and make their presence or absence detectable using
DOMImplementation's hasFeature method.

> 1. NodeLists do not need to be 'live'
> 
> 2. Node.Next/PreviousSibling attributes are deprecated or are simply
> convenience methods that may (or may not) be horribly slow.

firstChild and parentNode, too.  

> 3. Iterators are introduced and provide behaviour that may
> be undefined if the tree is modified underneath them.
> I would also be ok with the idea that the iterators simply
> throw an exception if the tree is mutated.

Throwing an exception requires an O(log N) test somewhere.  

I would like to see iterators with something like the following interface:

   interface Iterator {
          readonly attribute  DOMString            nodeName;
                   attribute  DOMString            nodeValue;
          readonly attribute  unsigned short       nodeType;
          readonly attribute  Document             ownerDocument;

          booleantoParentNode();
          booleantoFirstChild();
  booleantoPreviousSibling();
          booleantoNextSibling();
  voidinsertBefore(in Iterator newSibling)
                                                raises(DOMException);
  voidinsertAfter(in Iterator newSibling)
                                                raises(DOMException);
  voidreplace(in Iterator replacement)
                                                raises(DOMException);
          voidremove() 
                                                raises(DOMException);
          voidappendChild(in Iterator newChild)
                                                raises(DOMException);
          voidprependChild(in Iterator newChild)
                                                raises(DOMException);
          booleanhasChildNodes();
  booleanisReadOnly();
          NodecloneNode(in boolean deep);
  IteratorcloneIterator();
  voidclose();

  booleantoNamedChild(DOMString name);
  IteratoriterateAttributes();
        };

Note that this has essentially all the characteristics of Node except that
you can never get at the node itself (though you _can_ get at a _clone_ of
it) or its children.  Such an iterator can be used, for example, to traverse
documents that are never entirely present in memory, or exist on a remote
server. 

Note also that all the structure-modification interfaces also take
Iterator instead of Node.  This lets you manipulate a document without
ever constructing a single Node -- you could make your parser be an
implementation of Iterator.

A practical DOM would, of course, have both Iterator and a NodeIterator or
TreeIterator that operates in the ``classical'' manner, with an accessible
current Node and taking Node operands for the editing operations.  Probably
a variety of others (e.g. ReadOnlyIterator) as well.

> 4. EntityReferences are really references and no copying is done.

With a method, getReferencedEntity(), to do the obvious.

> It would also be nice to have a standard DOM factory for creating objects
> outside of the context of a document. This is very useful for creating
> partial documents that can be used in templates, etc. (I'm thinking HTML
> DOM here).

I agree. 

-- 
 Stephen R. Savitzky   Chief Software Scientist, Ricoh Silicon Valley, Inc., 
<steve@rsv.ricoh.com>                            California Research Center
 voice: 650.496.5710   fax: 650.854.8740    URL: http://rsv.ricoh.com/~steve/
  home: <steve@starport.com> URL: http://www.starport.com/people/steve/



