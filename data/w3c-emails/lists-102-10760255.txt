docno="lists-102-10760255"
received="Tue Nov  3 22:30:29 1998"
isoreceived="19981104033029"
sent="Tue, 3 Nov 1998 19:29:26 -0800"
isosent="19981104032926"
name="Don Park"
email="donpark@quake.net"
subject="Re: Walking the DOM (was: XML APIs)"
id="01b501be07a3$54911310$2ee044c6@arcot-main"
charset="iso-8859-1"
inreplyto="Walking the DOM (was: XML APIs)"
expires="-1"


To:<www-dom@w3.org>

Stephen,

>THANK YOU!  THANK YOU!  THANK YOU!
>I was beginning to think I was the only one with this opinion.


Many in the WG feels the same as you do so don't lose hope yet.  Patience,
however, is definitely needed.

>firstChild and parentNode, too.


I think firstChild and parentNode can be retained as a absolute view of the
document.  All we need is a sort of 'view' interface to use as the context:

Node parentNode = crazyView.getParentNode(aNode);
Node firstChild = crazyView.getFirstChild(parentNode);

>I would like to see iterators with something like the following interface:
[snip]

Please don't go overboard.  What you are describing is not an iterator but a
rather distasteful but strangely sensible combination of
Iterator/View/Cursor patterns.

A cleaner way to do this is to use something like this:

public interface NodeModel {
    Object getParentNode (Object node);
    ...
    NodeIterator createIterator (Object node);
    NodeView createView (Object context);
    ...
}

Document views can be easily support with this design like this:

public interface NodeView extends NodeModel {
    ...
}

We are too late to do this though...

Best,

Don Park
Docuverse



