docno="lists-102-11135310"
received="Mon Nov 16 22:58:14 1998"
isoreceived="19981117035814"
sent="Mon, 16 Nov 1998 21:58:08 -0600"
isosent="19981117035808"
name="Jeff Mackay"
email="jmackay@vtopia.com"
subject="RE: DOM Level 2 Core Features"
id="000301be11de$7da30480$03000004@soho.enteract.com"
charset="Windows-1252"
inreplyto="199811170258.SAA21986&#64;doppio.eng.sun.com"
expires="-1"

To:<www-dom@w3.org>


Must-have for level 2 (or how about a level 1.5):

- iterators (with a specification that doesn't constrain implementations
too much)

- DTD access

- validation (as a method on DocumentFragment--or better yet, as an
implementation of the strategy pattern)

- a clarification of the "liveness" of nodelists.  Without trying to start
a religious war, I believe that the "livenes" of a nodelist is a quality of
service issue.  Browser implementations may provide live nodelists,
implementations in more constrained environments may not. Place an attribute
on the DOMImplementation that will specify whether or not an implmentation
supports live nodelists.

Nice-to-have for level 2 (but only if they don't delay the above features):

- a visitor pattern

- a search mechanism

- integration with CSL, XSL, XLL

- an event model (like DHTML)

- A more robust Document/DocumentContext

And that's it. Don't try to throw in the kitchen sink--it constrains (and
complicates) implementations too much, and we don't need it. The visitor
pattern allows implementations to extend the functionality of the DOM
without making incompatible extensions.

Jeff Mackay
Vtopia, Inc.



