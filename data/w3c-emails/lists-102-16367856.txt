docno="lists-102-16367856"
received="Mon Oct  4 13:02:07 1999"
isoreceived="19991004170207"
sent="Mon, 4 Oct 1999 13:01:23 -0400"
isosent="19991004170123"
name="keshlam@us.ibm.com"
email="keshlam@us.ibm.com"
subject="Re: DOM L2 comments, various"
id="85256800.005D848A.00@D51MTA03.pok.ibm.com"
charset="us-ascii"
inreplyto="DOM L2 comments, various"
expires="-1"

To:www-dom@w3.org


>Those of us who need to represent DTD's _must_ define new node types.

There are other solutions. Produce a custom representation for the DTD. Or store
the DTD as a normal document tree, with nodes for ELEMENT_DECL and ATTR_DECL and
so on, specifying the names via attributes -- in other words, translate on the
fly into something like the XML Schema syntax -- subclassing or adding access
methods to ease lookup.

Hopefully we'll (finally!) fix that hole in Level 3, so this particular need
will go away. Cutover costs from any of these to DOM Level 3's official solution
is likely to be roughly equivalent, with lowest conversion cost possibly being
the schema-like approach since I think that's the direction the DOM is likely to
go (because it would allow applications to ignore the syntax issue).

I'm not entirely opposed to the concept of extending the DOM via custom node
types. But I do have some serious concerns about the portability impact if those
appear as part of the main document tree, so I would consider it a last-ditch
solution... and I'm not really sure we want to bless it rather than benignly
ignore it. It has to be an implementation-specific solution anyway, since
creating a new node type will at the very least require subclassing a specific
implementation's Node/s.
______________________________________
Joe Kesselman  / IBM Research



