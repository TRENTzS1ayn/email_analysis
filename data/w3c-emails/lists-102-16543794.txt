docno="lists-102-16543794"
received="Tue Oct  5 04:11:00 1999"
isoreceived="19991005081100"
sent="Tue, 05 Oct 1999 10:10:56 +0200"
isosent="19991005081056"
name="Arnaud Le Hors"
email="lehors@w3.org"
subject="Re: DOM L2 comments, various"
id="37F9B290.788C8C5@w3.org"
charset="us-ascii"
inreplyto="NDBBLNJDHJDKCNEECKOLEEBCCCAA.jmackay&#64;vtopia.com"
expires="-1"


To:www-dom@w3.org

Jeff Mackay wrote:
> 
> Are implementors allowed to extend the NodeType and Exception lists?

Implementors can do whatever they want. However, the whole purpose of
the DOM is to provide users with an interoperable API. Implementing
and/or using any extension makes this pretty useless. So I don't see
what the benefit of allowing extensions would be. Either you care about
interoperability and all you can do is to stick with the standard, or
you don't and you can use whatever you want. There is just no room for
applications or implementations being partially interoperable. 

> Regardless of the answer, the
> spec should be revised to remove ambiguity.

I added a note stating that all other codes are reserved to W3C for
possible future use.

> By closing the NodeType list, the DOM API
> makes extensions available only to typed languages. (In Java, I can cast my
> Element object to a SuperElement when I need to, but I can't access the
> functionality of SuperElement from ECMAScript because I have no way to
> determine that a node is a SuperElement).

I don't understand. If you're already up for using non standard
extensions, why can't you simply use a non standard type attribute for
that? In ECMAScript it is especially easy to add a property to an
object.
-- 
Arnaud



