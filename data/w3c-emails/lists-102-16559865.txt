docno="lists-102-16559865"
received="Tue Oct  5 07:50:02 1999"
isoreceived="19991005115002"
sent="Tue, 5 Oct 1999 07:39:57 -0400"
isosent="19991005113957"
name="keshlam@us.ibm.com"
email="keshlam@us.ibm.com"
subject="Events ordering: Largely undefined?"
id="85256801.0040FD67.00@D51MTA03.pok.ibm.com"
charset="us-ascii"
expires="-1"

To:www-dom@w3.org


After consideration: We may be able to nail down the exact sequence for _simple_
mutations (insert and remove), but I think we may have to declare compound
operations subject to variation from DOM to DOM, unless we're willing to specify
DOM implementation to a greater degree than in the past.

As a trivial example: replaceChild can be implemented as either "insert new kid
before old, then remove old", or "note old kid's position, remove old kid,
insert new". The former's more efficient in a linked-list implementation, the
latter's more efficient in an array-based implementation... so we probably don't
want to overspecify.

That does mean that folks can't count on one set of events occurring before the
other. I don't think that's a problem. But it might be a good idea to state it
explicitly, to discourage folks from relying on any given implementation's
behavior.

______________________________________
Joe Kesselman  / IBM Research



