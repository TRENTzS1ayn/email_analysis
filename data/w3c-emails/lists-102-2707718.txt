docno="lists-102-2707718"
received="Thu Apr 30 14:04:14 1998"
isoreceived="19980430180414"
sent="Thu, 30 Apr 1998 14:04:03 -0400"
isosent="19980430180403"
name="David Megginson"
email="ak117@freenet.carleton.ca"
subject="xxxML on top of, embedded in XML"
id="199804301804.OAA00508@unready.microstar.com"
charset="us-ascii"
inreplyto="199804301751.KAA28114&#64;elroy.corp.Adobe.COM"
expires="-1"


To:www-dom@w3.org

Richard Cohn writes:

 > 1. Suggestions for specification of a DOM for XML applications such
 > as PGML and MathML. Does the working group expect that XML
 > applications use the generic XML DOM specification or a
 > specialization? My perhaps naive take is that the HTML DOM
 > specification is one example of a specialization in that classes
 > are defined that correspond to particular HTML elements and that
 > these classes provide direct access to most element attributes. My
 > current thinking is to leave the Document object as is, but to
 > subclass Element.  All document-wide but PGML-specific info would
 > be tied to the root element.  This is different from the HTML DOM
 > but seems more general and more interoperable.

The DOM provides an object model for generic documents, and such a
model will be very useful for general formatting, editing, archiving,
and searching processes.

However, it seems to me that PGML implies a very different object
model of hierarchical and linked graphic components, and that it would
be inefficient to build a DOM tree first, only to tear it down and
build a vector-graphics object tree in its place.  Why not design a
PGML object model, and build it directly from an event-based API?  The
difference in overhead for a large (say, 1GB) vector graphics file
will be enormous.

 > 2. Supposing the answer to 1 is that a specialized DOM for PGML and
 > other XML applications is expected, has thought been given to how
 > to integrate multiple DOMs? It seems that MathML or PGML embedded
 > in a more general XML document would be considered a
 > DocumentFragment. This all should 'just work', but as the XML
 > people have found with namespaces, there can be lots of interesting
 > details to work out.

As I mentioned above, the DOM is a solution to a specific problem.
Every XML document implies some kind of object model -- sometimes (as
in the case of a technical manual, a poem, or a novel), the DOM will
be a very good match; other times (as in the cases of serialised
components, vector graphics, or an XSL stylesheet), the DOM will be
too far from the optimal object model.


All the best,


David

-- 
David Megginson                 ak117@freenet.carleton.ca
Microstar Software Ltd.         dmeggins@microstar.com
      http://home.sprynet.com/sprynet/dmeggins/



