docno="lists-102-2880557"
received="Fri May  1 18:19:45 1998"
isoreceived="19980501221945"
sent="Fri, 1 May 1998 15:23:41 -0700"
isosent="19980501222341"
name="Andrew n marshall"
email="amarshal@usc.edu"
subject="RE: Alternative to the Live NodeIterator"
id="000101bd754f$cb9333d0$91d00980@solo.isi.edu"
charset="iso-8859-1"
inreplyto="199805012103.OAA14732&#64;sqwest.bc.ca"
expires="-1"

To:"Peter Sharpe"<peter@sqwest.bc.ca>,<www-dom@w3.org>


> -----Original Message-----
> From: Peter Sharpe
> Subject: RE: Alternative to the Live NodeIterator
>
 . . .
> I still think we are OK for ECMAScript and COM for the reason I mentioned
> above: the reference from the list will not be known to the scripting
> language or the COM interface so garbage collecting or reference counting
> will work. The problem comes in the Java bindings. I have no good solution
> in that case. You can implement your own memory management at the expense
> of interoperability, I guess.

How does ECMAScript deal with this?  It is my understanding that it is a
problem with implicit garbage collection.  My naive understanding of
ECMAScript is that there is no equivalent of the C++ delete on objects, only
properties.  Therefore ECMAScript has the same problem.

In addition, a solution in C++ requires the NodeIterator's desctructor to do
the detachment from the tree implies that the DOM user will delete the
NodeIterator.  Of course these aren't unusual expectations in C++.

> Can you Java experts not find some other way out of this dilemma? I don't
> believe Andrew Marshall's suggestion of adding a property set to Node
> solves the problem.

My previous proposal had more to the usefulness of NodeIterators being live.
Given what has been said about the need for progressively processing the
document, I believe this aspect of my proposal is mute.  Any alternative
benefits remain legitimate, although nonessential.



Andrew n marshall
? student - artist - programmer
??? http://www.media-electronica.com/anm-bin/anm
????? "Everyone a mentor, Everyone a pupil"



