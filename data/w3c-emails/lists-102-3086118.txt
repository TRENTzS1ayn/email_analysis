docno="lists-102-3086118"
received="Sun May  3 22:13:40 1998"
isoreceived="19980504021340"
sent="03 May 1998 21:17:23 -0500"
isosent="19980504021723"
name="Craig Brozefsky"
email="craig@duomo.onshore.com"
subject="Re: Some more suggestions and a DOM OM"
id="871zuavky4.fsf@duomo.onshore.com"
inreplyto="Sun, 3 May 1998 20:15:31 -0400"
expires="-1"

To: Mike Champion<mcc@arbortext.com>
Cc:"Jeff"<jmackay@vtopia.com>,<www-dom@w3.org>


Mike Champion <mcc@arbortext.com> writes:

> At 07:35 PM 5/3/98 -0400, Craig Brozefsky wrote:
> >
> >I find that the EOF from NeXT is full of interesting examples of how
> >to provide abstractions for writing interfaces to objects
> >derived/stored in a secondary storage mechanism.  In the case of EOF
> >it's Oracle or any data store.  In DOM it's an SGML/XML document.
> 
> A number of us are thinking about DOM-compatible APIs for acccessing XML
> documents in secondary storage. Could someone point us to a reference for
> "EOF from NeXT"?

"EOF from NeXT" is the Enterprise Object Framework, which is what
WebObjects uses for data storage.  It's a ObjC/Java framework for
mapping ObjC/Java objects into a data store, supporting several
relational DBs, or any data store for which you write an adaptor for.
It's fairly well abstracted.  More importantly it works within the
other Frameworks to make building UIs to data stored in EOF data
sources really easy.  

Market Speak page (good for intro): http://www.apple.com/webobjects

Tech Pubs with good references:
http://developer.apple.com/techpubs/enterprise/enterprise.html

WebObjects itself may be worth checking out, your mileage may vary tho
depending on what your looking for.  I'm doodling with SGML as a
storage mechanism for a Problem Report system.  I wrote a parser that
generates an object hiearchy representing the document and am modeling
the base classes with DOM interfaces written in CLOS.  I found alot in
WO and the EOF that lends itself to making this mapping between
SGML/XML documents and an object hierarchy very fluid.

In that framework validation takes place when the data set moves from
one mapping to another, or you can call the validation functions
explicitly.  The validation can be entered and customized at various
levels of granularity.  It may also provide you with some inspiration
for how to manage change synchronization and locking, as well as
batching changes into transaction, and interaction between different
DTD/Documents. 

Most of these issues are not terribly relevant to the "core" spec tho.



