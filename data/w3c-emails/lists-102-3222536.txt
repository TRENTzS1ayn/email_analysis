docno="lists-102-3222536"
received="Mon May  4 15:55:41 1998"
isoreceived="19980504195541"
sent="Mon, 4 May 1998 12:48:39 -0700"
isosent="19980504194839"
name="Don Park"
email="donpark@quake.net"
subject="Re: Hello and NodeIterator Revisited"
id="007501bd7795$a6181330$2ee044c6@arcot-main"
charset="iso-8859-1"
inreplyto="Hello and NodeIterator Revisited"
expires="-1"


To:<www-dom@w3.org>

Craig,

>Urk, I'm scared by the prospect of memory mgmt issues perculating up
>into the DOM API.  Is it really impossible to implement it without
>unused NoteIterators piling up?  Is it also really neccesarry to keep
>track of NodeIterators in the Node?  I think that keeping that state
>in the Node is kinda asking for trouble anyways.  It greatly
>complicates the behavior of the Node, and makes it difficult for me to
>create my own Node classes because now I have to deal with the
>Iterator implementations of each DOM implementation since they are
>tied to the Node, and that interface has been left up to the
>implementor.  Am I making sense here?  I can give a more detailed
>explanation of my concerns if I hadn't made them clear yet.

You are making as much sense to me as a green lieutenant telling a
battle-proven sergeant how to make war in the middle of a battle.  No
offense to the lieutenant.

>I think that Itertors should maintain as little state as possible, and
>that that state should be maintained in one place.  You certainly
>don't want to spread the state of an Iterator across multiple
>classes.  The only thing that I see making this difficult is the
>deletion of the current object.

What current object?  There is no current object in the spec.

>> 1. Please add 'release' method to NodeIterator.
>
>Memory/Storage Mgmt. in this API would be an incredible mistake.

Please show me where the mistake is in detail.  It would even more helpful
if you could show me a way to implement all the requirements of DOM in Java
without using 'release'.

>> 2. Please move indexing operations from NodeIterator to Node.
>
>What do you mean by indexing routines?

NodeIterator.getLength
NodeIterator.getCurrentPos
NodeIterator.moveTo

Regards,

Don Park
http://www.docuverse.com/personal/index.html

>
>
>
>



