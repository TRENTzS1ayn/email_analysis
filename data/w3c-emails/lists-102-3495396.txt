docno="lists-102-3495396"
received="Thu May  7 15:23:33 1998"
isoreceived="19980507192333"
sent="Thu, 7 May 1998 12:16:24 -0700"
isosent="19980507191624"
name="Don Park"
email="donpark@quake.net"
subject="Re: NodeIterators &amp; Java implementation"
id="002401bd79ec$a269fe20$2ee044c6@arcot-main"
charset="us-ascii"
inreplyto="NodeIterators &amp; Java implementation"
expires="-1"


To:<www-dom@w3.org>

>We expect that the DOM will be used in the context of various languages and
>object system, each which might have its own mechanism for memory
management.
>Any specific binding of the DOM should be able to specify its own memory
>management primitives. COM, for example, has its own notion of reference
>counting, including AddRef() and Release() methods in the base IUnknown
>interface. JavaScript is a garbage collected language. In both cases, an
>explicit "release" method specified by the DOM would be redundant and
>unnecessary. Since memory management is so object system specific, I
strongly
>believe that the DOM should not mandate its own primitives.

I understand the issues but my point is that language specific memory
management primitives can be neatly packaged within the 'release' method.
COM version of 'release' method could invoke IUnknown->Release().  Java
version could move the object to a pool for recycling.  If a language does
not require it, then it could be no-op.

I can understand why dress designer avoids pockets but I really do not see
what substantial gains avoiding 'release' bring to DOM other than
architectural beauty.

Regards,

Don Park
http://www.docuverse.com/personal/index.html



