docno="lists-102-4203550"
received="Sat Jun 27 18:46:01 1998"
isoreceived="19980627224601"
sent="Sat, 27 Jun 1998 18:46:11 -0400"
isosent="19980627224611"
name="Justin Wells"
email="reader@semiotek.com"
subject="Re: critique of WD-DOM-19980416"
id="19980627184611.53353@fever.semiotek.com"
charset="us-ascii"
inreplyto="19980627023236.53288&#64;fever.semiotek.com"
expires="-1"


To: Justin Wells<reader@semiotek.com>
Cc:www-dom@w3.org


One additional comment I have about the DOM is that I believe 
it should try and mirror the ODMG collection interface wherever
possible.

Thus, DOM iterators should look like (and maybe even implement) 
the ODMG iterator API; and things that contain other things (such
as Element) should have or be very similar to (maybe even 
implement) the relevant ODMG collection API (list, bag, etc.)

There are two reasons why this should be so:

  -- Java 1.2 will use the ODMG collection API as its standard 
     collection library. The ODMG collections were developed 
     with this goal in mind (Rick Cattel of Javasoft chaired 
     the effort.)

  -- It will make life a lot simpler for anyone who wants to throw
     XML objects into an OO database that implements the ODMG API,
     such as ObjectStore, PSE, POET, etc. So even when people 
     use the DOM in languages like C++, there will still be a 
     significant benefit here.

The goal here is to make the DOM naturally fit in with OO 
databases, and the Java language.

Obviously DOM iterators are likely to extend the functionality 
of ODMG iterators, allowing you to traverse up the tree to your 
parent for example. But additions like these should be 
extensions.

Justin



