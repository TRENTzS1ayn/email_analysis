docno="lists-102-4648451"
received="Tue Mar 10 08:54:54 1998"
isoreceived="19980310135454"
sent="Tue, 10 Mar 1998 23:53:35 +1000"
isosent="19980310135335"
name="David Peterson"
email="david.peterson@iname.com"
subject="Re: Question about getNextSibling/getPre"
id="01bc01bd4c2b$f7169940$0200a8c0@down"
charset="iso-8859-1"
inreplyto="Question about getNextSibling/getPre"
expires="-1"


To:"Alfie Kirkpatrick"<akirkpatrick@ims-global.com>,<www-dom@w3.org>,<mcc@arbortext.com>

Hi Alfie,

> Mike,
>
> Thanks a lot for the reply. My point is really that DOM nodes
> may contain nodes from different implementors, correct? So,

This is something I raised a while back, and currently, the answer is no -
that is, the current dom interfaces don't have enough methods for this to be
possible.  Eg there is no setParent() method for a Node, so you can't
genericly set the parent - you have to cast to an internal, proprietry class
to do that.

I'm in favour of being able to do that - for one thing, as an implementor,
you could take bits and pieces from different sources and put them together
easily for display or modification.  Also, with XML, there is no single
standard set of tags, so nothing like the HTML Level2 could be accomplished.
You could, however, have extensions of Node, etc for a specific
implementation, and the application builder could easily plug them into
his/her own implementation.

> I might take an existing DOM structure and insert my special
> MyGraphicNode in there, which is an object which supports
> the Node interface but possibly in a very different way. Also,
> if an implementation supports previous/next pointers or an
> "index in parent" value, how can the insert method on Node
> actually do this, without knowing the precise implementation
> of the Node being inserted and the nodes it already contains?

This is exacly it.  This sort of thing could be done on the
(server-side?/client-side) script side, too, with the actual implementation
of the inserted nodes being completely unknown.

Perhaps there should be an EditorNode interface that is used by the nodes
internally.  Only a couple of methods would be needed (eg setParent()) and
they shouldn't be used outside the implementation of the Node itself.

David



