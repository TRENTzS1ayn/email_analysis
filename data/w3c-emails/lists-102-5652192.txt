docno="lists-102-5652192"
received="Mon Jul 27 20:48:32 1998"
isoreceived="19980728004832"
sent="Mon, 27 Jul 1998 20:38:39 -0400"
isosent="19980728003839"
name="keshlam@us.ibm.com"
email="keshlam@us.ibm.com"
subject="Re: Implementing NodeList"
id="8525664F.0002E27A.00@us.ibm.com"
charset="us-ascii"
inreplyto="Implementing NodeList"
expires="-1"

To:www-dom@w3.org


Uhm... If we're going to resolve this by saying NodeList _isn't_ always
"live", I suggest you declare both StableNodeList and NodeList. That forces
the user, and enables the code, to be aware of which situation applies. The
former could be a no-additional-code subclass of the latter. (I thought
about the opposite way around, but decided that "unstable" should be the
default assumption since anything that is content with unstable will work
with stable but the reverse is not necessarily true.)

Caching state and using some version of a "dirty bit" (actually, a bit's
probably not enough; I suspect you'd need something more like a version
counter, propigated up the parent links) might in fact suppress most of the
overhead. Certainly it will address the needs of XSL, where the input tree
is read-mostly and the output tree is write-mostly, so disruptions really
are rare.



