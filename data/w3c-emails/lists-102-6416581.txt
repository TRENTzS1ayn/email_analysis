docno="lists-102-6416581"
received="Thu Aug  6 16:48:40 1998"
isoreceived="19980806204840"
sent="06 Aug 1998 13:53:02 -0700"
isosent="19980806205302"
name="Stephen R. Savitzky"
email="steve@crc.ricoh.com"
subject="Re: DOM and Xptrs"
id="qczpdh6de9.fsf@gelion.crc.ricoh.com"
inreplyto="Thu, 06 Aug 1998 16:20:47 -0400"
expires="-1"

To: Jonathan Robie<jonathan@texcel.no>
Cc: Ted Bashor<bashor@crossroute.com>,www-dom@w3.org


Jonathan Robie <jonathan@texcel.no> writes:

> Personally, I might prefer to have a function that executes an entire
> XPointer - I see no point to having the ECMA masquerade as XPointers when
> XPointer notation can do that itself. If I were to implement something like
> this, I might prefer something like this:
> 
>   this_node=that_node.traverse("child(3,DIV1).child(4,DIV2).child(29,P)");

That would, in my opinion, be a disastrous mistake.  There is no need to
require the DOM to include a parser and interpretor for the clumsy XPointer
notation -- or any other notation, for that matter.  Surely that's a
language issue. 

On the other hand, one could reasonably expect that it would be possible to
implement XPointer on top of the DOM, and that the Node interface could
easily be extended to include all of the XPointer navigation operations.
Certainly the syntax of XPointer notation is easily mapped (mainly with the
addition of string quotes) into Java or ECMA.

If that turns out not to be the case (i.e. if the DOM is, for whatever
reason, insufficient to implement XPointer on top of), that would in my
opinion indicate a serious deficiency in the DOM.  Has anyone checked
recently to ensure that all of XPointer is supported?

-- 
 Stephen R. Savitzky   Chief Software Scientist, Ricoh Silicon Valley, Inc., 
<steve@rsv.ricoh.com>                            California Research Center
 voice: 650.496.5710   fax: 650.854.8740    URL: http://rsv.ricoh.com/~steve/
  home: <steve@starport.com> URL: http://www.starport.com/people/steve/



