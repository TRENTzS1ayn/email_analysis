docno="lists-102-7834388"
received="Tue Sep  8 21:14:39 1998"
isoreceived="19980909011439"
sent="Tue, 08 Sep 1998 19:15:01 -0600"
isosent="19980909011501"
name="Ray Whitmer"
email="ray@imall.com"
subject="Re: Should Document.cloneNode() work in Level 1?"
id="35F5D695.E5E902A9@imall.com"
charset="us-ascii"
inreplyto="000c01bddb68$92af36c0$2ee044c6&#64;arcot-main"
expires="-1"


To:www-dom@w3.org

Don Park wrote:

> >newDoc.createCopy(node, false); // for a shallow copy
> >newDoc.createCopy(node, true); // for a deep copy
>
> I have no problem with this proposal particularly because it shifts the
> responsibility of copying to the destination document.  It feels right.

I would prefer a method at the doc level, but one which has the option of
either cloning if the document is incompatible or transforming it if the
documents are compatible.  Only the retured node and not the original
would be usable after the operation.

I would call this transferNode(node) // always a deep transfer.

Actually, given my current model's shared underlying data model, I can
clone faster than I can mutate the original reference to have new
ownerDocuments, since clones share the original data.  I only prefer this
other approach to allow other implementations to efficiently transfer
documents between compatible implementations.  If no one else wants it,
fine.

I didn't hear opinions whether document.cloneNode(deep) should clone the
document itself or raise an exception.  This is quite different from both
cloneNode or transferNode on a child, because it creates a new
ownerDocument rather than confining to or transferring between existing
ownerDocument's.  I think we need something like cloneNode to work at the
document level.

Ray Whitmer



