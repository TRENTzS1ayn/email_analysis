docno="lists-102-8415418"
received="Fri Sep 25 14:39:51 1998"
isoreceived="19980925183951"
sent="Fri, 25 Sep 1998 14:39:28 -0400"
isosent="19980925183928"
name="John Cowan"
email="cowan@locke.ccil.org"
subject="Re: NodeList interface"
id="360BE360.307DE274@locke.ccil.org"
charset="us-ascii"
inreplyto="3.0.5.32.19980925140206.00bd0ad0&#64;pophost.arbortext.com"
expires="-1"


To: DOM List<www-dom@w3.org>

msabin@cromwellmedia.co.uk wrote:

> >The NodeList interface is absolutely hopeless: the 'get element by
> >index' model is in direct conflict with the natural implementation of
> >the DOM in terms of tree of linked nodes. The upshot is that the
> >following loop,
> >
> >       NodeList l = someNode.getChildNodes();
> >       for(int i = 0, limit = l.getLength(); i < limit; ++i)
> >               process(l.item(i));
> >
> >will have at best O(n*n) complexity (where n is the number of children).

Actually, things aren't as bad as that.  My in-progress DOM
delivers O(n) efficiency while using a pointer implementation that
identifies Node and NodeList (every node implements
both interfaces): getChildNodes() returns self.

The trick is to memoize the last argument passed to item() as well
as the result.  In cases like the above, the call "item(i)" will
effectively compute "someNode.cachedChild.nextSibling()" on every
call except the first.

-- 
John Cowanhttp://www.ccil.org/~cowancowan@ccil.org
You tollerday donsk?  N.  You tolkatiff scowegian?  Nn.
You spigotty anglease?  Nnn.  You phonio saxo?  Nnnn.
Clear all so!  'Tis a Jute.... (Finnegans Wake 16.5)



