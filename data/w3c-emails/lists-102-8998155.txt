docno="lists-102-8998155"
received="Fri Oct  2 14:07:27 1998"
isoreceived="19981002180727"
sent="Fri, 02 Oct 1998 12:07:23 -0600"
isosent="19981002180723"
name="Ray Whitmer"
email="ray@imall.com"
subject="Re: DOM Level 1 Becomes a W3C Recommendation"
id="3615165B.A40C0DD8@imall.com"
charset="us-ascii"
inreplyto="3.0.5.32.19981001161505.01294400&#64;seattle"
expires="-1"


To:www-dom@w3.org

Claude Zervas wrote:

> Yes! Also:
>         clearly defined behaviour under multithreaded conditions (NodeList
>         should be thread-safe for traversal at least).
>
>         structure sharing across implementations (possibly as a 'feature')

It is currently much more thread-safe than it would be if it held stale entries,
or especially a time-skewed list, which is the only way you can approach the
efficiency of a live list.  You keep incrementing your index until you stop
getting nodes out.  Are you proposing that implementations which do not have all
of the nodes in memory be forced to read all nodes into memory just to construct
this stale list?  That sounds like very anti-server DOM to me.  On the server, I
rely on the ability to lazily evaluate queries, many nodes (DOM Nodes or BTree
index nodes) of which may not even be in memory as the query is constructed.

I would be happy to discuss how to implement structure sharing using the current
API.  My current implementation does this nicely in all cases.

Ray Whitmer
ray@imall.com



