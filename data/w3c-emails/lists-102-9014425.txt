docno="lists-102-9014425"
received="Fri Oct  2 14:47:06 1998"
isoreceived="19981002184706"
sent="Fri, 02 Oct 1998 11:47:21 -0700"
isosent="19981002184721"
name="Claude Zervas"
email="czervas@Adobe.COM"
subject="Re: DOM Level 1 Becomes a W3C Recommendation"
id="3.0.5.32.19981002114721.01337da0@seattle"
charset="us-ascii"
inreplyto="3615165B.A40C0DD8&#64;imall.com"
expires="-1"


To: Ray Whitmer<ray@imall.com>,www-dom@w3.org

At 12:07 PM 10/2/98 -0600, Ray Whitmer wrote:
>Claude Zervas wrote:
>
>> Yes! Also:
>>         clearly defined behaviour under multithreaded conditions (NodeList
>>         should be thread-safe for traversal at least).
>>
>>         structure sharing across implementations (possibly as a 'feature')
>
>It is currently much more thread-safe than it would be if it held stale
entries,
>or especially a time-skewed list, which is the only way you can approach the
>efficiency of a live list.  You keep incrementing your index until you stop
>getting nodes out.  Are you proposing that implementations which do not
have all
>of the nodes in memory be forced to read all nodes into memory just to
construct
>this stale list?  That sounds like very anti-server DOM to me.  On the
server, I
>rely on the ability to lazily evaluate queries, many nodes (DOM Nodes or
BTree
>index nodes) of which may not even be in memory as the query is constructed.
>
>I would be happy to discuss how to implement structure sharing using the
current
>API.  My current implementation does this nicely in all cases.

Congratulations, but the spec says nothing about this. You are misreading
my suggestion. I'm saying the *spec* should be clear about multithread DOM
usage.
Your implementation and mine may support multithreading but others may not.
For example, implementations that use cursor cacheing in the NodeList to boost
efficiency will most likely fail when two threads are traversing the list.

I would like to make clear that these are suggestions for the *next release*
(ie Level 2) of the DOM not just criticisms of the current spec.

- Claude



