docno="lists-102-9663282"
received="Wed Oct 14 13:48:10 1998"
isoreceived="19981014174810"
sent="Wed, 14 Oct 1998 10:47:32 -0700"
isosent="19981014174732"
name="Don Park"
email="donpark@quake.net"
subject="Re: Relation between core DOM and HTML DOM"
id="006301bdf79a$bb9f1070$2ee044c6@arcot-main"
charset="iso-8859-1"
inreplyto="Relation between core DOM and HTML DOM"
expires="-1"


To:"'DOM list'"<www-dom@w3.org>

>  Document someXMLDoc = new BasicDocument();
>  Element xmlElement = someXMLDoc.createElement("FOO");
>  Element htmlLikeElement = someXMLDoc.createElement("TABLE");
>
>  if(xmlElement instanceof HTMLElement)
>    // always false
>
>  if(htmlLikeElement instanceof HTMLElement)
>    // always false


In all the interface-based designs I came across, I have never seen a single
design which relied on the 'absence' of an interface.  Exactly what
advantages are there to this 'guaranteed' lack of interface?

>  HTMLDocument someHTMLDoc = new BasicHTMLDocument();
>  Element xmlLikeElement = someHTMLDoc.createElement("FOO");
>  Element htmlElement = someHTMLDoc.createElement("TABLE");
>
>  if(xmlLikeElement instanceof HTMLElement)
>    // always true

>
>  if(htmlElement instanceof HTMLElement)
>    // always true
>
>  if(htmlElement instanceof HTMLTableElement)
>    // always true


While I do agree with this, I am concerned about how embeded XML should be
handled.  Should they always implement HTMLElement?  Are there any
conflicts?

Don Park
Docuverse



