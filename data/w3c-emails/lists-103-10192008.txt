docno="lists-103-10192008"
received="Tue Nov 21 13:48:10 2000"
isoreceived="20001121184810"
sent="Tue, 21 Nov 2000 13:48:06 -0500"
isosent="20001121184806"
name="Joseph Kesselman"
email="keshlam@us.ibm.com"
subject="Re: How can I put a DocumentFragment in a Document?"
id="OF1EC8B45E.06871BFF-ON8525699E.0064BDD7@pok.ibm.com"
charset="us-ascii"
inreplyto="How can I put a DocumentFragment in a Document?"
expires="-1"

To:<www-dom@w3.org>



>What I don't understand is why the concept of "owning document" in the
first >place,

Because a single Implementation (as viewed from outside) may want to
implement different Documents using different, and not-fully-compatable,
classes. For example, an DOMImplementation may recognize when you're
creating an SVG document and return DOM nodes that have additional SVG
interfaces... and some of those added behaviors may not work if the nodes
are arbitrarily mixed with base DOM nodes, or with nodes that have been
specialized for other document types.

The DOM didn't want to forbid this, and thus had to use owning document
rather than owning implementation.


Questions about Xerces size belong on the Xerces mailing lists. I'll just
point out again that there's always the question of what features and
performance you give up as you trim away code. The nice thing about
standard APIs like the DOM is that if one product doesn't hit the specific
trade-off point you need, you can try plugging in another. No one DOM
implementation is perfect for all applications or (I think) every will be;
the same is undoubtedly true of parsers.


>There are no published performance specs

Actually, some folks have been publishing performance numbers for XML
parsers; I don't have a URL handy but I've seen several websites. The
question is whether those testcases bear any practical resemblence to your
application. There isn't much the DOM WG can do to help you there; it's a
Quality Of Implementation issue, and since implementations may be optimized
for wildly different purposes there is no abstract definition of "quality"
-- it has to be how well that DOM performs for your use cases.


>For one, I would really like to see iterators for node traversal.
>Also, an event/listener API for document/node modification notification

How do these requests differ from DOM Level 2's Traversal and Event
modules, specifically NodeIterator and Mutation Events?

______________________________________
Joe Kesselman  / IBM Research



