docno="lists-103-16246618"
received="Tue Jul  3 18:44:28 2001"
isoreceived="20010703224428"
sent="Tue, 3 Jul 2001 15:43:58 -0700 "
isosent="20010703224358"
name="Watson, Christopher"
email="CWatson@lightspan.com"
subject="Read-only and removeChild/replaceChild"
id="A65CC8B0C730D511B8340002A52CF7A2149BC4@EXCHANGE"
charset="iso-8859-1"
expires="-1"


To: WWW DOM<www-dom@w3.org>

I've got some very basic DOM questions that I'm sure have been discussed
here before, but it's been tough searching for anything in the archives, and
I've run out of time. Thank you for your patience.

First, I wanted to verify that the read-only attribute of a Node is
implementation-specific as of DOM Level 2. DOMException provides for
NO_MODIFICATION_ALLOWED_ERR which may be raised when modifications to an
object are not allowed, but application-level determination of the read-only
state is not defined by the DOM interfaces, and must be defined by the
implementation. Is that a correct statement?

Secondly, I'm wondering about Node.removeChild. DOM2-Core specifies that
NO_MODIFICATION_ALLOWED_ERR be raised if "this node is read only." We can
assume that "this" refers to the parent of the child being removed. But what
about the child itself? If parent of the child is not read-only, and the
child being removed is read-only, wouldn't attempts to remove the child
raise the same exception? Isn't "removal" of a child akin to "modification"
of that child? Same thing can be asked of Node.replaceChild.

For that matter, when a child is removed or replaced, what is supposed to
happen to it's Node.ownerDocument?

Christopher Watson
Sr. Software Engineer
Lightspan, Inc.



