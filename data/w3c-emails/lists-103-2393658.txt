docno="lists-103-2393658"
received="Sat Apr 15 14:21:51 2000"
isoreceived="20000415182151"
sent="Sat, 15 Apr 2000 12:20:18 -0600"
isosent="20000415182018"
name="Aaron Skonnard"
email="aarons@develop.com"
subject="RE: XSL Pattern Queries (values &amp; filters) with DOM"
id="NDBBJHEMDDKHIDLCDFAOEELDCIAA.aarons@develop.com"
charset="US-ASCII"
inreplyto="852568C1.0046318A.00&#64;D51MTA03.pok.ibm.com"
expires="-1"

To:<keshlam@us.ibm.com>,<www-dom@w3.org>


>
> As was pointed out in Dilbert, a no-brainer decision isn't always what you
> want...
>

Agreed. ;)

> Yes, an XML querying capability is desirable, and in fact the Traversal
> chapter of DOM Level 2 started out as including querying. But the
> editorial
> team decided  that attempting to design this API before the XML Query
> Working Group defined the semantics of querying in XML really didn't make
> much sense.
>

Why wait for XQL when we already have an incredibly powerful addressing
language in place - XPath 1.0. Plus, if designed with the right
extensibility points, it really doesn't matter what the XQL WG decides. I
think XPointer's use of schemes is a good example to follow. In the end all
addressing/querying languages are about identifying Infoset subsets. That
being stated, an API that looks something like this should suffice:

NodeList identifyNodes(scheme, expression)

> There's also a open question of whether querying really belongs in the DOM
> per se -- or should be an API in its own right, which DOMs _and_ other
> forms of XML storage could implement.
>

You're right, the addressing/querying language doesn't belong in the DOM.
This is why we have separate standards (XPath, XQL, etc.) that aren't tied
to a specific API. It does make sense, however, for different XML APIs (DOM,
SAX) to add support for addressing/querying languages if, at the end of the
day, they make the API easier to use. I believe that anyone who has used
XPath extensively would lobby hard for what I'm suggesting.

-aaron



