docno="lists-103-5240337"
received="Mon Feb 28 15:24:51 2000"
isoreceived="20000228202451"
sent="Mon, 28 Feb 2000 12:24:32 -0800"
isosent="20000228202432"
name="David Brownell"
email="david-b@pacbell.net"
subject="Re: TreeWalker.whatToShow"
id="38BAD980.3E46631C@pacbell.net"
charset="us-ascii"
inreplyto="85256893.00551351.00&#64;D51MTA03.pok.ibm.com"
expires="-1"


To:keshlam@us.ibm.com
Cc:www-dom@w3.org

keshlam@us.ibm.com wrote:
> 
> Quoth David Brownell <david-b@pacbell.net>:
> >
> > Let's see ... why else would a node be readonly, except that our
> > current node has an EntityReference ancestor?
> >
> > Not at all hidable -- you always know when they're around.
> 
> You're taking me overly literally. Obviously a TreeWalker won't turn
> read-only nodes read-write; filtering can't suppress that distinction
> entirely, and isn't intended to.

The reason I pointed out that issue:  When I've previously commented
on various problems with EntityReference nodes, one response I'd get
back is "use a filter" ... giving me to understand that supressing
that distinction really _was_ one of the goals.  Of course, it can not
achieve such a goal.


> However, if it's set to skip EntityReference nodes (either in whatToShow or
> in user-defined filtering), the _read_ appearance of the tree is equivalent
> to that of having the Entity Reference expanded in-line. In some cases
> that's a better answer than processor-time expansion of Entity References,
> which the DOM also supports.

DOM doesn't have any APIs for XML processing, so I don't think it's at
all accurate to say it "supports" such behaviors.  At best it doesn't
get in the way of certain implementation-specific behaviors.  And I
consider implementation-specific behaviors a problem when they come
up in such a visible circumstance.

- Dave



