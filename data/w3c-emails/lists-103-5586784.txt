docno="lists-103-5586784"
received="Wed Mar  1 15:11:35 2000"
isoreceived="20000301201135"
sent="Wed, 01 Mar 2000 12:11:26 -0800"
isosent="20000301201126"
name="David Brownell"
email="david-b@pacbell.net"
subject="Re: Comments on DOM 2"
id="38BD796E.70969E92@pacbell.net"
charset="us-ascii"
inreplyto="85256893.004EFD52.00&#64;D51MTA03.pok.ibm.com"
expires="-1"


To:keshlam@us.ibm.com
Cc:"www-dom@w3.org"<www-dom@w3.org>

keshlam@us.ibm.com wrote:
> 
> The problem here is that some folks want to be able to adjust their DOM's
> behavior based on which XML-based language is being processed -- which
> means they need to make this decision based on the DTD or schema.

Or namespaces of elements being created, in absence of DTD or schema.

Then there are the folk who want to adjust their application's behavior
instead of adjusting the DOM's behavior!!


>  The
> standard object-oriented approach to this would be to select different
> subclasses of the DOM for these different behaviors... but that decision
> would have to be made no later than the object's constructor.

Well ... it's one way to do it, and one known for inflexibility.
It's not "the standard OO approach" by any means.

Were there a "standard OO approach" it'd be a generic container
("Document" in DOM) which uses specialized factories and contents.

There's a direct mapping between that and XML syntax:  XML is the
container, and inside it are specializations (DTD, namespace, schema,
etc) that aren't known till part way through parsing.

The cleanest solution is be to have the Document delegate some other
object (in this case, DocumentType) as the "real" factory.  It'd not
work for the HTML DOM, but it's bad to take that as a good precedent
since HTML isn't an eXtensible Markup Language.

- Dave



