docno="lists-103-6107116"
received="Mon Mar  6 11:53:40 2000"
isoreceived="20000306165340"
sent="Mon, 6 Mar 2000 10:53:12 -0600"
isosent="20000306165312"
name="Jeff Mackay"
email="jmackay@vtopia.com"
subject="RE: Comments on DOM2 CR"
id="NDBBLNJDHJDKCNEECKOLOELICFAA.jmackay@vtopia.com"
charset="us-ascii"
inreplyto="Comments on DOM2 CR"
expires="-1"

To:<www-dom@w3.org>


>> Since a Document's context is mostly defined by the
>> DOMImplementation, we put the factory there. We could have put it on
>> DocumentType, but DocumentType is optional.
> And anyway, DocumentType as factory for Document would be wrong
> since the contained object can't create its container.

Maybe another abstraction is in order.  How about introducing a
'DocumentSchema' interface that represents a specific class of documents.

The DocumentSchema interface could be implemented with either an external
DTD or by a Schema. The DocumentType interface would refer to the
DocumentSchema.

So I'd ask the implementation to create a schema, ask a schema to create a
document that complies with that schema, tell the document to create its
document type, which references the schema that was used to create the
document.

I think this would eliminate the chicken and egg problem.



