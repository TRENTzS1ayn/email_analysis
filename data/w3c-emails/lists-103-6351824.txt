docno="lists-103-6351824"
received="Thu Mar  9 13:13:22 2000"
isoreceived="20000309181322"
sent="Thu, 9 Mar 2000 11:12:53 -0700 (MST)"
isosent="20000309181253"
name="Ray D. Whitmer"
email="rayw@imall.com"
subject="Re: namespace treatment, 2nd attempt"
id="Pine.GSO.4.05.10003091102060.9534-100000@sol.imall.com"
charset="X-UNKNOWN"
inreplyto="38C7A4AD.A2380848&#64;ppp.uni-bamberg.de"
expires="-1"

To: Dieter K?hler<dieter.koehler@ppp.uni-bamberg.de>
cc: Arnaud Le Hors<lehors@us.ibm.com>,"www-dom@w3.org"<www-dom@w3.org>


On Thu, 9 Mar 2000, Dieter [iso-8859-1] K?hler wrote:

>So if backwards compatibility at all is an unrealistic goal in this
>particular case, why not strive for a consistant DOM2, now?  That
>means to raise exceptions if namespace and non-namespace methods were
>used at the same namedNodeMap (a variant of a previous suggestion of
>mine).  In the example above using DOM1 together with DOM2 code would
>result in an exception.  Pure DOM1 code would still be able to work
>together with a DOM2 API, but a mixture would be forbidden.  That is
>the only amount of backwards compatibility within reach.

There is one important case of level 1 and level 2 mixture that does 
work in the current spec.

Consider the supplier of a browser or any other standard framework
which parses a document into a DOM without knowing what type of
application will operate on it -- level 1 or level 2.  A parser is 
in a superior position to most applications in that it can use level 
2 NS methods to easily create a tree that will satisfy either a 
level 2 or a level 1 application.  Either will be perfectly happy 
until post-parser DOM manipulations compromise the dual integrity,
and make the model only suitable to level 1 or level 2.

Ray Whitmer
ray@xmission.com



