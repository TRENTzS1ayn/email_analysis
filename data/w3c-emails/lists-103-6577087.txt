docno="lists-103-6577087"
received="Tue Mar 21 06:57:55 2000"
isoreceived="20000321115755"
sent="Tue, 21 Mar 2000 12:53:55 +0100"
isosent="20000321115355"
name="Dieter K?hler"
email="dieter.koehler@ppp.uni-bamberg.de"
subject="Re: style sheets"
id="38D762D3.A7E4C5C7@ppp.uni-bamberg.de"
charset="us-ascii"
inreplyto="00a901bf92a0$ac5a87a0$1207aace&#64;brownell.org"
expires="-1"


To: David Brownell<david-b@pacbell.net>,"www-dom@w3.org"<www-dom@w3.org>

> Dieter, you seem to imply (here and in other posts) that a document
> 
>     <?xml-stylesheet ... ?>
>     <!DOCYTPE root ... >
>     <root> ... </root>
> 
> would be represented by something other than a Document node with three
> children.  Why would that be?  The spec seems clear to me that there's
> no representational issue there.

The following indications made me think, that there are still things
to be decided:

(1) p. 29 of the spec reads: "The Document interface represents the
entire HTML or XML document. Conceptually, it is the root of the
document tree, and provides the primary access to the document's
data.", but the explanation of the documentElement attribute (p. 30)
reads: "This is a convenience attribute that allows direct access to
the child node that is the root element of the document."  So the spec
is uncertain about what to call the "root" of the document.  Reading
the first definition on its own suggests:  the document starts with
the xml declaration and the "root" of the document tree is this
virtual representation of the document as a whole.  Reading the first
definition in the light of the second might as well mean:  the "root"
of the document is the root element and what it's called the
"document" starts with it.  

(2) DOM2 has no XMLDeclaration node.

(3) Placing the factory method for DocumentTypes in the
DOMImplementation does not automatically attach a DocumentType to a
Document node.  So I was not sure if the DOM WG was planing to
entirely separate DocumentType nodes from the Document node which
would be very useful especially for external DTDs.  The advantage
would be that one DTD tree could be used for different documents. For
example:  Instead of using a DocumentType node as child of a document
node for representing the whole DTD one could use a DocumentTypeDef
node which points to the DocumentType attached to a
DOMImplementation.  If DocumentTypeDef.name is always empty, that
could also eliminate the early/late binding problem, because the
information about the type of the document is then stored outside the
document tree.  In case of external DTDs DocumentTypeDefs of several
Documents may point to the same DocumentType.

(4) Your posting (01.03.): "In short, the basic problem is that the
current DOM APIs have two ways to express "Document Type":  as a
subtype of Document, and as the real DocumentType object (which is
however largely unusable in the December CR). One could eliminate the
"change type" case by making that illegal." -- I am not sure whether
the new spec is clear in that.  It depends on what "subtype" exactly
means:  "created by Document" or "allowed as a child of Document".

Summary:  Beside all that the most likely interpretation of the DOM2
draft seems to support the opinion, that

    <?xml-stylesheet ... ?>
    <!DOCYTPE root ... >
    <root> ... </root>
 
would be represented by a Document node with three children.  But the
above indications made me doubt about the state of the decision
process, since the DOM2 is still in construction process.

-- 
=====================================================================
 Dieter Koehler, M. A. - dieter.koehler@ppp.uni-bamberg.de
 Mittlere Kaulberg 22, D-96049 Bamberg, +49(0)951-5190726
 "http://www.philo.de/Philosophie-Seiten/": 1000+ Philosophie-Links
 "http://www.philo.de/VirtualLibrary/14.de.htm": Deutsche Philo-Links
 "http://www.philo.de/xml/": Open XML - XML-Komponenten fuer Delphi
=====================================================================



