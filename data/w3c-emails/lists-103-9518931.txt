docno="lists-103-9518931"
received="Fri Oct 20 10:14:38 2000"
isoreceived="20001020141438"
sent="Fri, 20 Oct 2000 10:13:59 -0400"
isosent="20001020141359"
name="Joseph Kesselman/Watson/IBM"
email="keshlam@us.ibm.com"
subject="Re: Why levels instead of versions"
id="OF3B585846.0A246ABC-ON8525697E.004D04F1@pok.ibm.com"
charset="us-ascii"
inreplyto="Why levels instead of versions"
expires="-1"

To:ameyer@ix.netcom.com
Cc:"Kyle Smithson"<skyle2@hotmail.com>,www-dom@w3.org



The DOM specification uses both concepts.

A "level" really corresponds to a functional release cycle. DOM Level 2
adds a large amount of functionality  to Level 1 (some of it optional)  --
but should not break backward compatability. Level 3 will again add more
function both by adding new Features and by extending existing ones -- but
is expected to retain full compatability with the earlier Levels.

A "version" is a major redesign cycle. If we find it necessary at some
point to substantially rework a DOM feature in such a way that backward
compatability can _NOT_ be retained, we will change the version number on
the appropriate levels and features to indicate this. This may be because
we discover we've done something completely foolish that allows no other
recovery path, or it may be because 10 years from now, after using the DOM
for all that time, the industry consensus is that it would benefit from
substantial alteration. But short of that kind of "earthquake", the Version
will not change. Everything in the DOM is currently at Version 1 and
expected to remain so.

______________________________________
Joe Kesselman  / IBM Research



