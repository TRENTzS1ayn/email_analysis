docno="lists-104-0218866"
received="Thu Jul 12 17:47:47 2001"
isoreceived="20010712214747"
sent="Thu, 12 Jul 2001 23:47:43 +0200"
isosent="20010712214743"
name="Thomas Much"
email="thomas@snailshell.de"
subject="hasFeature and ECMAScript"
id="B773E78A.5BBD%thomas@snailshell.de"
charset="US-ASCII"
inreplyto="OF155CAAA1.29D56B71-ON85256A87.00452CA3&#64;pok.ibm.com"
expires="-1"

To:<www-dom@w3.org>
CC: Joseph Kesselman<keshlam@us.ibm.com>


am 12.07.2001 14:48 Uhr schrieb Joseph Kesselman unter keshlam@us.ibm.com:

> I'd say that's a binding issue -- "what does null mean in this binding"

null and undefined are two different values in ECMAScript, so this could be
somewhat dangerous (both values evaluate to boolean false, but if an
ECMAScript implementation checks against null, it will fail when undefined
is passed). Unspecified function parameters are always treated as undefined
whereas the null value has to be passed explicitely.

> There's a consistancy question. If we declare that undefined shall be taken
> as null here, we should probably do so throughout the API.

I would *not* recommend this for all places where null is mentioned. If a
return value can be null (e.g. from document.getElementById), don't extend
it to undefined to avoid ambiguity - let the script programmer definitely
know what return value can be expected.
But if null is an input parameter and it is not used to specify an empty
reference but an unspecified value, an ECMAScript programmer should be
allowed to pass undefined as well, because "undefined" is in ECMAScript
terms the common unspecified value.

bye, Thomas

-- 
http://www.muchsoft.com/inscript/
http://www.icab.de



