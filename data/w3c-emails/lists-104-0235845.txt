docno="lists-104-0235845"
received="Thu Jul 12 18:48:11 2001"
isoreceived="20010712224811"
sent="Thu, 12 Jul 2001 18:46:10 -0400 (EDT)"
isosent="20010712224610"
name="Fred L. Drake, Jr."
email="fdrake@acm.org"
subject="Re: hasFeature and ECMAScript"
id="15182.10418.802513.906264@cj42289-a.reston1.va.home.com"
charset="us-ascii"
inreplyto="B773E78A.5BBD%thomas&#64;snailshell.de"
expires="-1"


To: Thomas Much<thomas@snailshell.de>
Cc:<www-dom@w3.org>


Joseph Kesselman wrote:
 > I'd say that's a binding issue -- "what does null mean in this binding"

Thomas Much writes:
 > null and undefined are two different values in ECMAScript, so this could be
 > somewhat dangerous (both values evaluate to boolean false, but if an

  This is a matter of the binding.  It sounds to me like the only
reasonable way to do this is to bind the IDL null value to the
ECMAScript null value; undefined is a different concept.  Since the
issue doesn't appear to be the value assigned to parameters omitted by
the caller, since the DOM doesn't describe any optional parameters,
there's no clear need to accept the undefined value.

 > But if null is an input parameter and it is not used to specify an empty
 > reference but an unspecified value, an ECMAScript programmer should be
 > allowed to pass undefined as well, because "undefined" is in ECMAScript

  But there are no unspecified values in the DOM specifications,
except where the specs are still being written.  Or at least I haven't
noticed that situation.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Digital Creations



