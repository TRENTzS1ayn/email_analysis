docno="lists-104-0423789"
received="Mon Jul 16 11:57:05 2001"
isoreceived="20010716155705"
sent="Mon, 16 Jul 2001 11:56:31 -0400"
isosent="20010716155631"
name="Joseph Kesselman"
email="keshlam@us.ibm.com"
subject="Re: Namespace resolver in DOM-XPath (suggests additional Node method in  Core)"
id="OFC90D2328.241D5233-ON85256A8B.0056CEE4@pok.ibm.com"
charset="us-ascii"
inreplyto="Namespace resolver in DOM-XPath (suggests additional Node method in  Core)"
expires="-1"

To:"'www-dom@w3.org'"<www-dom@w3.org>



The downsides of passing in a string:

1) You have to generate the string, then reparse it. Wasted work if the
data was already in an easier-to-retrieve form.

2) You have to build a complete list; you can't defer resolution and
compute it on demand. This too may impose additional costs. In use case B,
for example, you may have to walk the context-node's parents to gather
namespaces; a string requies you scan them all, whereas an API has the
option of looking back only as far as necessary for this query, and looking
farther at a later time if another query has not yet been resolved.

Abstracting this into a NamespaceResolver API leaves us room to consider
those issues.

 If someone wants to use a single string internally, that's fine. And
perhaps we should consider a factory that accepts such a string and returns
a NamespaceResolver with that content.  But I think nailing it down as only
a string would excessively constrain implementations.

______________________________________
Joe Kesselman  / IBM Research



