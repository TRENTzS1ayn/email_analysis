docno="lists-104-11858987"
received="Thu Oct 31 09:31:34 2002"
isoreceived="20021031143134"
sent="Tue, 29 Oct 2002 21:11:17 -0500 (EST)"
isosent="20021030021117"
name="Dominic Chambers"
email="dominic.chambers@bigfoot.com"
subject="DocumentFragment and load/loadXML"
id="004301c27fb9$64e7b7e0$0100a8c0@hp"
charset="iso-8859-1"
expires="-1"


To:<www-dom@w3.org>





The Load and Save spec says that the DocumentLS interface will be
implemented by objects that currently implement document. The Level 1 Core
spec says:

<quote>
DocumentFragment is a "lightweight" or "minimal" Document object. It is very
common to want to be able to extract a portion of a document's tree or to
create a new fragment of a document. Imagine implementing a user command
like cut or rearranging a document by moving fragments around. It is
desirable to have an object which can hold such fragments and it is quite
natural to use a Node for this purpose. While it is true that a Document
object could fulfill this role, a Document object can potentially be a
heavyweight object, depending on the underlying implementation. What is
really needed for this is a very lightweight object. DocumentFragment is
such an object.

Furthermore, various operations -- such as inserting nodes as children of
another Node -- may take DocumentFragment objects as arguments; this results
in all the child nodes of the DocumentFragment being moved to the child list
of this node.
</quote>

Therfore, shouldn't the DocumentLS interface be implemented by
DocumentFragment objects also?


Thanks, Dominic.



