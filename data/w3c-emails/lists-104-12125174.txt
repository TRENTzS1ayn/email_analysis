docno="lists-104-12125174"
received="Wed Nov  6 14:28:35 2002"
isoreceived="20021106192835"
sent="Wed, 6 Nov 2002 14:28:01 -0500"
isosent="20021106192801"
name="Joseph Kesselman"
email="keshlam@us.ibm.com"
subject="Re: UserDataHandler.NODE_DELETED"
id="OF360590AC.F360B9EE-ON85256C69.006A1DE9-85256C69.006B09F8@us.ibm.com"
charset="US-ASCII"
inreplyto="JGEHKLKOMLOEBOHLEEGOAELEDDAA.lehors&#64;us.ibm.com"
expires="-1"

To:"www-dom"<www-dom@w3.org>



When we designed that message, I believe we explicitly recognized that 
there could be no promise that it would ever be issued but that even 
having it _sometimes_ occur would facilitate memory management... in other 
words, it is no more and no less reliable, or useful, than the 
storage-library-level finalizers themselves.

I wouldn't want to see this dropped. But I do think it's appropriate to 
indicate that when/whether this message is sent is both  implementation 
and environment dependent. There may be Java implementations which don't 
issue it (finalizers have strange effects on some JVMs, which some 
implementations may want to avoid), there may be other implementations 
which implemented their own memory management system...

Another annoying question to consider: In Java, finalizers normally run in 
a separate thread. Do we need to warn folks that this event, unlike most 
other DOM behaviors, may occur asynchronously? Or are we going to ask 
implementers in that sort of environment to enqueue these back into the 
main thread?

______________________________________
Joe Kesselman  / IBM Research



