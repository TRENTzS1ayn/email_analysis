docno="lists-104-13791697"
received="Thu Jun 12 16:07:41 2003"
isoreceived="20030612200741"
sent="12 Jun 2003 16:07:29 -0400"
isosent="20030612200729"
name="Philippe Le Hegaret"
email="plh@w3.org"
subject="Re: Comments on DOM Level 3 events"
id="1055448448.24635.233.camel@jfouffa.w3.org"
inreplyto="053c01c33105$a1c92f60$7000a8c0&#64;krehor"
expires="-1"

To: Ken Rehor<ken@rehor.com>
Cc: WWW DOM<www-dom@w3.org>



On Thu, 2003-06-12 at 13:11, Ken Rehor wrote:
> I have a few comments you may want to consider for a future version of
> the specification.

Here is my first take on those issues:

> Ordering of Event Groups
>  
> Even though the specification supports ordering of events within a
> group, it doesn't support the ordering of events between event
> groups.  Some of the requirements we're considering for VoiceXML 3.0
> include changes to the 2.0 event model, in particular handling
> external asynchronous events.  One potential use of ordered event
> groups would be to include 'standard' VoiceXML events in one group,
> and 'external' asynchronous events in a second group.  It may also be
> useful to enable prioritization of events, assigned by the interpreter
> developer and possibly even within an application by the developer.
> For example, external events may need to be handled at a higher
> priority than other events; on the other hand, it might be necessary
> in some circumstances to allow the developer to block some or all
> events by priority.

We did discussed the possibility of, for some internal implementations
purposes, having order between event groups. Implementations that rely
of the event model for internal purposes (refresh of the display, ...)
could in fact have a specific order: events that are specific to the
system should happen before the rest in general. Not sure if I'd like to
say more in the Events or if this could be addressed in the VoiceXML
spec...

> Event selection
>  
> An event handler is selected (see sect 5.2.4 Catch Element Selection
> http://www.w3.org/TR/voicexml20/#dml5.2.4) based on several conditions
> that are evaluated at the event throw time. The count attribute
> specifies the occurance for that event; the cond attribute is an
> ECMAScript expression which specifies whether the event applies at
> that time. 

Correct. We intentionally did not address this since it can be
implemented on top of our event model (by having a wrapper on the event
listener to handle count and cond). One can imagine further conditions
or restrictions for the event listener invocation and we don't know
where to stop...

> Hierarchical Namespace
>  
> In Section 1.5.3, you discuss the concept of the hiearchical name
> spaces that we've included in VoiceXML, but it isn't clear how this is
> compatible with your specification.  We have found it to be a very
> powerful mechanism for selecting categories of events, or as needed,
> subcategories as well.  It would be helpful to have the DOM Events
> spec support this.

VoiceXML is the only consumer of this functionality and we didn't see a
string interest from other groups to have it. So, in order to make it
possible to extend the DOM event interfaces to expose categories, we
modify the DOM Event model to support it, but did not expose the
functionality through the DOM Event interfaces. However, note that, even
if the DOM Event model does address it, a VoiceXML application cannot be
implemented on top of a DOM implementation without modifying and
extending the DOM Event implementation.

Philippe



