docno="lists-104-14872747"
received="Tue Jul  1 09:45:36 2003"
isoreceived="20030701134536"
sent="Tue, 1 Jul 2003 09:33:37 -0400"
isosent="20030701133337"
name="Joseph Kesselman"
email="keshlam@us.ibm.com"
subject="Re: Support properties on interfaces"
id="OF50C57054.4CC44948-ON85256D56.0049D01E-85256D56.004A7D3E@us.ibm.com"
charset="US-ASCII"
inreplyto="20030701095944.GA7294&#64;localhost.localdomain"
expires="-1"

To:www-dom@w3.org







See the standard Java and Javascript bindings included with the DOM spec
(and the non-standardized bindings available from other sources) for
specific examples of how the abstract IDL concepts of "interface" and
"property" are typically converted into actual callable APIs.

Generally, an interface maps to whatever the specific language offers as a
completely abstract class/interface/object-API.  If the language can't
offer that, the binding has to come up with some equivalent way to
reference the objects.

Generally, a property will be mapped to a getter method, a setter method,
or both... but it may map to field access in some bindings. Again, this
depends on the characteristics of the language you're developing the
binding for.

______________________________________
Joe Kesselman, IBM Next-Generation Web Technologies: XML, XSL and more.
"The world changed profoundly and unpredictably the day Tim Berners Lee
got bitten by a radioactive spider." -- Rafe Culpin, in r.m.filk



