docno="lists-104-15990047"
received="Fri Aug 15 17:22:44 2003"
isoreceived="20030815212244"
sent="15 Aug 2003 14:21:12 -0700"
isosent="20030815212112"
name="Philippe Le Hegaret"
email="plh@w3.org"
subject="Re: DOM3 Core: DOMImplementationRegistry Behavior"
id="1060982472.3957.10.camel@chacal"
inreplyto="7249D02C4D2DFD4D80F2E040E8CAF37C019991&#64;longxuyen.xfsi.com"
expires="-1"

To:"Glenn A. Adams"<glenn@xfsi.com>
Cc: WWW DOM<www-dom@w3.org>



On Thu, 2003-06-19 at 14:10, Glenn A. Adams wrote:
> The implementation of DOMImplementationRegistry shown in Appendix
> G.1 makes use of a Java System Property to record a list of names
> of classes that implement DOMImplementationSource. A user of the
> registry may naturally infer that sources are
> checked in the order specified by this property (and the order by
> which additional sources are added to the registry using the
> addSource() method). However, this may or may not be the case since
> the implementation of DOMImplementationRegistry shown here makes
> use of a Hashtable which does not guarantee any specific enumeration
> order.
> 
> I would suggest doing one of the following:
> 
> 1. abstract the definition of DOMImplementationRegistry in
> Appendix G.1 to specify it in terms of an interface rather than
> a class; furthermore, define its behavior more clearly in
> terms of order of evaluation in the case that two or more
> DOMImplementationSource instances implement the same features;
> 
> 2. rewrite the implementation in G.1 to use an ordered
> container type, such as a List;
> 
> 3. specify that the behavior is undefined as to which
> DOMImplementationSource will be returned when more than one
> supports the same features.

The code has been rewritten to use java.util.Vector and preserve the
registration order.

Philippe



