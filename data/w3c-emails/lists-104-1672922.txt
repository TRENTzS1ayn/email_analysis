docno="lists-104-1672922"
received="Mon Aug 20 19:00:32 2001"
isoreceived="20010820230032"
sent="Mon, 20 Aug 2001 15:59:23 -0700"
isosent="20010820225923"
name="David Brownell"
email="david-b@pacbell.net"
subject="Re: [Events] removeEventListener on EventListeners currently bein g  processed"
id="090401c129cb$c1c07500$6800000a@brownell.org"
charset="iso-8859-1"
inreplyto="B27EB33BAB29D2119ABF0001FA7EF289053BF163&#64;ewfd04.exchange.ml.com"
expires="-1"

To:"Allen, Michael B (RSCH)"<Michael_B_Allen@ml.com>
Cc:www-dom@w3.org


> > That shows that several folk raised the issue of  that
> > change introducing an asymmetry with respect to
> > addEventListener(), which should have been dealt
> > with at the same time.
> > 
> > I think the corresponding change on the addEventListener
> > side is a guarantee that a listener added to the current
> > node _will_ be invoked as appropriate. 
> > 
> So , you mean that adding an event listener to a list currently being processed
> should be invoked? If so, I don't see why this is "appropriate".

Keeping an API model self-consistent is _always_ appropriate.

>     This is not about
> symmetry, it's about potentially provoking code that may not longer be valid
> due to dangling pointers, inconsistent state, etc.

So you deny that the resolution of that issue created an
inconsistency in the API model?  

>     I think when an event is
> dispatched, it should try to appear as an atomic operation, meaning a copy of
> the listener list is used. 

Atomic != "use a copy".  The change I identified is as
atomic as the current text, but it's got the same model
for the add and remove tasks.

- Dave



