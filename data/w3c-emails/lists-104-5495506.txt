docno="lists-104-5495506"
received="Tue Apr 23 19:23:59 2002"
isoreceived="20020423232359"
sent="Tue, 23 Apr 2002 17:25:18 -0600"
isosent="20020423232518"
name="Arnold, Curt"
email="Curt.Arnold@hyprotech.com"
subject="RE: DOM events - mousewheel?"
id="4D62A7266F41D611B92C00E018C1C19C0DD547@thor.aeathtl.com"
inreplyto="DOM events - mousewheel?"
expires="-1"


To:www-dom@w3.org

I haven't seen anything in the public thread that looks like a strong vendor
or platform bias.  Maybe it is there within WG confidential threads, but I
haven't seen it here.

There were a couple of issues in the previous messages:  One was the
potential for mice wheels to disappear as an unnecessary appendage.  While
still possible, the Java platform added a MouseWheelEvent and a
MouseWheelListener in JDK 1.4
(http://java.sun.com/j2se/1.4/docs/api/java/awt/event/MouseWheelEvent.html).

The other was that providing access to hardware specific events was not the
way of the future.  Capturing any mouse or keyboard event has the potential
to upset the users' expectations.  In general, most content would not listen
to or respond to wheel events and the events would fall through to the user
agent's default behavior just like most keystroke or normal mouse events.
However, some content benefits greatly by responding to a few select
low-level mouse or keystroke events.

As an outside observer, it would seem to be an opportune time to add support
for wheel events.  It does not appear to need any changes to the
infrastructure, just the assignment of an event name and description of the
expected values for MouseEvent.detail and a few other key members of
MouseEvent.  I don't expect that the lack of visibility of mouse wheel
events would make somebody switch from SVG or HTML to another technology,
but getting access to mouse wheel events does seem to be a legitimate
desire.



