docno="lists-104-6723893"
received="Wed Jan 16 11:06:04 2002"
isoreceived="20020116160604"
sent="Wed, 16 Jan 2002 11:05:11 -0500"
isosent="20020116160511"
name="Joseph Kesselman"
email="keshlam@us.ibm.com"
subject="Re: Wording of ASOM"
id="OFCE59E19B.A140F3C9-ON85256B43.005725A6@pok.ibm.com"
charset="us-ascii"
inreplyto="Wording of ASOM"
expires="-1"

To:www-dom@w3.org



> > ... XML did not officially define a processor type/mode in which no
> > attempt is made to use the external subset.
> Eh?  I sure think it did.  The external subset is an unnamed entity,
> so it falls under the options for a non-validating parser.  That was
> the clear intent.

They said that this was legitimate behavior for a nonvalidating processor.
As far as I can tell, they didn't provide any terminology for
distinguishing this case from that where the attempt is made, and that lack
of terminology has been an ongoing problem for XML users. I would be
happier if someone closer to XML's core told us what to call this case...
but if they don't, and we're going to provide an API that exposes it, I
think that nomenclature responsibility falls squarely on us.

"A nonvalidating parser running with an EntityResolver that blocks attempts
to retrieve the External Subset" works as a descriptive, but is impossibly
ungainly for discussion... and is more closely tied to specific APIs than I
really like. It's a fairly commonly seen case; it needs a name.

Especially if we decide to actually make it directly requestable through
the API... which I think might be a good idea; the parser itself is much
better equipped to know which external entity requests are intended for use
as External Subsets than the EntityResolver is.


> > And if you really want to process without _any_ reference to the
Document
> > Type, including its internal subset...  we can do that too but that's
yet
> > another mode,
> ... actually that'd be clearly outside the scope of the XML REC, so don't
call it "XML".

Raised it mostly so folks could shoot it down; thanks for doing so.
<smile/>

______________________________________
Joe Kesselman  / IBM Research



