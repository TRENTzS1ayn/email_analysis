docno="lists-104-7895172"
received="Fri Feb 15 10:40:23 2002"
isoreceived="20020215154023"
sent="Fri, 15 Feb 2002 09:32:57 -0500"
isosent="20020215143257"
name="Joseph Kesselman"
email="keshlam@us.ibm.com"
subject="RE: C++ binding"
id="OF2F60F687.BA684EFB-ON85256B61.004EF978@pok.ibm.com"
charset="us-ascii"
inreplyto="C++ binding"
expires="-1"

To:"Allen, Michael B (RSCH)"<Michael_B_Allen@ml.com>
Cc:www-dom@w3c.org



On Thursday, 02/14/2002 at 07:07 EST, "Allen, Michael B (RSCH)"
<Michael_B_Allen@ml.com> wrote:
>     Why does the DOMString type needs to be defined at all?

The nature of a language binding is that it brings everything down to
language-specific interfaces and types, so that code written against that
binding will compile and run against all instances of that binding. If you
don't nail down DOMString to _something_, you don't have a binding.

The solution we've used in the past is for the binding to state what
specific type DOMString is mapped to.

Another solution would be to say that DOMString will itself be a specific
interface in this binding, derived from or wrapped around whatever the
implementation wants to use.


There's nothing inherently wrong with providing a DOM-like API that
supports only 8-bit characters in a specific encoding, if you know that's
all your customers are going to want... but if you do so, be sure to
clearly document that divergence and don't claim to be a fully compliant
DOM implementation. You'll benefit from folks not having to relearn the API
architecture, but you'll lose interoperability with other systems... and
interoperability is part of the point of the DOM.

______________________________________
Joe Kesselman  / IBM Research



