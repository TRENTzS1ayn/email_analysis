docno="lists-104-8857572"
received="Thu Mar 28 13:47:01 2002"
isoreceived="20020328184701"
sent="Thu, 28 Mar 2002 10:47:01 -0800"
isosent="20020328184701"
name="Ray Whitmer"
email="rayw@netscape.com"
subject="Re: Issue Xpath-30: Reusing result sets"
id="3CA36525.9090508@netscape.com"
charset="us-ascii"
inreplyto="4D62A7266F41D611B92C00E018C1C19C0DD4E2&#64;thor.aeathtl.com"
expires="-1"


To:"'www-dom@w3.org'"<www-dom@w3.org>

Arnold, Curt wrote:

>The problematic part is "cannot reuse" since that implies that
>implementation must try to reuse the result set even if the implementor
>knows that reusing the argument is going to be more expensive than creating
>a fresh result object.  The description should be worded so an
>implementation is completely free to disregard the result argument.
>
It was not the intent that the language imply that the implementor must 
try to reuse it, or that the implementation should do any more than it 
is programmed to do, which is typically thought to be deterministic in 
terms of what it can "can" and "cannot" do.  If better wording can be 
found, this would be a minor change that does not affect the intent.  On 
one hand, any implementation could be distorted enough to make it work 
if the implementor were forced to, and on the other hand, if any 
implementor rejects the impact of reuse, is just too lazy to reuse, or 
only chooses to reuse those opjects located at addresses with an even 
number of bits set, then you have an implementation that cannot reuse 
the object in question, even if you argue that the implementor could 
have trivially made the implementation able to reuse it.

I am still fishing for better wording.  I once had a technical writer 
who shot me down every time I implied that programs have free will to 
choose to do something, and we already have confusion here between the 
choice of the implementation and the choice of the implementor.

Ray Whitmer
rayw@netscape.com



