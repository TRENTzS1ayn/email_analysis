docno="lists-104-9414823"
received="Wed Jul 17 11:34:20 2002"
isoreceived="20020717153420"
sent="Wed, 17 Jul 2002 17:33:48 +0200"
isosent="20020717153348"
name="Sander Bos"
email="sander@x-hive.com"
subject="RE: Mixed level 1 and level 2 nodes woes"
id="41D11F414A26E942912B7E7696DC8E220615EE@JAKARTA.xhive.archipel"
charset="us-ascii"
inreplyto="Mixed level 1 and level 2 nodes woes"
expires="-1"


To:"WWW DOM"<www-dom@w3.org>



Dear Joseph,

> You can pass a Level 2 document down to Level 1 code and it will
function as 
> a Level 1 DOM. You can _not_ create non-namespaced nodes and pass it
back up 
> to Level 2 code and expect correct operation. This is by design; the
non-
> namespaced calls can be considered deprecated except for purely Level
1 
> applications.

Thank you for your answer.
I can go a long way with this, but then I feel that at least in the
Java-binding where this is possible, these methods should not be
considered deprecated but really be made deprecated, to give users a
proper warning not to use them. Since you say that level 2 nodes (part
of a level 2 documents) will work correctly with level 1 code, people
could replace all deprecated method-calls with non-deprecated ones, and
code would continue to work as normal. This is exactly what the Java
deprecation mechanism is for I think.

It does not really solve the importNode thingy, but since that is a call
introduced in level 2, I would say you could still make the
specification say there, 'will create only level 2 nodes' (as those
nodes will look the same as level 1 nodes in the level 1 methods).

> So you're asking about correct behavior for something that should 
> never be allowed to happen. Which is why it's undefined.

I agree less with this, not be allowed to happen -> exception.

Kind regards,

--Sander.



