docno="lists-105-1060762"
received="Wed Dec  3 14:47:36 2003"
isoreceived="20031203194736"
sent="Wed, 3 Dec 2003 14:39:36 -0500"
isosent="20031203193936"
name="Joseph Kesselman"
email="keshlam@us.ibm.com"
subject="Re: node.insertBefore( child )"
id="OFF33012EF.60743EB7-ON85256DF1.006B8E23-85256DF1.006BFEF9@us.ibm.com"
charset="US-ASCII"
inreplyto="1070476477.7b6a6c80cmoschini&#64;myrealbox.com"
expires="-1"

To:www-dom@w3.org







>As long as we're on the subject of .insertBefore()
>Why does this method, when no second argument is specified, append the
child?

The next-sibling of the last sibling is null. Hence, insert-before null is
taken as a request to insert at that point.

Did we have to support that behavior? No. But it's cheap and easy to
implement, it makes sense when you understand the rationalle, and it makes
some kinds of code a trifle easier to write.

Would you really have preferred that we throw a null pointer exception?

(It's far too late to change it, in any case.)


>Why not make this call as simple as:
>node.insertBefore( list[ i ] );

We have something like that. Rather than using a list to hold your nodes,
make them children of a DocumentFragment node, which has the magic property
that inserting/appending it actually inserts/appends its children.


______________________________________
Joe Kesselman, IBM Next-Generation Web Technologies: XML, XSL and more.
"The world changed profoundly and unpredictably the day Tim Berners Lee
got bitten by a radioactive spider." -- Rafe Culpin, in r.m.filk



