docno="lists-105-1507062"
received="Tue May  4 05:47:40 2004"
isoreceived="20040504094740"
sent="Tue, 04 May 2004 11:47:01 +0200"
isosent="20040504094701"
name="Robin Berjon"
email="robin.berjon@expway.fr"
subject="Re: Request for review: XOP"
id="40976695.9080605@expway.fr"
charset="us-ascii"
inreplyto="OFC31EF02E.9AB56B80-ON85256E89.007CEE5B&#64;lotus.com"
expires="-1"


To:noah_mendelsohn@us.ibm.com
Cc:www-dom@w3.org, XMLP Dist App<xml-dist-app@w3.org>


noah_mendelsohn@us.ibm.com wrote:
> Speaking for myself, the API's I would consider would in fact be general 
> to all of XML, but they would optimize particularly well when used with 
> XOP. The sort of thing I would have in mind would be along the lines of 
> 
>         // given a binary octet stream, create a text node consisting
>         // of the characters representing the xsd:base64Binary
>         // canonical lexical representation of that stream
>         Text t = createBase64TextfromBinaryStream(binStream);
> 
>         // inverse of the above, retrieves the stream
>         OctetStream recoveredStream = parseTextasBase64Binary(t);
> 
>         // the following is usable anytime after the creation
>         // of t.  In an optimized implementation, the
>         // character form won't actually be computed
>         // unless a method like this is called.
>         String base64 = t.data();
> 
> This would create a text node with the base64binary coding of the 
> corresponding stream.  I'm not a DOM expert, so excuse any errors of 
> detail.  Perhaps CharacterData would have been a better node type than 
> Text, I'm not sure. 

If you guys start doing some work on conversions between b64 and binary 
in the DOM, then it would be good to coordinate with SVG, where similar 
things are used:

   http://www.w3.org/TR/SVG12/#File-interface

Unifying the APIs would definitely be good here.

-- 
Robin Berjon



