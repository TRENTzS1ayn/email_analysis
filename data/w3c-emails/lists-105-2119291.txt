docno="lists-105-2119291"
received="Thu Jan 22 20:09:16 2004"
isoreceived="20040123010916"
sent="Thu, 22 Jan 2004 19:08:56 -0600"
isosent="20040123010856"
name="Curt Arnold"
email="carnold@houston.rr.com"
subject="RE: DOM 3 LS - LSSerializer.writeToString encoding declaration"
id="B80DF894-4D40-11D8-A2AB-000393B97126@houston.rr.com"
charset="US-ASCII"
inreplyto="DOM 3 LS - LSSerializer.writeToString encoding declaration"
expires="-1"


To:www-dom@w3.org


A definitive resolution would need to come from the working group.

My take on it is that serializer.writeToString(nodeArg) should be 
equivalent to:

LSOutput output = domImplLS.createLSOutput();
output.characterStream = new StringWriter();
serializer.write(nodeArg, output);

And that that should be equivalent to:

LSOutput output = domImplLS.createLSOutput();
output.byteStream = new ByteArrayOutputStream();
serializer.write(nodeArg, output);
And then reading the byteStream with an InputStreamReader with the 
appropriate encoding.


If these equivalences were followed then Document.inputEncoding or 
Document.xmlEncoding would control the encoding declaration.  So if the 
source document had <?xml encoding="US-ASCII"?> then the string from 
writeToString would contain "<?xml encoding="US-ASCII"?>" and all 
non-US-ASCII characters would be represented by character entities.



