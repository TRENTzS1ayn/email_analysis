docno="lists-105-2611372"
received="Thu Mar 11 11:35:41 2004"
isoreceived="20040311163541"
sent="Thu, 11 Mar 2004 10:35:30 -0600"
isosent="20040311163530"
name="Curt Arnold"
email="carnold@houston.rr.com"
subject="Re: DOMErrorHandler, EventListener, et al in ECMAScript binding"
id="1C713B7E-737A-11D8-BFC5-000393B97126@houston.rr.com"
charset="US-ASCII"
inreplyto="4050035F.90803&#64;w3c.jstenback.com"
expires="-1"


To:www-dom@w3.org


Being able to pass in either a JS function or an object sounds 
desirable in those instances sounds desirable, but I don't see 
justification for it in the current ecmascript binding description.  I 
assume that you do not anticipate any implementation difficulties if it 
took either form.


On Mar 11, 2004, at 12:12 AM, Johnny Stenback wrote:

>
> Curt Arnold wrote:
> [...]
>> It is pretty explicit that a function object is used for 
>> EventListeners  and NodeFilters.  Am I right in interpreting that the 
>> DOMErrorHandler,  UserDataHandler, LSSerializerFilter, LSParserFilter 
>> and  ResourceResolver are passed as objects, something like:
>
> I would argue that it should be able to pass a JS function as any 
> callback interfaces that contain only one method (i.e. one method, no 
> attributes, but constants are ok). That would mean that one can pass a 
> JS function as a DOMErrorHandler, UserDataHandler, or 
> LSResourceResolver, but not as a LSSerializerFilter nor as a 
> LSParserFilter.
>
> -- 
> jst
>



