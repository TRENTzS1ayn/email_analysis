docno="lists-108-3195083"
received="Wed Aug  2 14:01:35 2000"
isoreceived="20000802180135"
sent="Wed, 2 Aug 2000 13:01:20 -0500 (CDT)"
isosent="20000802180120"
name="DavidM Olson"
email="OlsoDav6@webtv.net"
subject="Re: &#64;font-face unicode-range descriptor"
id="8033-398861F0-787@storefull-225.iap.bryant.webtv.net"
charset="US-ASCII"
inreplyto="mahamud&#64;marr.ius.cs.cmu.edu"
expires="-1"

To:mahamud@marr.ius.cs.cmu.edu(Shyjan Mahamud)
Cc:www-font@w3.org


I have just been reading the September 2000 issue of webtechnigues
magazine.  An article with the title "speaking in charsets" may prove
useful.

http://www.iGive.com/html/ssi.cfm?cid=4171&nid=38324
http://community.webtv.net/OlsoDav6/MALKUTHELOHIM



attached mail follows:
hello, i am trying to better understand the role of the unicode-range
descriptor in the @font-face rule. as far as i can tell, this
descriptor is primarily intended to avoid downloading fonts that don't 
contain glyphs of interest. however there are applications where you
would want to create "virtual fonts" from a bunch of fonts. the
example "Excelsior" shown on http://www.w3.org/TR/REC-CSS2/fonts.html
is close to what i am thinking of, but i need some clarification. 
suppose you are defining a new virtual font "vfont" from two real
fonts "rfont1" and "rfont2". assume we want the unicode points U+00-FF 
from "rfont1" and U+100-200 from "rfont2".
adapting the "Excelsior" example to this case, we would have something
like :

@font-face {
     font-family: vfont;
     src: local(rfont1), url(...);
     unicode-range: U+??; /* Latin-1 */
}
@font-face {
     font-family: vfont;
     src: local(rfont2), url(...);
     unicode-range: U+100-200; /* Latin Extended A and B */
}
all this is clear. the question is what happens when the real fonts
rfont1 and rfont2 have overlapping unicode points, say for simplicity
they both have U+000-200. i would like characters in U+100-200 to be
picked up from only rfont2 and not rfont1 even though a user agent
can optimize by using only rfont1 for the whole range. i want to know if this
semantics is implied by the unicode-range descriptor. it is not
entirely clear from the CSS2 spec that this is the case since the
discussion there seems to be more devoted to avoiding having to
download fonts unnecessarily. in other words i am less interested in
specifying the actual range that a font contains, but rather i am
interested in specifying a subset of the actual range.

- shyjan



